{"version":3,"sources":["constants/action_constants.js","reducers/mapParams.js","reducers/covidData.js","utils/countyLoader.js","component/CNNVotingDataContext.js","reducers/votingData.js","constants/mapview_constants.js","reducers/dashboard.js","reducers/store.js","serviceWorker.js","component/BasicMapLayer.js","component/CNNCovidCountiesLayer.js","actions/actions.js","containers/CNNCovidCountiesContainer.js","configureStore.js","containers/FocusedStateCountiesContainer.js","component/AllCounties.js","containers/ElectionResultsCounties.js","component/CongressCounties.js","containers/CongressCountiesContainer.js","component/Layers.js","component/USMap.js","containers/USMapContainer.js","component/Copyright.js","component/MapViewSelector.js","containers/MapViewSelector.js","component/Main.js","containers/MainContainer.js","theme.js","index.js"],"names":["LOAD_COVID","LOAD_US_COVID","SET_ZOOM","SET_CENTER","SET_FOCUSED_STATE_ID","ZOOM","SET_TOOLTIP","SET_MAPVIEW","SET_STATE_LEVEL_RESULTS","SET_COUNTY_VOTING_DATA","INIT_VOTING_DATA_CONTEXT","SET_VOTING_LOADING","SET_COUNTIES_VOTING_LOADING","initialState","center","zoom","focusedStateId","tooltip","mapParams","state","action","produce","draft","payload","type","us","ma","isLoading","dispatch","getState","a","axios","get","CNNCovid","data","covidData","countyResults","AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY","CNNVotingDataContext","nationalVotingData","this","_nationalVotingData","sorted","sort","b","totalVotes","voteOpScale","scaleLinear","domain","length","range","tmpOpScale","scaleLog","_currentState","_bidenResult","_trumpResult","_total","_voteRatio","id","find","s","candidates","c","votes","counties","sortedCounties","voteCountyOpScale","_currentCounty","county","_bidenCountyResult","_trumpCountyResult","_countyTotal","_countyVoteRatio","name","toLocaleString","d3","copy","opacity","dataContext","isLoadingCounties","applyMissingCounties","key","biden","trump","countyLoader","forEach","races","stateFips","stateAbbr","allStates","val","map","countyFips","candidateID","cs","vote","push","filter","n","includes","st","stateResult","result","stateFipsCode","stateAbbreviation","totalVote","candidate","candidateId","fullName","voteNum","votingDataContext","votingData","index","findIndex","holder","MapViews","BASIC","ELECTION_RESULTS_COUNTY","COVID","CONGRESS","mapView","mapview_constants","dashboard","rootReducer","combineReducers","Boolean","window","location","hostname","match","BasicMapLayer","setTooltip","handleStateClick","geography","statesBoundaries","geographies","projection","path","geo","stroke","fill","onMouseEnter","properties","onMouseLeave","onClick","style","default","strokeWidth","outline","hover","rsmKey","CNNCovidCountiesLayer","nextProps","nextState","nextContext","props","usCovidData","property","covidColorScale","fips","countyColor","countyTooltip","cases","deaths","estimatedPopulation","deathsPer100Cases","casesPer100KResidents","deathsPer100KResidents","Component","doZoom","preloadedState","connect","ownProps","StateCounties","PureComponent","AllCounties","stateId","substr","selectCurrentStateById","selectCurrentCountyById","undefined","getCountyColor","getCountyTooltip","CongressCounties","STATE","CONG_DIST","Layers","currrentCounties","congressDistricts","parseGeographies","geos","substring","CNNCovidCountiesContainer","ElectionResultsCounties","CongressCountiesContainer","FocusedStateCountiesContainer","USMap","mapViewChange","focusStateChannge","handleMove","data-tip","border","height","width","onMoveEnd","event","zoomEvent","Template","focusChanged","mapViewChanged","isLoadingChanged","tooltipChanged","Typography","gaVotingData","ga","setCenter","setFocusedState","coordinates","invert","centroid","Copyright","variant","color","align","Date","getFullYear","MapViewSelector","changeMapView","FormControl","Select","native","defaultValue","onChange","value","target","Main","Container","lg","Box","USMapContainer","gutterBottom","Link","href","theme","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6412fe80.chunk.js","sourcesContent":["export const LOAD_STATES='LOAD_STATES';\nexport const LOAD_COUNTIES='LOAD_COUNTIES';\nexport const LOAD_COVID='LOAD_COVID';\nexport const LOAD_US_COVID='LOAD_US_COVID';\nexport const SET_ZOOM='SET_ZOOM';\nexport const SET_CENTER='SET_CENTER';\nexport const SET_FOCUSED_STATE_ID='SET_FOCUSED_STATE_ID';\nexport const ZOOM='ZOOM';\nexport const SET_TOOLTIP='SET_TOOLTIP';\nexport const SET_MAPVIEW='SET_MAPVIEW';\nexport const SET_BOUNDARIES_LOADING = 'SET_BOUNDARIES_LOADING';\nexport const SET_STATE_LEVEL_RESULTS = 'SET_STATE_LEVEL_RESULTS';\nexport const SET_COUNTY_VOTING_DATA = 'SET_COUNTY_VOTING_DATA';\nexport const INIT_VOTING_DATA_CONTEXT = 'INIT_VOTING_DATA_CONTEXT';\nexport const SET_VOTING_LOADING = 'SET_VOTING_LOADING';\nexport const SET_COUNTIES_VOTING_LOADING = 'SET_COUNTIES_VOTING_LOADING';","import produce from 'immer';\nimport {SET_CENTER,SET_ZOOM,SET_TOOLTIP,SET_FOCUSED_STATE_ID,ZOOM} from '../constants/action_constants';\nconst initialState={\n  center:[0,0],\n  zoom:1,\n  focusedStateId:0,\n  // center:[-83.43523233606125, 32.63933616159129],\n  // zoom:4,\n  // focusedStateId:13,\n  tooltip:'',\n};\n\nconst mapParams = (state=initialState, action) =>{\n  return produce( state, draft =>{\n    const {payload} = action;\n    switch (action.type) {\n      case SET_CENTER:\n        draft.center=payload;\n        break;\n      case SET_ZOOM:\n        draft.zoom=payload;\n        break;\n      case SET_FOCUSED_STATE_ID:\n        draft.focusedStateId = payload;\n        break;\n      case SET_TOOLTIP:\n        draft.tooltip = payload;\n        break;\n      case ZOOM:\n        return {...payload};\n      default:\n        return;\n    }\n  })\n}\n\nexport default mapParams;\n","import produce from 'immer';\nimport { LOAD_COVID, LOAD_US_COVID} from '../constants/action_constants';\nimport axios from 'axios';\n\nlet initialState={\n  us:[],\n  ma:[],\n  isLoading:false\n};\n\nconst covidData = (state=initialState, action) =>{\n  return produce( state, draft =>{\n    const {payload} = action;\n    switch (action.type) {\n      case LOAD_COVID:\n        draft.ma=payload;\n        break;\n      case LOAD_US_COVID:\n        draft.us=payload;\n        break;\n      case 'SET_COVID_LOADING':\n        draft.isLoading=payload;\n        break;\n      default:\n        return;\n    }\n  })\n}\n\nexport async function fetchCovidData(dispatch, getState) {\n  dispatch({type: 'SET_COVID_LOADING', payload:true});\n  //const nationalCovid = await axios.get('https://covid.cdc.gov/covid-data-tracker/COVIDData/getAjaxData?id=integrated_county_latest_external_data');\n  const CNNCovid = await axios.get('https://ix.cnn.io/data/novel-coronavirus-2019-ncov/us/counties.json');\n  dispatch({ type: LOAD_US_COVID, payload: CNNCovid.data.data });\n  //dispatch({ type: LOAD_US_COVID, payload: nationalCovid.integrated_county_latest_external_data });\n  dispatch({type: 'SET_COVID_LOADING', payload:false});\n}\n\nexport default covidData;\n","import AL from '../data/AL-counties.json';\nimport AK from '../data/AK-counties.json';\nimport AZ from '../data/AZ-counties.json';\nimport AR from '../data/AR-counties.json';\nimport CA from '../data/CA-counties.json';\nimport CO from '../data/CO-counties.json';\nimport CT from '../data/CT-counties.json';\nimport DE from '../data/DE-counties.json';\nimport DC from '../data/DC-counties.json';\nimport FL from '../data/FL-counties.json';\nimport GA from '../data/GA-counties.json';\nimport HI from '../data/HI-counties.json';\nimport ID from '../data/ID-counties.json';\nimport IL from '../data/IL-counties.json';\nimport IN from '../data/IN-counties.json';\nimport IA from '../data/IA-counties.json';\nimport KS from '../data/KS-counties.json';\nimport KY from '../data/KY-counties.json';\nimport LA from '../data/LA-counties.json';\nimport ME from '../data/ME-counties.json';\nimport MD from '../data/MD-counties.json';\nimport MA from '../data/MA-counties.json';\nimport MI from '../data/MI-counties.json';\nimport MN from '../data/MN-counties.json';\nimport MS from '../data/MS-counties.json';\nimport MO from '../data/MO-counties.json';\nimport MT from '../data/MT-counties.json';\nimport NE from '../data/NE-counties.json';\nimport NV from '../data/NV-counties.json';\nimport NH from '../data/NH-counties.json';\nimport NJ from '../data/NJ-counties.json';\nimport NM from '../data/NM-counties.json';\nimport NY from '../data/NY-counties.json';\nimport NC from '../data/NC-counties.json';\nimport ND from '../data/ND-counties.json';\nimport OH from '../data/OH-counties.json';\nimport OK from '../data/OK-counties.json';\nimport OR from '../data/OR-counties.json';\nimport PA from '../data/PA-counties.json';\nimport RI from '../data/RI-counties.json';\nimport SC from '../data/SC-counties.json';\nimport SD from '../data/SD-counties.json';\nimport TN from '../data/TN-counties.json';\nimport TX from '../data/TX-counties.json';\nimport UT from '../data/UT-counties.json';\nimport VT from '../data/VT-counties.json';\nimport VA from '../data/VA-counties.json';\nimport WA from '../data/WA-counties.json';\nimport WV from '../data/WV-counties.json';\nimport WI from '../data/WI-counties.json';\nimport WY from '../data/WY-counties.json';\n\n\nconst countyResults= {AL, AK, AZ, AR, CA, CO, CT, DE, DC, FL, GA, HI, ID, IL, IN, IA, KS, KY, LA, ME, MD, MA, MI, MN, MS, MO, MT, NE, NV, NH, NJ, NM, NY, NC, ND, OH, OK, OR, PA, RI, SC, SD, TN, TX, UT, VT, VA, WA, WV, WI, WY};\nexport default countyResults;\n","import React from 'react';\nimport * as d3 from 'd3';\nimport { scaleLinear,scaleLog,scaleSequential } from 'd3-scale';\n\nexport default class CNNVotingDataContext {\n    constructor(nationalVotingData) {\n        this._nationalVotingData = nationalVotingData;\n        let sorted=[...nationalVotingData].sort( (a,b) => a.totalVotes - b.totalVotes);\n        this.voteOpScale = scaleLinear().domain([sorted[0].totalVotes,sorted[sorted.length-2].totalVotes]).range([0,1]);\n        this.tmpOpScale = scaleLog().domain([4000,2000000]).range([0,1]);\n        this._currentState={};\n        this._bidenResult ={};\n        this._trumpResult={}\n        this._total={};\n        this._voteRatio={};\n    }\n    selectCurrentStateById(id){\n        this._currentState=this._nationalVotingData.find( s => s.id === id);\n        if(!this._currentState){\n            return undefined;\n        }\n        this._bidenResult = this._currentState? this._currentState.candidates.find( c => c.id === 1036  ): {};\n        this._trumpResult = this._currentState? this._currentState.candidates.find( c => c.id !== 1036  ): {};\n        this._total =this._bidenResult.votes+this._trumpResult.votes\n        this._voteRatio = this._bidenResult.id ? this._bidenResult.votes/this._total :0;\n        if (this._currentState && this._currentState.counties) {\n            let sortedCounties = [...this._currentState.counties].sort((a, b) => a.totalVotes - b.totalVotes);\n            this.voteCountyOpScale = scaleLinear().domain([sortedCounties[0].totalVotes, sortedCounties[sortedCounties.length - 1].totalVotes]).range([0, 1]);\n        }\n        return this._currentState;\n    }\n    selectCurrentCountyById(id){\n        if(!this._currentState.counties){\n            return undefined;\n        }\n        this._currentCounty=this._currentState.counties.find( county => county.id === id);\n        this._bidenCountyResult = this._currentCounty ?this._currentCounty.candidates.find( c => c.id === 1036  ): {}\n        this._trumpCountyResult = this._currentCounty? this._currentCounty.candidates.find( c => c.id !== 1036  ): {};\n        this._countyTotal =this._bidenCountyResult.votes+this._trumpCountyResult.votes\n        this._countyVoteRatio = this._bidenCountyResult.id ? this._bidenCountyResult.votes/this._countyTotal :0;\n        return this._currentCounty;\n    }\n    getTooltip(name){\n        return this._currentState?(<div>\n            <div>{name}</div>\n            <div>Total votes: {this._currentState.totalVotes}</div>\n            <div>Biden: {this._bidenResult.votes}</div>\n            <div>Trump: {this._trumpResult.votes}</div>\n        </div>):null;\n    }\n    getCountyTooltip(name){\n        return this._currentCounty?(\n            <>\n                <div>County: {name}</div>\n                <div>Total Votes: {this._currentCounty.totalVotes.toLocaleString()}</div>\n                <div>Joe Biden: {this._bidenCountyResult.votes.toLocaleString()}</div>\n                <div>Donald Trump: {this._trumpCountyResult.votes.toLocaleString()}</div>\n            </>\n        ):null;\n    }\n    getCountyColor(){\n        const countyColor= this._currentCounty ? d3.color(this._countyVoteRatio>=.5? '#00F':'#F00').copy({opacity:this.tmpOpScale(this._countyTotal)}):\"#DDD\";\n        return countyColor;\n    }\n    getStateColor(id,focusedStateId){\n        const stateColor=this._currentState && focusedStateId !==id ? d3.color(this._voteRatio>=.5? '#00F':'#F00').copy({opacity:this.voteOpScale(this._total)}) :\"#DDD\";\n        return stateColor;\n    }\n}","import produce from 'immer';\nimport axios from 'axios';\nimport xml2js from 'xml2js';\nimport allStates from '../data/allstates.json';\nimport countyLoader from '../utils/countyLoader';\nimport CNNVotingDataContext from '../component/CNNVotingDataContext';\nimport {\n    INIT_VOTING_DATA_CONTEXT,\n    SET_COUNTIES_VOTING_LOADING,\n    SET_COUNTY_VOTING_DATA,\n    SET_STATE_LEVEL_RESULTS,\n    SET_VOTING_LOADING\n} from '../constants/action_constants';\n\nlet initialState={\n    us:[],\n    dataContext:null,\n    isLoadingCounties:false,\n    isLoading:false,\n};\n\nconst votingData = (state=initialState, action) =>{\n    return produce( state, draft =>{\n        const {payload} = action;\n        switch (action.type) {\n            case SET_STATE_LEVEL_RESULTS:\n                let index = draft.us.findIndex( s => s.state === payload.state);\n                if (index >= 0){\n                    draft.us[index] = payload;\n                }else{\n                    draft.us.push(payload);\n                }\n                break;\n            case SET_COUNTY_VOTING_DATA:\n                let holder = draft.us.find( s => s.state === payload.stateAbbr);\n                if(holder){\n                    holder.counties = payload.counties;\n                }\n                break;\n            case INIT_VOTING_DATA_CONTEXT:\n                draft.dataContext=payload;\n                break;\n            case SET_VOTING_LOADING:\n                draft.isLoading=payload;\n                break;\n            case SET_COUNTIES_VOTING_LOADING:\n                draft.isLoadingCounties=payload;\n                break;\n            default:\n                return;\n        }\n    })\n}\n\nexport async function applyMissingCounties(dispatch,getState){\n    dispatch({type: SET_COUNTIES_VOTING_LOADING, payload:true});\n    const key={\n        AK:{biden:'7073',trump:'6638'},\n        ME:{biden:'30791',trump:'29633'},\n        NH:{biden:'49452',trump:'49453'},\n        VT:{biden:'53668',trump:'53669'},\n        MA:{biden:'35087',trump:'35088'},\n        CT:{biden:'21813',trump:'21816'},\n        RI:{biden:'46718',trump:'46719'},\n    };\n    const newEngland=[countyLoader.ME,countyLoader.NH,countyLoader.VT,countyLoader.MA,countyLoader.CT,countyLoader.RI];\n    newEngland.forEach( s =>{\n        const id = s.races[0].stateFips;\n        const stateAbbr= allStates.find(s => s.val === id).id;\n        let counties=[]\n        s.races.map(({countyFips,candidates})=>{\n            const biden= candidates.find(({candidateID}) => candidateID === key[stateAbbr].biden);\n            const trump = candidates.find(({candidateID}) => candidateID === key[stateAbbr].trump);\n            const cs=[{id:1036,votes:biden.vote},{id:8639,votes:trump.vote}];\n            counties.push({id: countyFips, totalVotes:biden.vote+trump.vote,candidates:cs});\n        });\n        dispatch({type: SET_COUNTY_VOTING_DATA,payload:{stateAbbr,counties:counties}});\n    });\n    const filtered=allStates.filter(n => !['ME','VT','NH','MA','CT','RI'].includes(n.id))\n    filtered.forEach( st =>{\n        dispatch({type: SET_COUNTY_VOTING_DATA,payload:{stateAbbr:st.id,counties:countyLoader[st.id]}});\n    });\n    dispatch({type: SET_COUNTIES_VOTING_LOADING, payload:false});\n}\nexport async function fetchNationalVotingData(dispatch,getState){\n    dispatch({type: SET_VOTING_LOADING, payload:true});\n    const nationalResults = await axios.get('https://politics-elex-results.data.api.cnn.io/results/view/2020-national-races-PG.json');\n    nationalResults.data.forEach( stateResult =>{\n        const result = { id: stateResult.stateFipsCode,state:stateResult.stateAbbreviation,totalVotes:stateResult.totalVote,candidates:stateResult.candidates.map( candidate => {return {id: candidate.candidateId,name: candidate.fullName, votes: candidate.voteNum}})}\n        dispatch({type: SET_STATE_LEVEL_RESULTS,payload: result});\n    });\n    dispatch(applyMissingCounties);\n    const votingDataContext = new CNNVotingDataContext(getState().votingData.us);\n    dispatch({type: INIT_VOTING_DATA_CONTEXT, payload: votingDataContext});\n    dispatch({type: SET_VOTING_LOADING, payload:false});\n}\n\nexport function fetchStateVotingData(stateAbbr){\n    return async function fetchStateVotingDataThunk(dispatch, getState) {\n        dispatch({type: SET_COUNTIES_VOTING_LOADING, payload:true});\n        const url = `https://politics-elex-results.data.api.cnn.io/results/view/2020-county-races-PG-${stateAbbr}.json`\n        const counties = await axios.get(url);\n        const results= counties.data.map(county => {\n            const totalVotes=county.candidates.reduce((acc,current) => current.voteNum + acc,0);\n            return {name:county.countyName,id:county.countyFipsCode,totalVotes:totalVotes,candidates:county.candidates.map( candidate => {return {id: candidate.candidateId,name: candidate.fullName, votes: candidate.voteNum}})}\n        })\n        dispatch({type: SET_COUNTY_VOTING_DATA,payload:{stateAbbr,counties:results}});\n        dispatch({type: SET_COUNTIES_VOTING_LOADING, payload:false});\n    }\n}\nexport async function fetchAllVotingData(dispatch,getState){\n    dispatch({type: SET_COUNTIES_VOTING_LOADING, payload:true});\n    const stuff=['ME','NH','VT','MA','CT','RI'];\n    const filtered=allStates.filter(n => !stuff.includes(n.id))\n    for(const st of filtered){\n        const url = `https://politics-elex-results.data.api.cnn.io/results/view/2020-county-races-PG-${st.id}.json`\n        const counties = await axios.get(url);\n        const results= counties.data.map(county => {\n            const totalVotes=county.candidates.reduce((acc,current) => current.voteNum + acc,0);\n            return {name:county.countyName,id:county.countyFipsCode,totalVotes:totalVotes,candidates:county.candidates.map( candidate => {return {id: candidate.candidateId,name: candidate.fullName, votes: candidate.voteNum}})}\n        })\n        dispatch({type: SET_COUNTY_VOTING_DATA,payload:{stateAbbr:st.id,counties:results}});\n    }\n    dispatch({type: SET_COUNTIES_VOTING_LOADING, payload:false});\n}\n\nexport async function fetchGAVotingData(dispatch, getState) {\n    dispatch({type: SET_VOTING_LOADING, payload:true});\n    const gaVoting = await axios.get('ga-detail.xml');\n    let parser = new xml2js.Parser()\n    let result = await parser.parseStringPromise(gaVoting.data);\n    const votes = result.ElectionResult.Contest.find((contest)=> contest.$.key==='5000').Choice;\n    const trump = votes.find( c => c.$.key === '1');\n    const biden = votes.find( c => c.$.key === '2');\n    const jorgensen = votes.find( c => c.$.key === '3');\n    const reducer = (accumulator, currentValue, candidate) => {\n        currentValue.County.forEach(county => {\n            const name = county.$.name;\n            let match = accumulator.find( c => c.name === name);\n            if(match === undefined){\n                let tmp={name};\n                tmp[candidate] = +county.$.votes;\n                accumulator.push(tmp);\n            }else{\n                if (match[candidate]) {\n                    match[candidate] += +county.$.votes;\n                }else{\n                    match[candidate] = +county.$.votes;\n                }\n            }\n        })\n        return accumulator;\n    };\n    let counties = trump.VoteType.reduce(\n        (accumulator, currentValue) => reducer(accumulator,currentValue,'trump')\n        ,[]\n        );\n    counties = biden.VoteType.reduce(\n        (accumulator, currentValue) => reducer(accumulator,currentValue,'biden')\n        ,counties\n    );\n    counties = jorgensen.VoteType.reduce(\n        (accumulator, currentValue) =>  reducer(accumulator,currentValue,'jorgensen')\n        ,counties\n    );\n    let res={\n        total: +trump.$.totalVotes + +biden.$.totalVotes + +jorgensen.$.totalVotes,\n        trumpTotal: +trump.$.totalVotes,\n        bidenTotal: +biden.$.totalVotes,\n        jorgensenTotal: +jorgensen.$.totalVotes,\n        counties\n    }\n    dispatch({type: 'SET_GA_DATA',payload:res});\n    dispatch({type: SET_VOTING_LOADING, payload:false});\n}\n\nexport default votingData;","\nconst MapViews={\n    BASIC:'BASIC',\n    ELECTION_RESULTS_COUNTY:'ELECTION_RESULTS_COUNTY',\n    COVID:'COVID',\n    CONGRESS:'CONGRESS',\n}\nexport default MapViews;","import produce from 'immer';\nimport mapview_constants from '../constants/mapview_constants';\nimport {SET_MAPVIEW} from '../constants/action_constants';\n\nconst initialState={\n    mapView:mapview_constants.ELECTION_RESULTS_COUNTY,\n};\n\nconst dashboard = (state=initialState, action) =>{\n    return produce( state, draft =>{\n        const {payload} = action;\n        switch (action.type) {\n            case SET_MAPVIEW:\n                draft.mapView=payload;\n                break;\n            default:\n                return;\n        }\n    })\n}\n\nexport default dashboard;","import mapParams from './mapParams';\nimport covidData from './covidData';\nimport {combineReducers} from 'redux';\nimport votingData from './votingData';\nimport dashboard from \"./dashboard\";\n\nconst rootReducer = combineReducers({\n  mapParams,\n  covidData,\n  votingData,\n  dashboard,\n})\nexport default rootReducer;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport statesBoundaries from '../data/states-10m.json';\nimport {Geographies, Geography} from 'react-simple-maps';\n\n\nconst BasicMapLayer = ({setTooltip,handleStateClick}) =>\n            <Geographies geography={statesBoundaries}>\n                {({ geographies,projection,path }) =>\n                    geographies.map(geo => {\n                        return (\n                            <Geography\n                                key={geo.rsmKey}\n                                stroke=\"#000\"\n                                geography={geo}\n                                fill={\"#FFF\"}\n                                onMouseEnter={() => {\n                                    setTooltip(<div>{geo.properties.name}</div>);\n                                }}\n                                onMouseLeave={() => {\n                                    setTooltip('');\n                                }}\n                                onClick={() => handleStateClick(geo,projection,path)}\n                                style={{\n                                    default: {\n                                        stroke: \"#000\",\n                                        strokeWidth: 0.2,\n                                        outline: \"none\",\n                                    },\n                                    hover: {\n                                        fill: \"#CFD8DC\",\n                                        stroke: \"#607D8B\",\n                                        strokeWidth: 1,\n                                        outline: \"none\",\n                                    },\n                                }}\n                            />)\n                    })\n                }\n            </Geographies>\n        ;\nexport default BasicMapLayer;\n","import React, {Component} from 'react';\nimport { Geography} from 'react-simple-maps';\nimport { scaleLinear,scaleLog,scaleRadial,scaleQuantile,scaleSequential } from 'd3-scale';\nimport * as d3 from 'd3';\n\nclass CNNCovidCountiesLayer extends Component{\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        return true;\n    }\n    render(){\n        const {geographies, usCovidData, setTooltip} = this.props;\n        const property='casesPer100KResidents';\n        const sorted = [...usCovidData].sort((a,b) => a[property] - b[property]);\n        const covidColorScale = scaleLog().domain([sorted[100][property],sorted[sorted.length-20][property]]).range([0,1]);\n        return (\n                geographies.map(geo => {\n                    const county =  usCovidData.find( c => c.fips === geo.id );\n                    const countyColor = county?d3.color('#F00').copy({opacity:covidColorScale(county[property])}):'#FFF';\n                    const countyTooltip = county?<div>\n                        <div>{geo.properties.name}</div>\n                        <div>Cases: {county.cases.toLocaleString()}</div>\n                        <div>Deaths: {county.deaths}</div>\n                        <div>Est. Pop: {county.estimatedPopulation.toLocaleString()}</div>\n                        <div>Deaths/100 cases: {county.deathsPer100Cases}</div>\n                        <div>Cases/100K pp: {county.casesPer100KResidents}</div>\n                        <div>Deaths/100K pp: {county.deathsPer100KResidents}</div>\n                    </div>:<div/>;\n                    return (\n                        <Geography\n                            key={geo.rsmKey}\n                            stroke=\"#000\"\n                            geography={geo}\n                            fill={countyColor}\n                            onMouseEnter={() => {\n                                setTooltip(countyTooltip);\n                            }}\n                            onMouseLeave={() => {\n                                setTooltip('');\n                            }}\n                            strokeWidth={.01}\n                            outline={'none'}\n                            style={{\n                                hover: {\n                                    fill: \"#CFD8DC\",\n                                    stroke: \"#607D8B\",\n                                    strokeWidth: .25,\n                                    outline: \"none\",\n                                }\n                            }}\n                        />)\n                })\n        )\n    }\n}\nexport default CNNCovidCountiesLayer;\n","import {\n  SET_ZOOM,\n  SET_TOOLTIP,\n  SET_CENTER,\n  SET_FOCUSED_STATE_ID,\n  ZOOM,\n  SET_MAPVIEW\n} from '../constants/action_constants';\n\nexport function setZoom(zoom){\n  return {type: SET_ZOOM, payload:zoom}\n}\nexport function setCenter(center){\n  return {type: SET_CENTER, payload:center}\n}\nexport function setFocusedState(id){\n  return {type: SET_FOCUSED_STATE_ID, payload:id}\n}\nexport function doZoom(payload){\n  return {type: ZOOM, payload}\n}\nexport function setTooltip(payload){\n  return {type: SET_TOOLTIP, payload}\n}\n\nexport function setMapView(mapView){\n  return {type: SET_MAPVIEW, payload:mapView}\n}","import CNNCovidCountiesLayer from \"../component/CNNCovidCountiesLayer\";\nimport {connect} from \"react-redux\";\nimport {setTooltip} from \"../actions/actions\";\n\n\nconst mapStateToProps = (state,ownProps)=>{\n    return {\n        usCovidData : state.covidData.us,\n        ownProps\n    }\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n    return {\n        setTooltip(payload){\n            dispatch(setTooltip(payload));\n        }\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(CNNCovidCountiesLayer)","import {applyMiddleware,createStore} from 'redux';\nimport rootReducer from './reducers/store';\nimport thunkMiddleware from 'redux-thunk';\n\nexport default function configureStore(preloadedState){\n\n  return createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(thunkMiddleware)\n  );\n}\n","import {setTooltip} from \"../actions/actions\";\nimport {connect} from \"react-redux\";\nimport React, {PureComponent} from \"react\";\nimport {Geography} from \"react-simple-maps\";\n\n\nclass StateCounties extends PureComponent{\n    render(){\n        const {geographies,focusedStateId,setTooltip} = this.props;\n        if(+focusedStateId ==0 )\n            return <></>;\n        return geographies.map(geo => {\n            const {name} = geo.properties;\n            const tooltip=<div>{name + ' '+geo.id }</div>;\n            return (\n                <Geography\n                    key={geo.rsmKey}\n                    stroke=\"#000\"\n                    geography={geo}\n                    fill={\"#DDD\"}\n                    onMouseEnter={() => {\n                        setTooltip(tooltip);\n                    }}\n                    onMouseLeave={() => {\n                        setTooltip('');\n                    }}\n                    style={{\n                        default: {\n                            stroke: \"#FFFFFF\",\n                            strokeWidth: 0.1,\n                            outline: \"none\",\n                        },\n                        hover: {\n                            fill: \"#CFD8DC\",\n                            stroke: \"#607D8B\",\n                            strokeWidth: 0.2,\n                            outline: \"none\",\n                        },\n                    }}\n                />\n            )\n        })\n    }\n}\n\nconst mapStateToProps = (state,ownProps)=>{\n    return {\n        usCovidData : state.covidData.us,\n        focusedStateId: state.mapParams.focusedStateId,\n        ownProps\n    }\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n    return {\n        setTooltip(payload){\n            dispatch(setTooltip(payload));\n        }\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(StateCounties)","import {Geography} from 'react-simple-maps';\nimport React from 'react';\n\nconst AllCounties = ({geographies,setTooltip,votingDataContext}) =>\n        geographies.map(geo => {\n            const stateId=geo.id.substr(0,2);\n            let stat = votingDataContext.selectCurrentStateById(stateId);\n            let county = stat ? votingDataContext.selectCurrentCountyById(geo.id):undefined;\n            const countyColor = county ? votingDataContext.getCountyColor(geo.id):'#FFF';\n            const countyTooltip = county ? votingDataContext.getCountyTooltip(geo.properties.name):<div>{geo.properties.name + ' '+geo.id }</div>;\n            return (\n                <Geography\n                    key={geo.rsmKey}\n                    stroke=\"#000\"\n                    geography={geo}\n                    fill={countyColor}\n                    onMouseEnter={() => {\n                        setTooltip(countyTooltip);\n                    }}\n                    onMouseLeave={() => {\n                        setTooltip('');\n                    }}\n                    style={{\n                        default: {\n                            stroke: \"#000\",\n                            strokeWidth: 0.01,\n                            outline: \"none\",\n                        },\n                        hover: {\n                            fill: \"#CFD8DC\",\n                            stroke: \"#607D8B\",\n                            strokeWidth: .25,\n                            outline: \"none\",\n                        },\n                    }}\n                />)\n        });\n\nexport default AllCounties;","import {setTooltip} from \"../actions/actions\";\nimport {connect} from \"react-redux\";\nimport AllCounties from \"../component/AllCounties\";\n\nconst mapStateToProps = (state,ownProps)=>{\n    return {\n        votingDataContext:state.votingData.dataContext,\n        ownProps\n    }\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n    return {\n        setTooltip(payload){\n            dispatch(setTooltip(payload));\n        }\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(AllCounties)","import { Geography} from 'react-simple-maps';\n\nimport React, {Component} from 'react';\n\n\nexport default class CongressCounties extends Component{\n    render(){\n        const {geographies,setTooltip}=this.props;\n        return geographies.map(geo => {\n                    const {STATE, CONG_DIST} = geo.properties;\n                    return <Geography\n                        key={geo.rsmKey}\n                        geography={geo}\n                        fill={'#FFF'}\n                        onMouseEnter={() => {\n                            setTooltip(<div>\n                                <div>State: {STATE}</div>\n                                <div>District: {CONG_DIST}</div>\n                            </div>);\n                        }}\n                        onMouseLeave={() => {\n                            setTooltip('');\n                        }}\n                        style={{\n                            default: {\n                                stroke: \"#000\",\n                                strokeWidth: 0.1,\n                                outline: \"none\",\n                            },\n                            hover: {\n                                fill: \"#CFD8DC\",\n                                stroke: \"#607D8B\",\n                                strokeWidth: .1,\n                                outline: \"none\",\n                            },\n                        }}\n                    />\n                });\n\n    }\n}","import {setTooltip} from '../actions/actions';\nimport {connect} from 'react-redux';\nimport CongressCounties from \"../component/CongressCounties\";\n\n\nconst mapStateToProps = (state,ownProps)=>{\n    return {\n        ownProps\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setTooltip(payload) {\n            dispatch(setTooltip(payload));\n        }\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(CongressCounties)","import counties from '../data/counties-10m.json';\nimport {Geographies} from 'react-simple-maps';\nimport React from 'react';\nimport mapview_constants from '../constants/mapview_constants';\nimport CNNCovidCountiesContainer from '../containers/CNNCovidCountiesContainer';\nimport FocusedStateCountiesContainer from '../containers/FocusedStateCountiesContainer';\nimport ElectionResultsCounties from '../containers/ElectionResultsCounties';\nimport congressDistricts from '../data/US-district-current.topo.json';\nimport CongressCountiesContainer from '../containers/CongressCountiesContainer';\n\nconst {BASIC,ELECTION_RESULTS_COUNTY,COVID,CONGRESS} = mapview_constants;\nconst Layers = ({mapView,focusedStateId})=> {\n    const currrentCounties=mapView === CONGRESS?congressDistricts:counties;\n    return <Geographies geography={currrentCounties}\n                 parseGeographies={(geos) => {\n                     switch (mapView) {\n                         case BASIC:\n                             return geos.filter(geo => geo.id.substring(0, 2) === focusedStateId)\n                         // case CONGRESS:\n                         //     console.log(geos);\n                         //     return geos.filter(geo => geo.id === '31101');\n                         default:\n                             return geos;\n                     }\n                 }} >\n        {\n            ({geographies, projection, path}) => {\n                switch (mapView) {\n                    case COVID:\n                        return <CNNCovidCountiesContainer geographies={geographies}/>;\n                    case ELECTION_RESULTS_COUNTY:\n                        return <ElectionResultsCounties geographies={geographies} />;\n                    case CONGRESS:\n                        return <CongressCountiesContainer  geographies={geographies}/>\n                    default:\n                        return <FocusedStateCountiesContainer geographies={geographies}/>;\n                }\n\n            }\n        }\n    </Geographies>\n};\n\nexport default Layers;","import React, {Component} from 'react';\nimport {ComposableMap, Geographies, Geography, Marker, ZoomableGroup} from 'react-simple-maps';\nimport CNNVotingDataContext from './CNNVotingDataContext';\nimport BasicMapLayer from \"./BasicMapLayer\";\nimport Layers from \"./Layers\";\n\n\nclass USMap extends Component{\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const mapViewChange = this.props.mapView !== nextProps.mapView;\n        const focusStateChannge = this.props.focusedStateId !== nextProps.focusedStateId;\n        return mapViewChange || focusStateChannge;\n    }\n\n    render(){\n        const {center,mapView,zoom,handleStateClick,handleMove,focusedStateId,setTooltip} = this.props;\n        return (\n            <ComposableMap  data-tip='' projection=\"geoAlbersUsa\"  style={{border:'1px black solid',height:'100%', width:'100%'}}>\n                <ZoomableGroup center={center} zoom={zoom} onMoveEnd={(event,zoomEvent)=>handleMove(event,focusedStateId)}>\n                    <BasicMapLayer setTooltip={setTooltip} handleStateClick={handleStateClick}/>\n                    <Layers mapView={mapView} focusedStateId={focusedStateId}/>\n\n\n                    {/*<VotingLayer votingDataContext={votingDataContext} focusedStateId={focusedStateId} setTooltip={setTooltip} handleStateClick={handleStateClick} zoom={zoom}/>*/}\n                    {/*<Labels />*/}\n\n                    {/*<Cities zoom={zoom} />*/}\n                </ZoomableGroup>\n            </ComposableMap>\n        );\n    }\n}\n\nexport default USMap;\n","import React,{Component} from \"react\";\nimport USMap from '../component/USMap';\nimport {connect} from 'react-redux';\nimport {setCenter,setZoom,setFocusedState,doZoom,setTooltip} from '../actions/actions';\nimport ReactTooltip from \"react-tooltip\";\nimport { Typography} from \"@material-ui/core\";\n\n\nclass Template extends Component{\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    const focusChanged = this.props.focusedStateId !== nextProps.focusedStateId;\n    const mapViewChanged = this.props.mapView !== nextProps.mapView;\n    const isLoadingChanged = this.props.isLoading !== nextProps.isLoading;\n    const tooltipChanged = this.props.tooltip !== nextProps.tooltip;\n    return focusChanged || mapViewChanged || isLoadingChanged || tooltipChanged;\n  }\n\n  render(){\n    const {isLoading,tooltip}=this.props;\n    if(isLoading){\n      return <Typography style={{border:'1px black solid',height:'100%', width:'100%'}}>Loading</Typography>;\n    }\n    return(<>\n            <USMap {...this.props} />\n            <ReactTooltip>{tooltip}</ReactTooltip>\n          </>\n    )\n  }\n}\n\nconst mapStateToProps = state =>{\n  const {zoom,center,focusedStateId} = state.mapParams;\n  return {\n    zoom,\n    center,\n    focusedStateId,\n    tooltip:state.mapParams.tooltip,\n    isLoading:state.votingData.isLoading || state.votingData.isLoadingCounties || state.covidData.isLoading,\n    isLoadingCounties: state.votingData.isLoadingCounties,\n    gaVotingData: state.votingData.ga,\n    usCovidData: state.covidData.us,\n    covidData: state.covidData.ma,\n    nationalVotingData : state.votingData.us,\n    mapView: state.dashboard.mapView,\n  };\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n  return {\n    setCenter:(center)=>{\n      dispatch(setCenter(center));\n    },\n    setFocusedState:(id)=>{\n      dispatch(setFocusedState(id));\n    },\n    setTooltip(payload){\n      dispatch(setTooltip(payload));\n    },\n    handleMove(event,focusedStateId){\n      const {zoom,coordinates} = event;\n      dispatch(doZoom({center:coordinates,zoom,focusedStateId : zoom < 4 ? '0' : focusedStateId}));\n    },\n    handleStateClick(geo,projection,path,stateAbbr,zoom){\n      const center = projection.invert(path.centroid(geo));\n      //dispatch(fetchStateVotingData(stateAbbr));\n      dispatch(doZoom({center,zoom:zoom>4?zoom:4,focusedStateId:geo.id}));\n    }\n  };\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Template);\n","import {Link, Typography} from '@material-ui/core';\nimport React from 'react';\n\n\nconst Copyright = () => {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {`Copyright © Harry Phan ${new Date().getFullYear()} `}\n        </Typography>\n    );\n}\n\nexport default Copyright;","import {PureComponent} from \"react\";\nimport {FormControl, InputLabel, Select} from \"@material-ui/core\";\nimport mapview_constants from '../constants/mapview_constants';\nconst {BASIC,ELECTION_RESULTS_COUNTY,COVID,CONGRESS} = mapview_constants;\n\nexport default class MapViewSelector extends PureComponent{\n    render(){\n        const {changeMapView,mapView} = this.props;\n        return(\n            <FormControl >\n                <Select\n                    native\n                    defaultValue={mapView}\n                    onChange={changeMapView}\n                >\n                    <option value={BASIC}>Basic</option>\n                    <option value={ELECTION_RESULTS_COUNTY}>County Level Election Results</option>\n                    <option value={COVID}>COVID cases / 100K Residents</option>\n                    <option value={CONGRESS}>Congressional Districts</option>\n                </Select>\n            </FormControl>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport MapViewSelector from \"../component/MapViewSelector\";\nimport {setMapView} from \"../actions/actions\";\n\nconst mapStateToProps = (state) =>{\n    return {\n        mapView: state.dashboard.mapView\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        changeMapView(event) {\n            dispatch(setMapView(event.target.value));\n        },\n    }\n}\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(MapViewSelector);","import React, {Component} from \"react\";\nimport {Box, Button, Container, Link, Typography} from \"@material-ui/core\";\nimport USMapContainer from \"../containers/USMapContainer\";\nimport ReactTooltip from \"react-tooltip\";\nimport Copyright from \"./Copyright\";\nimport MapViewSelector from \"../containers/MapViewSelector\";\n\nclass Main extends Component{\n\n    render(){\n        return(\n            <Container lg={3} height={'100vh'} width={'100%'}>\n                <Box height={'10vh'}>\n                    <Typography variant=\"h3\">US Map</Typography>\n                </Box>\n                <Box height={'5vh'}>\n                    <MapViewSelector />\n                </Box>\n                <Box lg={3} height={'70vh'} width={'100%'}>\n                    <USMapContainer />\n                </Box>\n                <Box height={'10vh'} lg={3}>\n                    <Typography variant=\"caption\" gutterBottom>\n                        Source code: <Link href=\"https://github.com/harryphan/us-district-map\">Github</Link>\n                        <br/>\n                        Data sources: <Link href=\"https://www.cnn.com/election/2020/results/president?iid=politics_election_national_map\">CNN</Link>\n                        &nbsp;\n                        <Link href=\"https://www.politico.com/2020-election/results/\">Politico</Link>\n                        &nbsp;\n                        <Link href=\"https://covid.cdc.gov/covid-data-tracker/#county-view\">\n                           CDC\n                        </Link>\n                    </Typography>\n                </Box>\n                <Box height={'5vh'}>\n                    <Copyright />\n                </Box>\n            </Container>\n        );\n    }\n}\n\nexport default Main;","import {connect} from 'react-redux';\nimport Main from \"../component/Main\";\n\nconst mapStateToProps = state =>{\n  return {\n    tooltip:state.mapParams.tooltip,\n    isLoading:state.votingData.isLoading || state.votingData.isLoadingCounties,\n  };\n}\n\nexport default connect(mapStateToProps)(Main);\n","import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#556cd6',\n        },\n        secondary: {\n            main: '#19857b',\n        },\n        error: {\n            main: red.A400,\n        },\n        background: {\n            default: '#fff',\n        },\n    },\n});\n\nexport default theme;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport configureStore from './configureStore';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Main from './containers/MainContainer';\r\nimport { fetchNationalVotingData} from \"./reducers/votingData\";\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport theme from './theme';\r\nimport {CssBaseline} from \"@material-ui/core\";\r\nimport {fetchCovidData} from \"./reducers/covidData\";\r\n\r\nconst store = configureStore();\r\nstore.dispatch(fetchNationalVotingData);\r\nstore.dispatch(fetchCovidData);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n        <ThemeProvider theme={theme}>\r\n            {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\r\n            <CssBaseline />\r\n            <Main />\r\n        </ThemeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}