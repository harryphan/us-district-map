{"version":3,"sources":["constants/action_constants.js","reducers/boundaries.js","reducers/mapParams.js","reducers/covidData.js","utils/countyLoader.js","reducers/votingData.js","constants/mapview_constants.js","reducers/dashboard.js","reducers/store.js","serviceWorker.js","component/Counties.js","component/CNNVotingDataContext.js","component/AllCounties.js","component/CNNCovidCountiesLayer.js","component/CDCCovidCountiesLayer.js","component/USMap.js","actions/actions.js","configureStore.js","containers/USMapContainer.js","component/Copyright.js","component/MapViewSelector.js","containers/MapViewSelector.js","component/Main.js","containers/MainContainer.js","theme.js","index.js"],"names":["LOAD_STATES","LOAD_COUNTIES","LOAD_COVID","LOAD_US_COVID","SET_ZOOM","SET_CENTER","SET_FOCUSED_STATE_ID","ZOOM","SET_TOOLTIP","SET_MAPVIEW","initialState","states","counties","isLoading","boundaries","state","action","produce","draft","payload","type","center","zoom","focusedStateId","tooltip","mapParams","us","ma","dispatch","getState","a","axios","get","CNNCovid","data","covidData","countyResults","AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY","isLoadingCounties","applyMissingCounties","key","biden","trump","countyLoader","forEach","s","id","races","stateFips","stateAbbr","allStates","find","val","map","countyFips","candidates","candidateID","cs","votes","vote","push","totalVotes","filter","n","includes","st","stateResult","result","stateFipsCode","stateAbbreviation","totalVote","candidate","candidateId","name","fullName","voteNum","votingData","ga","index","findIndex","holder","MapViews","BASIC","ELECTION_RESULTS_COUNTY","COVID","mapView","mapview_constants","dashboard","rootReducer","combineReducers","Boolean","window","location","hostname","match","Counties","countyBoundary","setTooltip","geo","properties","stroke","geography","fill","onMouseEnter","onMouseLeave","style","default","strokeWidth","outline","hover","rsmKey","memo","CNNVotingDataContext","nationalVotingData","this","_nationalVotingData","sorted","sort","b","voteOpScale","scaleLinear","domain","length","range","tmpOpScale","scaleLog","_currentState","_bidenResult","_trumpResult","_total","_voteRatio","c","sortedCounties","voteCountyOpScale","_currentCounty","county","_bidenCountyResult","_trumpCountyResult","_countyTotal","_countyVoteRatio","toLocaleString","d3","copy","opacity","AllCounties","votingDataContext","geographies","usMap","projection","path","stateId","substr","selectCurrentStateById","selectCurrentCountyById","undefined","countyColor","getCountyColor","countyTooltip","getCountyTooltip","CNNCovidCountiesLayer","Component","nextProps","nextState","nextContext","props","usCovidData","property","covidColorScale","scaleSequential","fips","cases","deaths","estimatedPopulation","deathsPer100Cases","casesPer100KResidents","deathsPer100KResidents","USMap","handleStateClick","handleMove","data-tip","border","height","width","onMoveEnd","event","zoomEvent","statesBoundaries","onClick","focused","substring","countyLayer","doZoom","preloadedState","Template","focusChanged","mapViewChanged","connect","gaVotingData","setCenter","setFocusedState","coordinates","invert","centroid","Copyright","Typography","variant","color","align","Date","getFullYear","MapViewSelector","changeMapView","FormControl","Select","native","defaultValue","onChange","value","PureComponent","target","Main","Container","lg","Box","USMapContainer","gutterBottom","Link","href","theme","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.20a5e67c.chunk.js","sourcesContent":["export const LOAD_STATES='LOAD_STATES';\nexport const LOAD_COUNTIES='LOAD_COUNTIES';\nexport const LOAD_COVID='LOAD_COVID';\nexport const LOAD_US_COVID='LOAD_US_COVID';\nexport const SET_ZOOM='SET_ZOOM';\nexport const SET_CENTER='SET_CENTER';\nexport const SET_FOCUSED_STATE_ID='SET_FOCUSED_STATE_ID';\nexport const ZOOM='ZOOM';\nexport const SET_TOOLTIP='SET_TOOLTIP';\nexport const SET_MAPVIEW='SET_MAPVIEW';\n","import produce from 'immer';\nimport {LOAD_STATES,LOAD_COUNTIES} from '../constants/action_constants';\nimport axios from \"axios\";\nlet initialState={\n  states:null,\n  counties:null,\n  isLoading:false\n};\n\nconst boundaries = (state=initialState, action) =>{\n  return produce( state, draft =>{\n    const {payload} = action;\n    switch (action.type) {\n      case LOAD_STATES:\n        draft.states=payload;\n        break;\n      case LOAD_COUNTIES:\n        draft.counties=payload;\n        break;\n      case 'SET_BOUNDARIES_LOADING':\n        draft.isLoading=payload;\n        break;\n      default:\n        return;\n    }\n  })\n}\nexport async function fetchBoundaries(dispatch, getState) {\n  dispatch({ type: 'SET_BOUNDARIES_LOADING', payload: true })\n  const states = await axios.get('states-10m.json')\n  dispatch({ type: LOAD_STATES, payload: states.data })\n  const counties = await axios.get('counties-10m.json')\n  dispatch({ type: LOAD_COUNTIES, payload: counties.data })\n  dispatch({ type: 'SET_BOUNDARIES_LOADING', payload: false })\n}\n\nexport default boundaries;\n","import produce from 'immer';\nimport {SET_CENTER,SET_ZOOM,SET_TOOLTIP,SET_FOCUSED_STATE_ID,ZOOM} from '../constants/action_constants';\nconst initialState={\n  center:[0,0],\n  zoom:1,\n  focusedStateId:0,\n  // center:[-83.43523233606125, 32.63933616159129],\n  // zoom:4,\n  // focusedStateId:13,\n  tooltip:'',\n};\n\nconst mapParams = (state=initialState, action) =>{\n  return produce( state, draft =>{\n    const {payload} = action;\n    switch (action.type) {\n      case SET_CENTER:\n        draft.center=payload;\n        break;\n      case SET_ZOOM:\n        draft.zoom=payload;\n        break;\n      case SET_FOCUSED_STATE_ID:\n        draft.focusedStateId = payload;\n        break;\n      case SET_TOOLTIP:\n        draft.tooltip = payload;\n        break;\n      case ZOOM:\n        return {...payload};\n      default:\n        return;\n    }\n  })\n}\n\nexport default mapParams;\n","import produce from 'immer';\nimport { LOAD_COVID, LOAD_US_COVID} from '../constants/action_constants';\nimport { csvParse } from 'd3-dsv';\nimport axios from 'axios';\nimport nationalCovid from '../data/all-covid.json';\n\nlet initialState={\n  us:[],\n  ma:[],\n  isLoading:false\n};\n\nconst covidData = (state=initialState, action) =>{\n  return produce( state, draft =>{\n    const {payload} = action;\n    switch (action.type) {\n      case LOAD_COVID:\n        draft.ma=payload;\n        break;\n      case LOAD_US_COVID:\n        draft.us=payload;\n        break;\n      case 'SET_COVID_LOADING':\n        draft.isLoading=payload;\n        break;\n      default:\n        return;\n    }\n  })\n}\n\nexport async function fetchCovidData(dispatch, getState) {\n  dispatch({type: 'SET_COVID_LOADING', payload:true});\n  //const nationalCovid = await axios.get('https://covid.cdc.gov/covid-data-tracker/COVIDData/getAjaxData?id=integrated_county_latest_external_data');\n  // const ma = csvParse(maCovid.data);\n  // dispatch({ type: LOAD_COVID, payload: ma })\n  // const usCovid = await axios.get('us-covid.csv');\n  // const us = csvParse(usCovid.data);\n  const CNNCovid = await axios.get('https://ix.cnn.io/data/novel-coronavirus-2019-ncov/us/counties.json');\n  dispatch({ type: LOAD_US_COVID, payload: CNNCovid.data.data });\n  //dispatch({ type: LOAD_US_COVID, payload: nationalCovid.integrated_county_latest_external_data });\n  dispatch({type: 'SET_COVID_LOADING', payload:false});\n}\n\nexport default covidData;\n","import AL from '../data/AL-counties.json';\nimport AK from '../data/AK-counties.json';\nimport AZ from '../data/AZ-counties.json';\nimport AR from '../data/AR-counties.json';\nimport CA from '../data/CA-counties.json';\nimport CO from '../data/CO-counties.json';\nimport CT from '../data/CT-counties.json';\nimport DE from '../data/DE-counties.json';\nimport DC from '../data/DC-counties.json';\nimport FL from '../data/FL-counties.json';\nimport GA from '../data/GA-counties.json';\nimport HI from '../data/HI-counties.json';\nimport ID from '../data/ID-counties.json';\nimport IL from '../data/IL-counties.json';\nimport IN from '../data/IN-counties.json';\nimport IA from '../data/IA-counties.json';\nimport KS from '../data/KS-counties.json';\nimport KY from '../data/KY-counties.json';\nimport LA from '../data/LA-counties.json';\nimport ME from '../data/ME-counties.json';\nimport MD from '../data/MD-counties.json';\nimport MA from '../data/MA-counties.json';\nimport MI from '../data/MI-counties.json';\nimport MN from '../data/MN-counties.json';\nimport MS from '../data/MS-counties.json';\nimport MO from '../data/MO-counties.json';\nimport MT from '../data/MT-counties.json';\nimport NE from '../data/NE-counties.json';\nimport NV from '../data/NV-counties.json';\nimport NH from '../data/NH-counties.json';\nimport NJ from '../data/NJ-counties.json';\nimport NM from '../data/NM-counties.json';\nimport NY from '../data/NY-counties.json';\nimport NC from '../data/NC-counties.json';\nimport ND from '../data/ND-counties.json';\nimport OH from '../data/OH-counties.json';\nimport OK from '../data/OK-counties.json';\nimport OR from '../data/OR-counties.json';\nimport PA from '../data/PA-counties.json';\nimport RI from '../data/RI-counties.json';\nimport SC from '../data/SC-counties.json';\nimport SD from '../data/SD-counties.json';\nimport TN from '../data/TN-counties.json';\nimport TX from '../data/TX-counties.json';\nimport UT from '../data/UT-counties.json';\nimport VT from '../data/VT-counties.json';\nimport VA from '../data/VA-counties.json';\nimport WA from '../data/WA-counties.json';\nimport WV from '../data/WV-counties.json';\nimport WI from '../data/WI-counties.json';\nimport WY from '../data/WY-counties.json';\n\n\nconst countyResults= {AL, AK, AZ, AR, CA, CO, CT, DE, DC, FL, GA, HI, ID, IL, IN, IA, KS, KY, LA, ME, MD, MA, MI, MN, MS, MO, MT, NE, NV, NH, NJ, NM, NY, NC, ND, OH, OK, OR, PA, RI, SC, SD, TN, TX, UT, VT, VA, WA, WV, WI, WY};\nexport default countyResults;\n","import produce from 'immer';\nimport axios from 'axios';\nimport xml2js from 'xml2js';\nimport allStates from '../data/allstates.json';\nimport countyLoader from '../utils/countyLoader';\n\nlet initialState={\n    us:[],\n    isLoadingCounties:false,\n    isLoading:false,\n};\n\nconst votingData = (state=initialState, action) =>{\n    return produce( state, draft =>{\n        const {payload} = action;\n        switch (action.type) {\n            case 'SET_GA_DATA':\n                draft.ga=payload;\n                break;\n            case 'SET_STATE_LEVEL_RESULTS':\n                let index = draft.us.findIndex( s => s.state === payload.state);\n                if (index >= 0){\n                    draft.us[index] = payload;\n                }else{\n                    draft.us.push(payload);\n                }\n                break;\n            case 'SET_COUNTY_VOTING_DATA':\n                let holder = draft.us.find( s => s.state === payload.stateAbbr);\n                if(holder){\n                    holder.counties = payload.counties;\n                }\n                break;\n            case 'SET_VOTING_LOADING':\n                draft.isLoading=payload;\n                break;\n            case 'SET_COUNTIES_VOTING_LOADING':\n                draft.isLoadingCounties=payload;\n                break;\n            default:\n                return;\n        }\n    })\n}\n\nexport async function applyMissingCounties(dispatch,getState){\n    dispatch({type: 'SET_COUNTIES_VOTING_LOADING', payload:true});\n    const key={\n        AK:{biden:'7073',trump:'6638'},\n        ME:{biden:'30791',trump:'29633'},\n        NH:{biden:'49452',trump:'49453'},\n        VT:{biden:'53668',trump:'53669'},\n        MA:{biden:'35087',trump:'35088'},\n        CT:{biden:'21813',trump:'21816'},\n        RI:{biden:'46718',trump:'46719'},\n    };\n    const newEngland=[countyLoader.ME,countyLoader.NH,countyLoader.VT,countyLoader.MA,countyLoader.CT,countyLoader.RI];\n    newEngland.forEach( s =>{\n        const id = s.races[0].stateFips;\n        const stateAbbr= allStates.find(s => s.val === id).id;\n        let counties=[]\n        s.races.map(({countyFips,candidates})=>{\n            const biden= candidates.find(({candidateID}) => candidateID === key[stateAbbr].biden);\n            const trump = candidates.find(({candidateID}) => candidateID === key[stateAbbr].trump);\n            const cs=[{id:1036,votes:biden.vote},{id:8639,votes:trump.vote}];\n            counties.push({id: countyFips, totalVotes:biden.vote+trump.vote,candidates:cs});\n        });\n        dispatch({type: 'SET_COUNTY_VOTING_DATA',payload:{stateAbbr,counties:counties}});\n    });\n    const filtered=allStates.filter(n => !['ME','VT','NH','MA','CT','RI'].includes(n.id))\n    filtered.forEach( st =>{\n        dispatch({type: 'SET_COUNTY_VOTING_DATA',payload:{stateAbbr:st.id,counties:countyLoader[st.id]}});\n    });\n    dispatch({type: 'SET_COUNTIES_VOTING_LOADING', payload:false});\n}\nexport async function fetchNationalVotingData(dispatch,getState){\n    dispatch({type: 'SET_VOTING_LOADING', payload:true});\n    const nationalResults = await axios.get('https://politics-elex-results.data.api.cnn.io/results/view/2020-national-races-PG.json');\n    nationalResults.data.forEach( stateResult =>{\n        const result = { id: stateResult.stateFipsCode,state:stateResult.stateAbbreviation,totalVotes:stateResult.totalVote,candidates:stateResult.candidates.map( candidate => {return {id: candidate.candidateId,name: candidate.fullName, votes: candidate.voteNum}})}\n        let counties=[];\n\n        dispatch({type: 'SET_STATE_LEVEL_RESULTS',payload: result});\n    });\n    dispatch(applyMissingCounties);\n    dispatch({type: 'SET_VOTING_LOADING', payload:false});\n}\n\nexport function fetchStateVotingData(stateAbbr){\n    return async function fetchStateVotingDataThunk(dispatch, getState) {\n        dispatch({type: 'SET_COUNTIES_VOTING_LOADING', payload:true});\n        const url = `https://politics-elex-results.data.api.cnn.io/results/view/2020-county-races-PG-${stateAbbr}.json`\n        const counties = await axios.get(url);\n        const results= counties.data.map(county => {\n            const totalVotes=county.candidates.reduce((acc,current) => current.voteNum + acc,0);\n            return {name:county.countyName,id:county.countyFipsCode,totalVotes:totalVotes,candidates:county.candidates.map( candidate => {return {id: candidate.candidateId,name: candidate.fullName, votes: candidate.voteNum}})}\n        })\n        dispatch({type: 'SET_COUNTY_VOTING_DATA',payload:{stateAbbr,counties:results}});\n        dispatch({type: 'SET_COUNTIES_VOTING_LOADING', payload:false});\n    }\n}\nexport async function fetchAllVotingData(dispatch,getState){\n    dispatch({type: 'SET_COUNTIES_VOTING_LOADING', payload:true});\n    const stuff=['ME','NH','VT','MA','CT','RI'];\n    const filtered=allStates.filter(n => !stuff.includes(n.id))\n    for(const st of filtered){\n        const url = `https://politics-elex-results.data.api.cnn.io/results/view/2020-county-races-PG-${st.id}.json`\n        const counties = await axios.get(url);\n        const results= counties.data.map(county => {\n            const totalVotes=county.candidates.reduce((acc,current) => current.voteNum + acc,0);\n            return {name:county.countyName,id:county.countyFipsCode,totalVotes:totalVotes,candidates:county.candidates.map( candidate => {return {id: candidate.candidateId,name: candidate.fullName, votes: candidate.voteNum}})}\n        })\n        dispatch({type: 'SET_COUNTY_VOTING_DATA',payload:{stateAbbr:st.id,counties:results}});\n    }\n    dispatch({type: 'SET_COUNTIES_VOTING_LOADING', payload:false});\n}\n\nexport async function fetchGAVotingData(dispatch, getState) {\n    dispatch({type: 'SET_VOTING_LOADING', payload:true});\n    const gaVoting = await axios.get('ga-detail.xml');\n    let parser = new xml2js.Parser()\n    let result = await parser.parseStringPromise(gaVoting.data);\n    const votes = result.ElectionResult.Contest.find((contest)=> contest.$.key==='5000').Choice;\n    const trump = votes.find( c => c.$.key === '1');\n    const biden = votes.find( c => c.$.key === '2');\n    const jorgensen = votes.find( c => c.$.key === '3');\n    const reducer = (accumulator, currentValue, candidate) => {\n        currentValue.County.forEach(county => {\n            const name = county.$.name;\n            let match = accumulator.find( c => c.name === name);\n            if(match === undefined){\n                let tmp={name};\n                tmp[candidate] = +county.$.votes;\n                accumulator.push(tmp);\n            }else{\n                if (match[candidate]) {\n                    match[candidate] += +county.$.votes;\n                }else{\n                    match[candidate] = +county.$.votes;\n                }\n            }\n        })\n        return accumulator;\n    };\n    let counties = trump.VoteType.reduce(\n        (accumulator, currentValue) => reducer(accumulator,currentValue,'trump')\n        ,[]\n        );\n    counties = biden.VoteType.reduce(\n        (accumulator, currentValue) => reducer(accumulator,currentValue,'biden')\n        ,counties\n    );\n    counties = jorgensen.VoteType.reduce(\n        (accumulator, currentValue) =>  reducer(accumulator,currentValue,'jorgensen')\n        ,counties\n    );\n    let res={\n        total: +trump.$.totalVotes + +biden.$.totalVotes + +jorgensen.$.totalVotes,\n        trumpTotal: +trump.$.totalVotes,\n        bidenTotal: +biden.$.totalVotes,\n        jorgensenTotal: +jorgensen.$.totalVotes,\n        counties\n    }\n    dispatch({type: 'SET_GA_DATA',payload:res});\n    dispatch({type: 'SET_VOTING_LOADING', payload:false});\n}\n\nexport default votingData;","\nconst MapViews={\n    BASIC:'BASIC',\n    ELECTION_RESULTS_COUNTY:'ELECTION_RESULTS_COUNTY',\n    COVID:'COVID',\n}\nexport default MapViews;","import produce from 'immer';\nimport mapview_constants from '../constants/mapview_constants';\nimport {SET_MAPVIEW} from '../constants/action_constants';\n\nconst initialState={\n    mapView:mapview_constants.ELECTION_RESULTS_COUNTY,\n};\n\nconst dashboard = (state=initialState, action) =>{\n    return produce( state, draft =>{\n        const {payload} = action;\n        switch (action.type) {\n            case SET_MAPVIEW:\n                draft.mapView=payload;\n                break;\n            default:\n                return;\n        }\n    })\n}\n\nexport default dashboard;","import boundaries from './boundaries';\nimport mapParams from './mapParams';\nimport covidData from './covidData';\nimport {combineReducers} from 'redux';\nimport votingData from './votingData';\nimport dashboard from \"./dashboard\";\n\nconst rootReducer = combineReducers({\n  boundaries,\n  mapParams,\n  covidData,\n  votingData,\n  dashboard,\n})\nexport default rootReducer;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, {memo} from 'react';\nimport { Geography} from \"react-simple-maps\";\n\nconst Counties = ({countyBoundary, setTooltip}) => {\n    const tooltip = (name) =>( <div>County: {name}</div>);\n    return (\n        <>\n            {\n                countyBoundary.map(geo => {\n                    const {name} = geo.properties;\n                    return (\n                        <Geography\n                            key={geo.rsmKey}\n                            stroke=\"#000\"\n                            geography={geo}\n                            fill={\"#DDD\"}\n                            onMouseEnter={() => {\n                                setTooltip(tooltip(name));\n                            }}\n                            onMouseLeave={() => {\n                                setTooltip('');\n                            }}\n                            style={{\n                                default: {\n                                    stroke: \"#FFFFFF\",\n                                    strokeWidth: 0.1,\n                                    outline: \"none\",\n                                },\n                                hover: {\n                                    fill: \"#CFD8DC\",\n                                    stroke: \"#607D8B\",\n                                    strokeWidth: 0.2,\n                                    outline: \"none\",\n                                },\n                            }}\n                        />\n                    )\n                })\n            }\n        </>\n    )\n\n}\nexport default memo(Counties);\n","import React from 'react';\nimport * as d3 from 'd3';\nimport { scaleLinear,scaleLog,scaleRadial } from 'd3-scale';\n\nexport default class CNNVotingDataContext {\n    constructor(nationalVotingData) {\n        this._nationalVotingData = nationalVotingData;\n        let sorted=[...nationalVotingData].sort( (a,b) => a.totalVotes - b.totalVotes);\n        this.voteOpScale = scaleLinear().domain([sorted[0].totalVotes,sorted[sorted.length-2].totalVotes]).range([0,1]);\n        this.tmpOpScale = scaleLog().domain([10000,4000000]).range([0,1]);\n        this._currentState={};\n        this._bidenResult ={};\n        this._trumpResult={}\n        this._total={};\n        this._voteRatio={};\n    }\n    selectCurrentStateById(id){\n        this._currentState=this._nationalVotingData.find( s => s.id === id);\n        if(!this._currentState){\n            return undefined;\n        }\n        this._bidenResult = this._currentState? this._currentState.candidates.find( c => c.id === 1036  ): {};\n        this._trumpResult = this._currentState? this._currentState.candidates.find( c => c.id !== 1036  ): {};\n        this._total =this._bidenResult.votes+this._trumpResult.votes\n        this._voteRatio = this._bidenResult.id ? this._bidenResult.votes/this._total :0;\n        if (this._currentState && this._currentState.counties) {\n            let sortedCounties = [...this._currentState.counties].sort((a, b) => a.totalVotes - b.totalVotes);\n            this.voteCountyOpScale = scaleLinear().domain([sortedCounties[0].totalVotes, sortedCounties[sortedCounties.length - 1].totalVotes]).range([0, 1]);\n        }\n        return this._currentState;\n    }\n    selectCurrentCountyById(id){\n        if(!this._currentState.counties){\n            return undefined;\n        }\n        this._currentCounty=this._currentState.counties.find( county => county.id === id);\n        this._bidenCountyResult = this._currentCounty ?this._currentCounty.candidates.find( c => c.id === 1036  ): {}\n        this._trumpCountyResult = this._currentCounty? this._currentCounty.candidates.find( c => c.id !== 1036  ): {};\n        this._countyTotal =this._bidenCountyResult.votes+this._trumpCountyResult.votes\n        this._countyVoteRatio = this._bidenCountyResult.id ? this._bidenCountyResult.votes/this._countyTotal :0;\n        return this._currentCounty;\n    }\n    getTooltip(name){\n        return this._currentState?(<div>\n            <div>{name}</div>\n            <div>Total votes: {this._currentState.totalVotes}</div>\n            <div>Biden: {this._bidenResult.votes}</div>\n            <div>Trump: {this._trumpResult.votes}</div>\n        </div>):null;\n    }\n    getCountyTooltip(name){\n        return this._currentCounty?(\n            <>\n                <div>County: {name}</div>\n                <div>Total Votes: {this._currentCounty.totalVotes.toLocaleString()}</div>\n                <div>Joe Biden: {this._bidenCountyResult.votes.toLocaleString()}</div>\n                <div>Donald Trump: {this._trumpCountyResult.votes.toLocaleString()}</div>\n            </>\n        ):null;\n    }\n    getCountyColor(){\n        const countyColor= this._currentCounty ? d3.color(this._countyVoteRatio>=.5? '#00F':'#F00').copy({opacity:this.tmpOpScale(this._countyTotal)}):\"#DDD\";\n        return countyColor;\n    }\n    getStateColor(id,focusedStateId){\n        const stateColor=this._currentState && focusedStateId !==id ? d3.color(this._voteRatio>=.5? '#00F':'#F00').copy({opacity:this.voteOpScale(this._total)}) :\"#DDD\";\n        return stateColor;\n    }\n}","import {Geographies, Geography} from 'react-simple-maps';\nimport React, {memo} from 'react';\n\nconst AllCounties = ({counties,setTooltip,votingDataContext}) =>{\n    return(\n        <Geographies geography={counties}>\n            {({ geographies,projection,path }) =>{\n                const usMap=geographies.map(geo => {\n                    const stateId=geo.id.substr(0,2);\n                    let stat = votingDataContext.selectCurrentStateById(stateId);\n                    let county = stat ? votingDataContext.selectCurrentCountyById(geo.id):undefined;\n                    const countyColor = county ? votingDataContext.getCountyColor(geo.id):'#FFF';\n                    const countyTooltip = county ? votingDataContext.getCountyTooltip(geo.properties.name):<div>{geo.properties.name + ' '+geo.id }</div>;\n                    return (\n                        <Geography\n                            key={geo.rsmKey}\n                            stroke=\"#000\"\n                            geography={geo}\n                            fill={countyColor}\n                            onMouseEnter={() => {\n                                setTooltip(countyTooltip);\n                            }}\n                            onMouseLeave={() => {\n                                setTooltip('');\n                            }}\n                            style={{\n                                default: {\n                                    stroke: \"#000\",\n                                    strokeWidth: 0.01,\n                                    outline: \"none\",\n                                },\n                                hover: {\n                                    fill: \"#CFD8DC\",\n                                    stroke: \"#607D8B\",\n                                    strokeWidth: .25,\n                                    outline: \"none\",\n                                },\n                            }}\n                        />)\n                });\n                return <>\n                    {usMap}\n                </>\n            }\n            }\n        </Geographies>\n    );\n}\n\nexport default memo(AllCounties);","import React, {Component, memo} from 'react';\nimport {Geographies, Geography} from 'react-simple-maps';\nimport { scaleLinear,scaleLog,scaleRadial,scaleQuantile,scaleSequential } from 'd3-scale';\nimport * as d3 from 'd3';\nclass CNNCovidCountiesLayer extends Component{\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        return false;\n    }\n    render(){\n        const {counties,usCovidData, setTooltip} = this.props;\n        const property='casesPer100KResidents';\n        const sorted = [...usCovidData].sort((a,b) => a[property] - b[property]);\n        const covidColorScale = scaleSequential(d3.interpolateYlOrRd).domain([sorted[0][property],sorted[sorted.length-1][property]]);\n\n        return (\n            <Geographies geography={counties}>\n                {({ geographies,projection,path }) =>{\n                    const usMap=geographies.map(geo => {\n                        const county =  usCovidData.find( c => c.fips === geo.id );\n                        const countyColor = county?covidColorScale(county[property]):'#FFF';\n                        const countyTooltip = county?<div>\n                            <div>{geo.properties.name}</div>\n                            <div>Cases: {county.cases}</div>\n                            <div>Deaths: {county.deaths}</div>\n                            <div>Est. Pop: {county.estimatedPopulation}</div>\n                            <div>Deaths/100 cases: {county.deathsPer100Cases}</div>\n                            <div>Cases/100K pp: {county.casesPer100KResidents}</div>\n                            <div>Deaths/100K pp: {county.deathsPer100KResidents}</div>\n                        </div>:<div/>;\n                        return (\n                            <Geography\n                                key={geo.rsmKey}\n                                stroke=\"#000\"\n                                geography={geo}\n                                fill={countyColor}\n                                onMouseEnter={() => {\n                                    setTooltip(countyTooltip);\n                                }}\n                                onMouseLeave={() => {\n                                    setTooltip('');\n                                }}\n                                style={{\n                                    default: {\n                                        stroke: \"#000\",\n                                        strokeWidth: 0.1,\n                                        outline: \"none\",\n                                    },\n                                    hover: {\n                                        fill: \"#CFD8DC\",\n                                        stroke: \"#607D8B\",\n                                        strokeWidth: .25,\n                                        outline: \"none\",\n                                    },\n                                }}\n                            />)\n                    });\n                    return <>\n                        {usMap}\n                    </>\n                }\n                }\n            </Geographies>\n        )\n    }\n}\nexport default CNNCovidCountiesLayer;\n","import React, {Component, memo} from 'react';\nimport {Geographies, Geography} from 'react-simple-maps';\nimport { scaleLinear,scaleLog,scaleRadial,scaleQuantile,scaleSequential } from 'd3-scale';\n\nclass CDCCovidCountiesLayer extends Component{\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        return false;\n    }\n    render(){\n        const {counties,usCovidData, setTooltip} = this.props;\n        const property='percent_test_results_reported_positive_last_7_days';\n        const sorted = [...usCovidData].sort((a,b) => a[property] - b[property]);\n        const covidColorScale = scaleSequential().domain([0,100]).range(['white','red']);\n\n        return (\n            <Geographies geography={counties}>\n                {({ geographies,projection,path }) =>{\n                    const usMap=geographies.map(geo => {\n                        const county =  usCovidData.find( c => c.fips_code === +geo.id );\n                        const countyColor = county?covidColorScale(county[property]):'#FFF';\n                        const countyTooltip = county?<div>{geo.properties.name + ' '+county[property] }</div>:<div/>;\n                        return (\n                            <Geography\n                                key={geo.rsmKey}\n                                stroke=\"#000\"\n                                geography={geo}\n                                fill={countyColor}\n                                onMouseEnter={() => {\n                                    setTooltip(countyTooltip);\n                                }}\n                                onMouseLeave={() => {\n                                    setTooltip('');\n                                }}\n                                style={{\n                                    default: {\n                                        stroke: \"#000\",\n                                        strokeWidth: 0.01,\n                                        outline: \"none\",\n                                    },\n                                    hover: {\n                                        fill: \"#CFD8DC\",\n                                        stroke: \"#607D8B\",\n                                        strokeWidth: .25,\n                                        outline: \"none\",\n                                    },\n                                }}\n                            />)\n                    });\n                    return <>\n                        {usMap}\n                    </>\n                }\n                }\n            </Geographies>\n        )\n    }\n}\nexport default CDCCovidCountiesLayer;\n","import React,{memo} from 'react';\nimport {ComposableMap, Geographies, Geography, Marker, ZoomableGroup} from 'react-simple-maps';\nimport Counties from './Counties';\nimport statesBoundaries from '../data/states-10m.json';\nimport VotingLayer from './VotingLayer';\nimport Labels from './Labels';\nimport counties from '../data/counties-10m.json';\nimport CNNVotingDataContext from './CNNVotingDataContext';\nimport Cities from \"./Cities\";\nimport cities from \"../data/cities.json\";\nimport AllCounties from \"./AllCounties\";\nimport mapview_constants from \"../constants/mapview_constants\";\nimport CovidCountiesLayer from \"./CDCCovidCountiesLayer\";\nimport CNNCovidCountiesLayer from \"./CNNCovidCountiesLayer\";\n\n\nconst {BASIC,ELECTION_RESULTS_COUNTY,COVID} = mapview_constants;\n\nconst USMap = ({center,usCovidData,mapView,zoom,handleStateClick,handleMove,isLoadingCounties,nationalVotingData,focusedStateId,setTooltip}) =>{\n    const votingDataContext= new CNNVotingDataContext(nationalVotingData);\n  return (\n      <ComposableMap  data-tip='' projection=\"geoAlbersUsa\"  style={{border:'1px black solid',height:'100%', width:'100%'}}>\n        <ZoomableGroup center={center} zoom={zoom} onMoveEnd={(event,zoomEvent)=>handleMove(event,focusedStateId)}>\n          <Geographies geography={statesBoundaries}>\n            {({ geographies,projection,path }) =>{\n              const usMap=geographies.map(geo => {\n                return (\n                    <Geography\n                        key={geo.rsmKey}\n                        stroke=\"#000\"\n                        geography={geo}\n                        fill={\"#FFF\"}\n                        onMouseEnter={() => {\n                          setTooltip(<div>{geo.properties.name}</div>);\n                        }}\n                        onMouseLeave={() => {\n                          setTooltip('');\n                        }}\n                        onClick={() => handleStateClick(geo,projection,path)}\n                        style={{\n                          default: {\n                            stroke: \"#000\",\n                            strokeWidth: 0.2,\n                            outline: \"none\",\n                          },\n                          hover: {\n                            fill: \"#CFD8DC\",\n                            stroke: \"#607D8B\",\n                            strokeWidth: 1 / zoom,\n                            outline: \"none\",\n                          },\n                        }}\n                    />)\n              });\n              return <>\n                {usMap}\n              </>\n            }\n          }\n          </Geographies>\n            {mapView === COVID? <CNNCovidCountiesLayer counties={counties} setTooltip={setTooltip} usCovidData={usCovidData}/>:null}\n            {mapView === ELECTION_RESULTS_COUNTY?<AllCounties counties={counties} setTooltip={setTooltip} votingDataContext={votingDataContext}/>:null}\n          {/*<VotingLayer votingDataContext={votingDataContext} focusedStateId={focusedStateId} setTooltip={setTooltip} handleStateClick={handleStateClick} zoom={zoom}/>*/}\n          {/*<Labels />*/}\n            { mapView === BASIC && +focusedStateId > 0 && !isLoadingCounties ?\n              <Geographies geography={counties}>\n                  {\n                      ({geographies, projection, path}) => {\n                          votingDataContext.selectCurrentStateById(focusedStateId);\n                          const focused = geographies.filter(geo => {\n                              return geo.id.substring(0, 2) === focusedStateId\n                          });\n                          const countyLayer = <Counties countyBoundary={focused} setTooltip={setTooltip}/>;\n                          // const votingCountyLayer=<VotingCountiesLayer countyBoundary={focused} votingDataContext={votingDataContext} setTooltip={setTooltip}/>;\n                          return (\n                              <>\n                                  {countyLayer}\n                                  {/*{votingCountyLayer}*/}\n                              </>\n                          );\n                      }\n                  }\n              </Geographies>\n            : null\n          }\n          {/*<Cities zoom={zoom} />*/}\n        </ZoomableGroup>\n      </ComposableMap>\n  );\n}\n\nexport default memo(USMap);\n","import {\n  SET_ZOOM,\n  SET_TOOLTIP,\n  SET_CENTER,\n  SET_FOCUSED_STATE_ID,\n  ZOOM,\n  SET_MAPVIEW\n} from '../constants/action_constants';\n\nexport function setZoom(zoom){\n  return {type: SET_ZOOM, payload:zoom}\n}\nexport function setCenter(center){\n  return {type: SET_CENTER, payload:center}\n}\nexport function setFocusedState(id){\n  return {type: SET_FOCUSED_STATE_ID, payload:id}\n}\nexport function doZoom(payload){\n  return {type: ZOOM, payload}\n}\nexport function setTooltip(payload){\n  return {type: SET_TOOLTIP, payload}\n}\n\nexport function setMapView(mapView){\n  return {type: SET_MAPVIEW, payload:mapView}\n}","import {applyMiddleware,createStore} from 'redux';\nimport rootReducer from './reducers/store';\nimport thunkMiddleware from 'redux-thunk';\n\nexport default function configureStore(preloadedState){\n\n  return createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(thunkMiddleware)\n  );\n}\n","import React,{Component} from \"react\";\nimport USMap from '../component/USMap';\nimport {connect} from 'react-redux';\nimport {setCenter,setZoom,setFocusedState,doZoom,setTooltip} from '../actions/actions';\nimport {fetchStateVotingData} from \"../reducers/votingData\";\n\n\nclass Template extends Component{\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    const focusChanged = this.props.focusedStateId !== nextProps.focusedStateId;\n    const mapViewChanged = this.props.mapView !== nextProps.mapView;\n    return focusChanged || mapViewChanged;\n  }\n\n  render(){\n    return(\n      <USMap {...this.props} />\n    )\n  }\n}\n\nconst mapStateToProps = state =>{\n  const {zoom,center,focusedStateId} = state.mapParams;\n  return {\n    zoom,\n    center,\n    focusedStateId,\n    isLoadingCounties: state.votingData.isLoadingCounties,\n    gaVotingData: state.votingData.ga,\n    usCovidData: state.covidData.us,\n    covidData: state.covidData.ma,\n    nationalVotingData : state.votingData.us,\n    mapView: state.dashboard.mapView,\n  };\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n  return {\n    setCenter:(center)=>{\n      dispatch(setCenter(center));\n    },\n    setFocusedState:(id)=>{\n      dispatch(setFocusedState(id));\n    },\n    setTooltip(payload){\n      dispatch(setTooltip(payload));\n    },\n    handleMove(event,focusedStateId){\n      const {zoom,coordinates} = event;\n      dispatch(doZoom({center:coordinates,zoom,focusedStateId : zoom < 4 ? '0' : focusedStateId}));\n    },\n    handleStateClick(geo,projection,path,stateAbbr,zoom){\n      const center = projection.invert(path.centroid(geo));\n      //dispatch(fetchStateVotingData(stateAbbr));\n      dispatch(doZoom({center,zoom:zoom>4?zoom:4,focusedStateId:geo.id}));\n    }\n  };\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Template);\n","import {Link, Typography} from '@material-ui/core';\nimport React from 'react';\n\n\nconst Copyright = () => {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {`Copyright © Harry Phan ${new Date().getFullYear()} `}\n        </Typography>\n    );\n}\n\nexport default Copyright;","import {PureComponent} from \"react\";\nimport {FormControl, InputLabel, Select} from \"@material-ui/core\";\nimport mapview_constants from '../constants/mapview_constants';\nconst {BASIC,ELECTION_RESULTS_COUNTY,COVID} = mapview_constants;\n\nexport default class MapViewSelector extends PureComponent{\n    render(){\n        const {changeMapView,mapView} = this.props;\n        return(\n            <FormControl >\n                <Select\n                    native\n                    defaultValue={mapView}\n                    onChange={changeMapView}\n                >\n                    <option value={BASIC}>Basic</option>\n                    <option value={ELECTION_RESULTS_COUNTY}>County Level Election Results</option>\n                    <option value={COVID}>COVID cases / 100K Residents</option>\n                </Select>\n            </FormControl>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport MapViewSelector from \"../component/MapViewSelector\";\nimport {setMapView} from \"../actions/actions\";\n\nconst mapStateToProps = (state) =>{\n    return {\n        mapView: state.dashboard.mapView\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        changeMapView(event) {\n            dispatch(setMapView(event.target.value));\n        },\n    }\n}\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(MapViewSelector);","import React, {Component, PureComponent} from \"react\";\nimport {Box, Button, Container, Link, Typography} from \"@material-ui/core\";\nimport USMapContainer from \"../containers/USMapContainer\";\nimport ReactTooltip from \"react-tooltip\";\nimport Copyright from \"./Copyright\";\nimport MapViewSelector from \"../containers/MapViewSelector\";\n\nclass Main extends PureComponent{\n    render(){\n        const {tooltip,isLoading}=this.props;\n\n        if(isLoading){\n            return 'Loading';\n        }\n\n        return(\n            <Container lg={3} height={'100vh'} width={'100%'}>\n                <Box height={'10vh'}>\n                    <Typography variant=\"h3\">US Map</Typography>\n                </Box>\n                <Box height={'5vh'}>\n                    <MapViewSelector />\n                </Box>\n                <Box lg={3} height={'70vh'} width={'100%'}>\n                    <USMapContainer />\n                    <ReactTooltip>{tooltip}</ReactTooltip>\n                </Box>\n                <Box height={'10vh'} lg={3}>\n                    <Typography variant=\"caption\" gutterBottom>\n                        Source code: <Link href=\"https://github.com/harryphan/us-district-map\">Github</Link>\n                        <br/>\n                        Data sources: <Link href=\"https://www.cnn.com/election/2020/results/president?iid=politics_election_national_map\">CNN</Link>\n                        &nbsp;\n                        <Link href=\"https://www.politico.com/2020-election/results/\">Politico</Link>\n                        &nbsp;\n                        <Link href=\"https://covid.cdc.gov/covid-data-tracker/#county-view\">\n                           CDC\n                        </Link>\n                    </Typography>\n                </Box>\n                <Box height={'5vh'}>\n                    <Copyright />\n                </Box>\n            </Container>\n        );\n    }\n}\n\nexport default Main;","import {connect} from 'react-redux';\nimport Main from \"../component/Main\";\n\nconst mapStateToProps = state =>{\n  return {\n    tooltip:state.mapParams.tooltip,\n    isLoading:state.votingData.isLoading || state.votingData.isLoadingCounties,\n  };\n}\n\nexport default connect(mapStateToProps)(Main);\n","import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#556cd6',\n        },\n        secondary: {\n            main: '#19857b',\n        },\n        error: {\n            main: red.A400,\n        },\n        background: {\n            default: '#fff',\n        },\n    },\n});\n\nexport default theme;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport configureStore from './configureStore';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Main from './containers/MainContainer';\r\nimport { fetchNationalVotingData} from \"./reducers/votingData\";\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport theme from './theme';\r\nimport {CssBaseline} from \"@material-ui/core\";\r\nimport {fetchCovidData} from \"./reducers/covidData\";\r\n\r\nconst store = configureStore();\r\nstore.dispatch(fetchNationalVotingData);\r\nstore.dispatch(fetchCovidData);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n        <ThemeProvider theme={theme}>\r\n            {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\r\n            <CssBaseline />\r\n            <Main />\r\n        </ThemeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}