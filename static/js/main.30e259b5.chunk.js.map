{"version":3,"sources":["constants/action_constants.js","reducers/boundaries.js","reducers/mapParams.js","reducers/covidData.js","utils/countyLoader.js","component/CNNVotingDataContext.js","reducers/votingData.js","constants/mapview_constants.js","reducers/dashboard.js","reducers/store.js","serviceWorker.js","component/BasicMapLayer.js","component/CNNCovidCountiesLayer.js","actions/actions.js","containers/CNNCovidCountiesContainer.js","configureStore.js","containers/FocusedStateCountiesContainer.js","component/AllCounties.js","containers/ElectionResultsCounties.js","component/Layers.js","component/USMap.js","containers/USMapContainer.js","component/Copyright.js","component/MapViewSelector.js","containers/MapViewSelector.js","component/Main.js","containers/MainContainer.js","theme.js","index.js"],"names":["LOAD_STATES","LOAD_COUNTIES","LOAD_COVID","LOAD_US_COVID","SET_ZOOM","SET_CENTER","SET_FOCUSED_STATE_ID","ZOOM","SET_TOOLTIP","SET_MAPVIEW","initialState","states","counties","isLoading","boundaries","state","action","produce","draft","payload","type","center","zoom","focusedStateId","tooltip","mapParams","us","ma","dispatch","getState","a","axios","get","CNNCovid","data","covidData","countyResults","AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY","CNNVotingDataContext","nationalVotingData","this","_nationalVotingData","sorted","sort","b","totalVotes","voteOpScale","scaleLinear","domain","length","range","tmpOpScale","scaleLog","_currentState","_bidenResult","_trumpResult","_total","_voteRatio","id","find","s","candidates","c","votes","sortedCounties","voteCountyOpScale","_currentCounty","county","_bidenCountyResult","_trumpCountyResult","_countyTotal","_countyVoteRatio","name","toLocaleString","d3","copy","opacity","dataContext","isLoadingCounties","applyMissingCounties","key","biden","trump","countyLoader","forEach","races","stateFips","stateAbbr","allStates","val","map","countyFips","candidateID","cs","vote","push","filter","n","includes","st","stateResult","result","stateFipsCode","stateAbbreviation","totalVote","candidate","candidateId","fullName","voteNum","votingData","ga","index","findIndex","holder","MapViews","BASIC","ELECTION_RESULTS_COUNTY","COVID","mapView","mapview_constants","dashboard","rootReducer","combineReducers","Boolean","window","location","hostname","match","BasicMapLayer","setTooltip","handleStateClick","geography","statesBoundaries","geographies","projection","path","geo","stroke","fill","onMouseEnter","properties","onMouseLeave","onClick","style","default","strokeWidth","outline","hover","rsmKey","memo","CNNCovidCountiesLayer","nextProps","nextState","nextContext","props","usCovidData","property","covidColorScale","fips","countyColor","countyTooltip","cases","deaths","estimatedPopulation","deathsPer100Cases","casesPer100KResidents","deathsPer100KResidents","Component","doZoom","preloadedState","connect","ownProps","StateCounties","PureComponent","AllCounties","votingDataContext","stateId","substr","selectCurrentStateById","selectCurrentCountyById","undefined","getCountyColor","getCountyTooltip","Layers","parseGeographies","geos","substring","CNNCovidCountiesContainer","ElectionResultsCounties","FocusedStateCountiesContainer","USMap","mapViewChange","focusStateChannge","handleMove","data-tip","border","height","width","onMoveEnd","event","zoomEvent","Template","focusChanged","mapViewChanged","isLoadingChanged","tooltipChanged","Typography","gaVotingData","setCenter","setFocusedState","coordinates","invert","centroid","Copyright","variant","color","align","Date","getFullYear","MapViewSelector","changeMapView","FormControl","Select","native","defaultValue","onChange","value","target","Main","Container","lg","Box","USMapContainer","gutterBottom","Link","href","theme","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.30e259b5.chunk.js","sourcesContent":["export const LOAD_STATES='LOAD_STATES';\nexport const LOAD_COUNTIES='LOAD_COUNTIES';\nexport const LOAD_COVID='LOAD_COVID';\nexport const LOAD_US_COVID='LOAD_US_COVID';\nexport const SET_ZOOM='SET_ZOOM';\nexport const SET_CENTER='SET_CENTER';\nexport const SET_FOCUSED_STATE_ID='SET_FOCUSED_STATE_ID';\nexport const ZOOM='ZOOM';\nexport const SET_TOOLTIP='SET_TOOLTIP';\nexport const SET_MAPVIEW='SET_MAPVIEW';\n","import produce from 'immer';\nimport {LOAD_STATES,LOAD_COUNTIES} from '../constants/action_constants';\nimport axios from \"axios\";\nlet initialState={\n  states:null,\n  counties:null,\n  isLoading:false\n};\n\nconst boundaries = (state=initialState, action) =>{\n  return produce( state, draft =>{\n    const {payload} = action;\n    switch (action.type) {\n      case LOAD_STATES:\n        draft.states=payload;\n        break;\n      case LOAD_COUNTIES:\n        draft.counties=payload;\n        break;\n      case 'SET_BOUNDARIES_LOADING':\n        draft.isLoading=payload;\n        break;\n      default:\n        return;\n    }\n  })\n}\nexport async function fetchBoundaries(dispatch, getState) {\n  dispatch({ type: 'SET_BOUNDARIES_LOADING', payload: true })\n  const states = await axios.get('states-10m.json')\n  dispatch({ type: LOAD_STATES, payload: states.data })\n  const counties = await axios.get('counties-10m.json')\n  dispatch({ type: LOAD_COUNTIES, payload: counties.data })\n  dispatch({ type: 'SET_BOUNDARIES_LOADING', payload: false })\n}\n\nexport default boundaries;\n","import produce from 'immer';\nimport {SET_CENTER,SET_ZOOM,SET_TOOLTIP,SET_FOCUSED_STATE_ID,ZOOM} from '../constants/action_constants';\nconst initialState={\n  center:[0,0],\n  zoom:1,\n  focusedStateId:0,\n  // center:[-83.43523233606125, 32.63933616159129],\n  // zoom:4,\n  // focusedStateId:13,\n  tooltip:'',\n};\n\nconst mapParams = (state=initialState, action) =>{\n  return produce( state, draft =>{\n    const {payload} = action;\n    switch (action.type) {\n      case SET_CENTER:\n        draft.center=payload;\n        break;\n      case SET_ZOOM:\n        draft.zoom=payload;\n        break;\n      case SET_FOCUSED_STATE_ID:\n        draft.focusedStateId = payload;\n        break;\n      case SET_TOOLTIP:\n        draft.tooltip = payload;\n        break;\n      case ZOOM:\n        return {...payload};\n      default:\n        return;\n    }\n  })\n}\n\nexport default mapParams;\n","import produce from 'immer';\nimport { LOAD_COVID, LOAD_US_COVID} from '../constants/action_constants';\nimport { csvParse } from 'd3-dsv';\nimport axios from 'axios';\nimport nationalCovid from '../data/all-covid.json';\n\nlet initialState={\n  us:[],\n  ma:[],\n  isLoading:false\n};\n\nconst covidData = (state=initialState, action) =>{\n  return produce( state, draft =>{\n    const {payload} = action;\n    switch (action.type) {\n      case LOAD_COVID:\n        draft.ma=payload;\n        break;\n      case LOAD_US_COVID:\n        draft.us=payload;\n        break;\n      case 'SET_COVID_LOADING':\n        draft.isLoading=payload;\n        break;\n      default:\n        return;\n    }\n  })\n}\n\nexport async function fetchCovidData(dispatch, getState) {\n  dispatch({type: 'SET_COVID_LOADING', payload:true});\n  //const nationalCovid = await axios.get('https://covid.cdc.gov/covid-data-tracker/COVIDData/getAjaxData?id=integrated_county_latest_external_data');\n  // const ma = csvParse(maCovid.data);\n  // dispatch({ type: LOAD_COVID, payload: ma })\n  // const usCovid = await axios.get('us-covid.csv');\n  // const us = csvParse(usCovid.data);\n  const CNNCovid = await axios.get('https://ix.cnn.io/data/novel-coronavirus-2019-ncov/us/counties.json');\n  dispatch({ type: LOAD_US_COVID, payload: CNNCovid.data.data });\n  //dispatch({ type: LOAD_US_COVID, payload: nationalCovid.integrated_county_latest_external_data });\n  dispatch({type: 'SET_COVID_LOADING', payload:false});\n}\n\nexport default covidData;\n","import AL from '../data/AL-counties.json';\nimport AK from '../data/AK-counties.json';\nimport AZ from '../data/AZ-counties.json';\nimport AR from '../data/AR-counties.json';\nimport CA from '../data/CA-counties.json';\nimport CO from '../data/CO-counties.json';\nimport CT from '../data/CT-counties.json';\nimport DE from '../data/DE-counties.json';\nimport DC from '../data/DC-counties.json';\nimport FL from '../data/FL-counties.json';\nimport GA from '../data/GA-counties.json';\nimport HI from '../data/HI-counties.json';\nimport ID from '../data/ID-counties.json';\nimport IL from '../data/IL-counties.json';\nimport IN from '../data/IN-counties.json';\nimport IA from '../data/IA-counties.json';\nimport KS from '../data/KS-counties.json';\nimport KY from '../data/KY-counties.json';\nimport LA from '../data/LA-counties.json';\nimport ME from '../data/ME-counties.json';\nimport MD from '../data/MD-counties.json';\nimport MA from '../data/MA-counties.json';\nimport MI from '../data/MI-counties.json';\nimport MN from '../data/MN-counties.json';\nimport MS from '../data/MS-counties.json';\nimport MO from '../data/MO-counties.json';\nimport MT from '../data/MT-counties.json';\nimport NE from '../data/NE-counties.json';\nimport NV from '../data/NV-counties.json';\nimport NH from '../data/NH-counties.json';\nimport NJ from '../data/NJ-counties.json';\nimport NM from '../data/NM-counties.json';\nimport NY from '../data/NY-counties.json';\nimport NC from '../data/NC-counties.json';\nimport ND from '../data/ND-counties.json';\nimport OH from '../data/OH-counties.json';\nimport OK from '../data/OK-counties.json';\nimport OR from '../data/OR-counties.json';\nimport PA from '../data/PA-counties.json';\nimport RI from '../data/RI-counties.json';\nimport SC from '../data/SC-counties.json';\nimport SD from '../data/SD-counties.json';\nimport TN from '../data/TN-counties.json';\nimport TX from '../data/TX-counties.json';\nimport UT from '../data/UT-counties.json';\nimport VT from '../data/VT-counties.json';\nimport VA from '../data/VA-counties.json';\nimport WA from '../data/WA-counties.json';\nimport WV from '../data/WV-counties.json';\nimport WI from '../data/WI-counties.json';\nimport WY from '../data/WY-counties.json';\n\n\nconst countyResults= {AL, AK, AZ, AR, CA, CO, CT, DE, DC, FL, GA, HI, ID, IL, IN, IA, KS, KY, LA, ME, MD, MA, MI, MN, MS, MO, MT, NE, NV, NH, NJ, NM, NY, NC, ND, OH, OK, OR, PA, RI, SC, SD, TN, TX, UT, VT, VA, WA, WV, WI, WY};\nexport default countyResults;\n","import React from 'react';\nimport * as d3 from 'd3';\nimport { scaleLinear,scaleLog,scaleRadial } from 'd3-scale';\n\nexport default class CNNVotingDataContext {\n    constructor(nationalVotingData) {\n        this._nationalVotingData = nationalVotingData;\n        let sorted=[...nationalVotingData].sort( (a,b) => a.totalVotes - b.totalVotes);\n        this.voteOpScale = scaleLinear().domain([sorted[0].totalVotes,sorted[sorted.length-2].totalVotes]).range([0,1]);\n        this.tmpOpScale = scaleLog().domain([10000,4000000]).range([0,1]);\n        this._currentState={};\n        this._bidenResult ={};\n        this._trumpResult={}\n        this._total={};\n        this._voteRatio={};\n    }\n    selectCurrentStateById(id){\n        this._currentState=this._nationalVotingData.find( s => s.id === id);\n        if(!this._currentState){\n            return undefined;\n        }\n        this._bidenResult = this._currentState? this._currentState.candidates.find( c => c.id === 1036  ): {};\n        this._trumpResult = this._currentState? this._currentState.candidates.find( c => c.id !== 1036  ): {};\n        this._total =this._bidenResult.votes+this._trumpResult.votes\n        this._voteRatio = this._bidenResult.id ? this._bidenResult.votes/this._total :0;\n        if (this._currentState && this._currentState.counties) {\n            let sortedCounties = [...this._currentState.counties].sort((a, b) => a.totalVotes - b.totalVotes);\n            this.voteCountyOpScale = scaleLinear().domain([sortedCounties[0].totalVotes, sortedCounties[sortedCounties.length - 1].totalVotes]).range([0, 1]);\n        }\n        return this._currentState;\n    }\n    selectCurrentCountyById(id){\n        if(!this._currentState.counties){\n            return undefined;\n        }\n        this._currentCounty=this._currentState.counties.find( county => county.id === id);\n        this._bidenCountyResult = this._currentCounty ?this._currentCounty.candidates.find( c => c.id === 1036  ): {}\n        this._trumpCountyResult = this._currentCounty? this._currentCounty.candidates.find( c => c.id !== 1036  ): {};\n        this._countyTotal =this._bidenCountyResult.votes+this._trumpCountyResult.votes\n        this._countyVoteRatio = this._bidenCountyResult.id ? this._bidenCountyResult.votes/this._countyTotal :0;\n        return this._currentCounty;\n    }\n    getTooltip(name){\n        return this._currentState?(<div>\n            <div>{name}</div>\n            <div>Total votes: {this._currentState.totalVotes}</div>\n            <div>Biden: {this._bidenResult.votes}</div>\n            <div>Trump: {this._trumpResult.votes}</div>\n        </div>):null;\n    }\n    getCountyTooltip(name){\n        return this._currentCounty?(\n            <>\n                <div>County: {name}</div>\n                <div>Total Votes: {this._currentCounty.totalVotes.toLocaleString()}</div>\n                <div>Joe Biden: {this._bidenCountyResult.votes.toLocaleString()}</div>\n                <div>Donald Trump: {this._trumpCountyResult.votes.toLocaleString()}</div>\n            </>\n        ):null;\n    }\n    getCountyColor(){\n        const countyColor= this._currentCounty ? d3.color(this._countyVoteRatio>=.5? '#00F':'#F00').copy({opacity:this.tmpOpScale(this._countyTotal)}):\"#DDD\";\n        return countyColor;\n    }\n    getStateColor(id,focusedStateId){\n        const stateColor=this._currentState && focusedStateId !==id ? d3.color(this._voteRatio>=.5? '#00F':'#F00').copy({opacity:this.voteOpScale(this._total)}) :\"#DDD\";\n        return stateColor;\n    }\n}","import produce from 'immer';\nimport axios from 'axios';\nimport xml2js from 'xml2js';\nimport allStates from '../data/allstates.json';\nimport countyLoader from '../utils/countyLoader';\nimport CNNVotingDataContext from \"../component/CNNVotingDataContext\";\n\nlet initialState={\n    us:[],\n    dataContext:null,\n    isLoadingCounties:false,\n    isLoading:false,\n};\n\nconst votingData = (state=initialState, action) =>{\n    return produce( state, draft =>{\n        const {payload} = action;\n        switch (action.type) {\n            case 'SET_GA_DATA':\n                draft.ga=payload;\n                break;\n            case 'SET_STATE_LEVEL_RESULTS':\n                let index = draft.us.findIndex( s => s.state === payload.state);\n                if (index >= 0){\n                    draft.us[index] = payload;\n                }else{\n                    draft.us.push(payload);\n                }\n                break;\n            case 'SET_COUNTY_VOTING_DATA':\n                let holder = draft.us.find( s => s.state === payload.stateAbbr);\n                if(holder){\n                    holder.counties = payload.counties;\n                }\n                break;\n            case 'INIT_VOTING_DATA_CONTEXT':\n                draft.dataContext=new CNNVotingDataContext(state.us);\n                break;\n            case 'SET_VOTING_LOADING':\n                draft.isLoading=payload;\n                break;\n            case 'SET_COUNTIES_VOTING_LOADING':\n                draft.isLoadingCounties=payload;\n                break;\n            default:\n                return;\n        }\n    })\n}\n\nexport async function applyMissingCounties(dispatch,getState){\n    dispatch({type: 'SET_COUNTIES_VOTING_LOADING', payload:true});\n    const key={\n        AK:{biden:'7073',trump:'6638'},\n        ME:{biden:'30791',trump:'29633'},\n        NH:{biden:'49452',trump:'49453'},\n        VT:{biden:'53668',trump:'53669'},\n        MA:{biden:'35087',trump:'35088'},\n        CT:{biden:'21813',trump:'21816'},\n        RI:{biden:'46718',trump:'46719'},\n    };\n    const newEngland=[countyLoader.ME,countyLoader.NH,countyLoader.VT,countyLoader.MA,countyLoader.CT,countyLoader.RI];\n    newEngland.forEach( s =>{\n        const id = s.races[0].stateFips;\n        const stateAbbr= allStates.find(s => s.val === id).id;\n        let counties=[]\n        s.races.map(({countyFips,candidates})=>{\n            const biden= candidates.find(({candidateID}) => candidateID === key[stateAbbr].biden);\n            const trump = candidates.find(({candidateID}) => candidateID === key[stateAbbr].trump);\n            const cs=[{id:1036,votes:biden.vote},{id:8639,votes:trump.vote}];\n            counties.push({id: countyFips, totalVotes:biden.vote+trump.vote,candidates:cs});\n        });\n        dispatch({type: 'SET_COUNTY_VOTING_DATA',payload:{stateAbbr,counties:counties}});\n    });\n    const filtered=allStates.filter(n => !['ME','VT','NH','MA','CT','RI'].includes(n.id))\n    filtered.forEach( st =>{\n        dispatch({type: 'SET_COUNTY_VOTING_DATA',payload:{stateAbbr:st.id,counties:countyLoader[st.id]}});\n    });\n    dispatch({type: 'SET_COUNTIES_VOTING_LOADING', payload:false});\n}\nexport async function fetchNationalVotingData(dispatch,getState){\n    dispatch({type: 'SET_VOTING_LOADING', payload:true});\n    const nationalResults = await axios.get('https://politics-elex-results.data.api.cnn.io/results/view/2020-national-races-PG.json');\n    nationalResults.data.forEach( stateResult =>{\n        const result = { id: stateResult.stateFipsCode,state:stateResult.stateAbbreviation,totalVotes:stateResult.totalVote,candidates:stateResult.candidates.map( candidate => {return {id: candidate.candidateId,name: candidate.fullName, votes: candidate.voteNum}})}\n        let counties=[];\n\n        dispatch({type: 'SET_STATE_LEVEL_RESULTS',payload: result});\n    });\n    dispatch(applyMissingCounties);\n    dispatch({type: 'INIT_VOTING_DATA_CONTEXT'});\n    dispatch({type: 'SET_VOTING_LOADING', payload:false});\n}\n\nexport function fetchStateVotingData(stateAbbr){\n    return async function fetchStateVotingDataThunk(dispatch, getState) {\n        dispatch({type: 'SET_COUNTIES_VOTING_LOADING', payload:true});\n        const url = `https://politics-elex-results.data.api.cnn.io/results/view/2020-county-races-PG-${stateAbbr}.json`\n        const counties = await axios.get(url);\n        const results= counties.data.map(county => {\n            const totalVotes=county.candidates.reduce((acc,current) => current.voteNum + acc,0);\n            return {name:county.countyName,id:county.countyFipsCode,totalVotes:totalVotes,candidates:county.candidates.map( candidate => {return {id: candidate.candidateId,name: candidate.fullName, votes: candidate.voteNum}})}\n        })\n        dispatch({type: 'SET_COUNTY_VOTING_DATA',payload:{stateAbbr,counties:results}});\n        dispatch({type: 'SET_COUNTIES_VOTING_LOADING', payload:false});\n    }\n}\nexport async function fetchAllVotingData(dispatch,getState){\n    dispatch({type: 'SET_COUNTIES_VOTING_LOADING', payload:true});\n    const stuff=['ME','NH','VT','MA','CT','RI'];\n    const filtered=allStates.filter(n => !stuff.includes(n.id))\n    for(const st of filtered){\n        const url = `https://politics-elex-results.data.api.cnn.io/results/view/2020-county-races-PG-${st.id}.json`\n        const counties = await axios.get(url);\n        const results= counties.data.map(county => {\n            const totalVotes=county.candidates.reduce((acc,current) => current.voteNum + acc,0);\n            return {name:county.countyName,id:county.countyFipsCode,totalVotes:totalVotes,candidates:county.candidates.map( candidate => {return {id: candidate.candidateId,name: candidate.fullName, votes: candidate.voteNum}})}\n        })\n        dispatch({type: 'SET_COUNTY_VOTING_DATA',payload:{stateAbbr:st.id,counties:results}});\n    }\n    dispatch({type: 'SET_COUNTIES_VOTING_LOADING', payload:false});\n}\n\nexport async function fetchGAVotingData(dispatch, getState) {\n    dispatch({type: 'SET_VOTING_LOADING', payload:true});\n    const gaVoting = await axios.get('ga-detail.xml');\n    let parser = new xml2js.Parser()\n    let result = await parser.parseStringPromise(gaVoting.data);\n    const votes = result.ElectionResult.Contest.find((contest)=> contest.$.key==='5000').Choice;\n    const trump = votes.find( c => c.$.key === '1');\n    const biden = votes.find( c => c.$.key === '2');\n    const jorgensen = votes.find( c => c.$.key === '3');\n    const reducer = (accumulator, currentValue, candidate) => {\n        currentValue.County.forEach(county => {\n            const name = county.$.name;\n            let match = accumulator.find( c => c.name === name);\n            if(match === undefined){\n                let tmp={name};\n                tmp[candidate] = +county.$.votes;\n                accumulator.push(tmp);\n            }else{\n                if (match[candidate]) {\n                    match[candidate] += +county.$.votes;\n                }else{\n                    match[candidate] = +county.$.votes;\n                }\n            }\n        })\n        return accumulator;\n    };\n    let counties = trump.VoteType.reduce(\n        (accumulator, currentValue) => reducer(accumulator,currentValue,'trump')\n        ,[]\n        );\n    counties = biden.VoteType.reduce(\n        (accumulator, currentValue) => reducer(accumulator,currentValue,'biden')\n        ,counties\n    );\n    counties = jorgensen.VoteType.reduce(\n        (accumulator, currentValue) =>  reducer(accumulator,currentValue,'jorgensen')\n        ,counties\n    );\n    let res={\n        total: +trump.$.totalVotes + +biden.$.totalVotes + +jorgensen.$.totalVotes,\n        trumpTotal: +trump.$.totalVotes,\n        bidenTotal: +biden.$.totalVotes,\n        jorgensenTotal: +jorgensen.$.totalVotes,\n        counties\n    }\n    dispatch({type: 'SET_GA_DATA',payload:res});\n    dispatch({type: 'SET_VOTING_LOADING', payload:false});\n}\n\nexport default votingData;","\nconst MapViews={\n    BASIC:'BASIC',\n    ELECTION_RESULTS_COUNTY:'ELECTION_RESULTS_COUNTY',\n    COVID:'COVID',\n}\nexport default MapViews;","import produce from 'immer';\nimport mapview_constants from '../constants/mapview_constants';\nimport {SET_MAPVIEW} from '../constants/action_constants';\n\nconst initialState={\n    mapView:mapview_constants.ELECTION_RESULTS_COUNTY,\n};\n\nconst dashboard = (state=initialState, action) =>{\n    return produce( state, draft =>{\n        const {payload} = action;\n        switch (action.type) {\n            case SET_MAPVIEW:\n                draft.mapView=payload;\n                break;\n            default:\n                return;\n        }\n    })\n}\n\nexport default dashboard;","import boundaries from './boundaries';\nimport mapParams from './mapParams';\nimport covidData from './covidData';\nimport {combineReducers} from 'redux';\nimport votingData from './votingData';\nimport dashboard from \"./dashboard\";\n\nconst rootReducer = combineReducers({\n  boundaries,\n  mapParams,\n  covidData,\n  votingData,\n  dashboard,\n})\nexport default rootReducer;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, {memo} from \"react\";\nimport statesBoundaries from \"../data/states-10m.json\";\nimport {Geographies, Geography} from \"react-simple-maps\";\n\n\nconst BasicMapLayer = ({setTooltip,handleStateClick}) =>\n            <Geographies geography={statesBoundaries}>\n                {({ geographies,projection,path }) =>\n                    geographies.map(geo => {\n                        return (\n                            <Geography\n                                key={geo.rsmKey}\n                                stroke=\"#000\"\n                                geography={geo}\n                                fill={\"#FFF\"}\n                                onMouseEnter={() => {\n                                    setTooltip(<div>{geo.properties.name}</div>);\n                                }}\n                                onMouseLeave={() => {\n                                    setTooltip('');\n                                }}\n                                onClick={() => handleStateClick(geo,projection,path)}\n                                style={{\n                                    default: {\n                                        stroke: \"#000\",\n                                        strokeWidth: 0.2,\n                                        outline: \"none\",\n                                    },\n                                    hover: {\n                                        fill: \"#CFD8DC\",\n                                        stroke: \"#607D8B\",\n                                        strokeWidth: 1,\n                                        outline: \"none\",\n                                    },\n                                }}\n                            />)\n                    })\n                }\n            </Geographies>\n        ;\nexport default memo(BasicMapLayer);\n","import React, {Component} from 'react';\nimport {Geographies, Geography} from 'react-simple-maps';\nimport { scaleLinear,scaleLog,scaleRadial,scaleQuantile,scaleSequential } from 'd3-scale';\nimport * as d3 from 'd3';\n\nclass CNNCovidCountiesLayer extends Component{\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        return true;\n    }\n    render(){\n        const {geographies, usCovidData, setTooltip} = this.props;\n        const property='casesPer100KResidents';\n        const sorted = [...usCovidData].sort((a,b) => a[property] - b[property]);\n        const covidColorScale = scaleLog().domain([2500,20000]).range([0,1]);\n        return (\n                geographies.map(geo => {\n                    const county =  usCovidData.find( c => c.fips === geo.id );\n                    const countyColor = county?d3.color('#F00').copy({opacity:covidColorScale(county[property])}):'#FFF';\n                    const countyTooltip = county?<div>\n                        <div>{geo.properties.name}</div>\n                        <div>Cases: {county.cases}</div>\n                        <div>Deaths: {county.deaths}</div>\n                        <div>Est. Pop: {county.estimatedPopulation}</div>\n                        <div>Deaths/100 cases: {county.deathsPer100Cases}</div>\n                        <div>Cases/100K pp: {county.casesPer100KResidents}</div>\n                        <div>Deaths/100K pp: {county.deathsPer100KResidents}</div>\n                    </div>:<div/>;\n                    return (\n                        <Geography\n                            key={geo.rsmKey}\n                            stroke=\"#000\"\n                            geography={geo}\n                            fill={countyColor}\n                            onMouseEnter={() => {\n                                setTooltip(countyTooltip);\n                            }}\n                            onMouseLeave={() => {\n                                setTooltip('');\n                            }}\n                            style={{\n                                default: {\n                                    stroke: \"#000\",\n                                    strokeWidth: 0.1,\n                                    outline: \"none\",\n                                },\n                                hover: {\n                                    fill: \"#CFD8DC\",\n                                    stroke: \"#607D8B\",\n                                    strokeWidth: .25,\n                                    outline: \"none\",\n                                },\n                            }}\n                        />)\n                })\n        )\n    }\n}\nexport default CNNCovidCountiesLayer;\n","import {\n  SET_ZOOM,\n  SET_TOOLTIP,\n  SET_CENTER,\n  SET_FOCUSED_STATE_ID,\n  ZOOM,\n  SET_MAPVIEW\n} from '../constants/action_constants';\n\nexport function setZoom(zoom){\n  return {type: SET_ZOOM, payload:zoom}\n}\nexport function setCenter(center){\n  return {type: SET_CENTER, payload:center}\n}\nexport function setFocusedState(id){\n  return {type: SET_FOCUSED_STATE_ID, payload:id}\n}\nexport function doZoom(payload){\n  return {type: ZOOM, payload}\n}\nexport function setTooltip(payload){\n  return {type: SET_TOOLTIP, payload}\n}\n\nexport function setMapView(mapView){\n  return {type: SET_MAPVIEW, payload:mapView}\n}","import CNNCovidCountiesLayer from \"../component/CNNCovidCountiesLayer\";\nimport {connect} from \"react-redux\";\nimport {setTooltip} from \"../actions/actions\";\n\n\nconst mapStateToProps = (state,ownProps)=>{\n    return {\n        usCovidData : state.covidData.us,\n        ownProps\n    }\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n    return {\n        setTooltip(payload){\n            dispatch(setTooltip(payload));\n        }\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(CNNCovidCountiesLayer)","import {applyMiddleware,createStore} from 'redux';\nimport rootReducer from './reducers/store';\nimport thunkMiddleware from 'redux-thunk';\n\nexport default function configureStore(preloadedState){\n\n  return createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(thunkMiddleware)\n  );\n}\n","import {setTooltip} from \"../actions/actions\";\nimport {connect} from \"react-redux\";\nimport React, {PureComponent} from \"react\";\nimport {Geography} from \"react-simple-maps\";\n\n\nclass StateCounties extends PureComponent{\n    render(){\n        const {geographies,focusedStateId,setTooltip} = this.props;\n        if(+focusedStateId ==0 )\n            return <></>;\n        return geographies.map(geo => {\n            const {name} = geo.properties;\n            const tooltip=<div>{name + ' '+geo.id }</div>;\n            return (\n                <Geography\n                    key={geo.rsmKey}\n                    stroke=\"#000\"\n                    geography={geo}\n                    fill={\"#DDD\"}\n                    onMouseEnter={() => {\n                        setTooltip(tooltip);\n                    }}\n                    onMouseLeave={() => {\n                        setTooltip('');\n                    }}\n                    style={{\n                        default: {\n                            stroke: \"#FFFFFF\",\n                            strokeWidth: 0.1,\n                            outline: \"none\",\n                        },\n                        hover: {\n                            fill: \"#CFD8DC\",\n                            stroke: \"#607D8B\",\n                            strokeWidth: 0.2,\n                            outline: \"none\",\n                        },\n                    }}\n                />\n            )\n        })\n    }\n}\n\nconst mapStateToProps = (state,ownProps)=>{\n    return {\n        usCovidData : state.covidData.us,\n        focusedStateId: state.mapParams.focusedStateId,\n        ownProps\n    }\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n    return {\n        setTooltip(payload){\n            dispatch(setTooltip(payload));\n        }\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(StateCounties)","import {Geography} from 'react-simple-maps';\nimport React from 'react';\n\nconst AllCounties = ({geographies,setTooltip,votingDataContext}) =>\n        geographies.map(geo => {\n            const stateId=geo.id.substr(0,2);\n            let stat = votingDataContext.selectCurrentStateById(stateId);\n            let county = stat ? votingDataContext.selectCurrentCountyById(geo.id):undefined;\n            const countyColor = county ? votingDataContext.getCountyColor(geo.id):'#FFF';\n            const countyTooltip = county ? votingDataContext.getCountyTooltip(geo.properties.name):<div>{geo.properties.name + ' '+geo.id }</div>;\n            return (\n                <Geography\n                    key={geo.rsmKey}\n                    stroke=\"#000\"\n                    geography={geo}\n                    fill={countyColor}\n                    onMouseEnter={() => {\n                        setTooltip(countyTooltip);\n                    }}\n                    onMouseLeave={() => {\n                        setTooltip('');\n                    }}\n                    style={{\n                        default: {\n                            stroke: \"#000\",\n                            strokeWidth: 0.01,\n                            outline: \"none\",\n                        },\n                        hover: {\n                            fill: \"#CFD8DC\",\n                            stroke: \"#607D8B\",\n                            strokeWidth: .25,\n                            outline: \"none\",\n                        },\n                    }}\n                />)\n        });\n\nexport default AllCounties;","import {setTooltip} from \"../actions/actions\";\nimport {connect} from \"react-redux\";\nimport AllCounties from \"../component/AllCounties\";\nimport CNNVotingDataContext from \"../component/CNNVotingDataContext\";\n\n\nconst mapStateToProps = (state,ownProps)=>{\n    return {\n        votingDataContext:state.votingData.dataContext,\n        ownProps\n    }\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n    return {\n        setTooltip(payload){\n            dispatch(setTooltip(payload));\n        }\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(AllCounties)","import counties from \"../data/counties-10m.json\";\nimport {Geographies, Geography} from \"react-simple-maps\";\nimport React from \"react\";\nimport mapview_constants from \"../constants/mapview_constants\";\nimport CNNCovidCountiesContainer from \"../containers/CNNCovidCountiesContainer\";\nimport FocusedStateCountiesContainer from \"../containers/FocusedStateCountiesContainer\";\nimport ElectionResultsCounties from \"../containers/ElectionResultsCounties\";\n\nconst {BASIC,ELECTION_RESULTS_COUNTY,COVID} = mapview_constants;\nconst Layers = ({mapView,focusedStateId})=> {\n    return <Geographies geography={counties}\n                 parseGeographies={(geos) => mapView === BASIC\n                     ? geos.filter(geo => geo.id.substring(0, 2) === focusedStateId)\n                     : geos}>\n        {\n            ({geographies, projection, path}) => {\n                switch (mapView) {\n                    case COVID:\n                        return <CNNCovidCountiesContainer geographies={geographies}/>;\n                    case ELECTION_RESULTS_COUNTY:\n                        return <ElectionResultsCounties geographies={geographies} />;\n                    default:\n                        return <FocusedStateCountiesContainer geographies={geographies}/>;\n                }\n\n            }\n        }\n    </Geographies>\n};\n\nexport default Layers;","import React, {Component} from 'react';\nimport {ComposableMap, Geographies, Geography, Marker, ZoomableGroup} from 'react-simple-maps';\nimport CNNVotingDataContext from './CNNVotingDataContext';\nimport BasicMapLayer from \"./BasicMapLayer\";\nimport Layers from \"./Layers\";\n\n\nclass USMap extends Component{\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const mapViewChange = this.props.mapView !== nextProps.mapView;\n        const focusStateChannge = this.props.focusedStateId !== nextProps.focusedStateId;\n        return mapViewChange || focusStateChannge;\n    }\n\n    render(){\n        const {center,mapView,zoom,handleStateClick,handleMove,focusedStateId,setTooltip} = this.props;\n        return (\n            <ComposableMap  data-tip='' projection=\"geoAlbersUsa\"  style={{border:'1px black solid',height:'100%', width:'100%'}}>\n                <ZoomableGroup center={center} zoom={zoom} onMoveEnd={(event,zoomEvent)=>handleMove(event,focusedStateId)}>\n                    <BasicMapLayer setTooltip={setTooltip} handleStateClick={handleStateClick}/>\n                    <Layers mapView={mapView} focusedStateId={focusedStateId}/>\n\n\n                    {/*<VotingLayer votingDataContext={votingDataContext} focusedStateId={focusedStateId} setTooltip={setTooltip} handleStateClick={handleStateClick} zoom={zoom}/>*/}\n                    {/*<Labels />*/}\n\n                    {/*<Cities zoom={zoom} />*/}\n                </ZoomableGroup>\n            </ComposableMap>\n        );\n    }\n}\n\nexport default USMap;\n","import React,{Component} from \"react\";\nimport USMap from '../component/USMap';\nimport {connect} from 'react-redux';\nimport {setCenter,setZoom,setFocusedState,doZoom,setTooltip} from '../actions/actions';\nimport ReactTooltip from \"react-tooltip\";\nimport { Typography} from \"@material-ui/core\";\n\n\nclass Template extends Component{\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    const focusChanged = this.props.focusedStateId !== nextProps.focusedStateId;\n    const mapViewChanged = this.props.mapView !== nextProps.mapView;\n    const isLoadingChanged = this.props.isLoading !== nextProps.isLoading;\n    const tooltipChanged = this.props.tooltip !== nextProps.tooltip;\n    return focusChanged || mapViewChanged || isLoadingChanged || tooltipChanged;\n  }\n\n  render(){\n    const {isLoading,tooltip}=this.props;\n    if(isLoading){\n      return <Typography style={{border:'1px black solid',height:'100%', width:'100%'}}>Loading</Typography>;\n    }\n    return(<>\n            <USMap {...this.props} />\n            <ReactTooltip>{tooltip}</ReactTooltip>\n          </>\n    )\n  }\n}\n\nconst mapStateToProps = state =>{\n  const {zoom,center,focusedStateId} = state.mapParams;\n  return {\n    zoom,\n    center,\n    focusedStateId,\n    tooltip:state.mapParams.tooltip,\n    isLoading:state.votingData.isLoading || state.votingData.isLoadingCounties || state.covidData.isLoading,\n    isLoadingCounties: state.votingData.isLoadingCounties,\n    gaVotingData: state.votingData.ga,\n    usCovidData: state.covidData.us,\n    covidData: state.covidData.ma,\n    nationalVotingData : state.votingData.us,\n    mapView: state.dashboard.mapView,\n  };\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n  return {\n    setCenter:(center)=>{\n      dispatch(setCenter(center));\n    },\n    setFocusedState:(id)=>{\n      dispatch(setFocusedState(id));\n    },\n    setTooltip(payload){\n      dispatch(setTooltip(payload));\n    },\n    handleMove(event,focusedStateId){\n      const {zoom,coordinates} = event;\n      dispatch(doZoom({center:coordinates,zoom,focusedStateId : zoom < 4 ? '0' : focusedStateId}));\n    },\n    handleStateClick(geo,projection,path,stateAbbr,zoom){\n      const center = projection.invert(path.centroid(geo));\n      //dispatch(fetchStateVotingData(stateAbbr));\n      dispatch(doZoom({center,zoom:zoom>4?zoom:4,focusedStateId:geo.id}));\n    }\n  };\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Template);\n","import {Link, Typography} from '@material-ui/core';\nimport React from 'react';\n\n\nconst Copyright = () => {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {`Copyright © Harry Phan ${new Date().getFullYear()} `}\n        </Typography>\n    );\n}\n\nexport default Copyright;","import {PureComponent} from \"react\";\nimport {FormControl, InputLabel, Select} from \"@material-ui/core\";\nimport mapview_constants from '../constants/mapview_constants';\nconst {BASIC,ELECTION_RESULTS_COUNTY,COVID} = mapview_constants;\n\nexport default class MapViewSelector extends PureComponent{\n    render(){\n        const {changeMapView,mapView} = this.props;\n        return(\n            <FormControl >\n                <Select\n                    native\n                    defaultValue={mapView}\n                    onChange={changeMapView}\n                >\n                    <option value={BASIC}>Basic</option>\n                    <option value={ELECTION_RESULTS_COUNTY}>County Level Election Results</option>\n                    <option value={COVID}>COVID cases / 100K Residents</option>\n                </Select>\n            </FormControl>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport MapViewSelector from \"../component/MapViewSelector\";\nimport {setMapView} from \"../actions/actions\";\n\nconst mapStateToProps = (state) =>{\n    return {\n        mapView: state.dashboard.mapView\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        changeMapView(event) {\n            dispatch(setMapView(event.target.value));\n        },\n    }\n}\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(MapViewSelector);","import React, {Component} from \"react\";\nimport {Box, Button, Container, Link, Typography} from \"@material-ui/core\";\nimport USMapContainer from \"../containers/USMapContainer\";\nimport ReactTooltip from \"react-tooltip\";\nimport Copyright from \"./Copyright\";\nimport MapViewSelector from \"../containers/MapViewSelector\";\n\nclass Main extends Component{\n\n    render(){\n        return(\n            <Container lg={3} height={'100vh'} width={'100%'}>\n                <Box height={'10vh'}>\n                    <Typography variant=\"h3\">US Map</Typography>\n                </Box>\n                <Box height={'5vh'}>\n                    <MapViewSelector />\n                </Box>\n                <Box lg={3} height={'70vh'} width={'100%'}>\n                    <USMapContainer />\n                </Box>\n                <Box height={'10vh'} lg={3}>\n                    <Typography variant=\"caption\" gutterBottom>\n                        Source code: <Link href=\"https://github.com/harryphan/us-district-map\">Github</Link>\n                        <br/>\n                        Data sources: <Link href=\"https://www.cnn.com/election/2020/results/president?iid=politics_election_national_map\">CNN</Link>\n                        &nbsp;\n                        <Link href=\"https://www.politico.com/2020-election/results/\">Politico</Link>\n                        &nbsp;\n                        <Link href=\"https://covid.cdc.gov/covid-data-tracker/#county-view\">\n                           CDC\n                        </Link>\n                    </Typography>\n                </Box>\n                <Box height={'5vh'}>\n                    <Copyright />\n                </Box>\n            </Container>\n        );\n    }\n}\n\nexport default Main;","import {connect} from 'react-redux';\nimport Main from \"../component/Main\";\n\nconst mapStateToProps = state =>{\n  return {\n    tooltip:state.mapParams.tooltip,\n    isLoading:state.votingData.isLoading || state.votingData.isLoadingCounties,\n  };\n}\n\nexport default connect(mapStateToProps)(Main);\n","import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#556cd6',\n        },\n        secondary: {\n            main: '#19857b',\n        },\n        error: {\n            main: red.A400,\n        },\n        background: {\n            default: '#fff',\n        },\n    },\n});\n\nexport default theme;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport configureStore from './configureStore';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Main from './containers/MainContainer';\r\nimport { fetchNationalVotingData} from \"./reducers/votingData\";\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport theme from './theme';\r\nimport {CssBaseline} from \"@material-ui/core\";\r\nimport {fetchCovidData} from \"./reducers/covidData\";\r\n\r\nconst store = configureStore();\r\nstore.dispatch(fetchNationalVotingData);\r\nstore.dispatch(fetchCovidData);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n        <ThemeProvider theme={theme}>\r\n            {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\r\n            <CssBaseline />\r\n            <Main />\r\n        </ThemeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}