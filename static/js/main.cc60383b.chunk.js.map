{"version":3,"sources":["constants/action_constants.js","reducers/boundaries.js","reducers/mapParams.js","reducers/covidData.js","reducers/votingData.js","reducers/store.js","serviceWorker.js","component/Counties.js","component/USMap.js","containers/USMapContainer.js","configureStore.js","actions/actions.js","containers/Main.js","index.js"],"names":["LOAD_STATES","LOAD_COUNTIES","LOAD_COVID","LOAD_US_COVID","SET_ZOOM","SET_CENTER","SET_FOCUSED_STATE_ID","ZOOM","SET_TOOLTIP","initialState","states","counties","isLoading","dispatch","getState","a","type","payload","axios","get","data","boundaries","state","action","produce","draft","center","zoom","focusedStateId","tooltip","mapParams","us","ma","maCovid","csvParse","usCovid","covidData","ga","gaVoting","parser","xml2js","Parser","parseStringPromise","result","votes","ElectionResult","Contest","find","contest","$","key","Choice","trump","c","biden","jorgensen","reducer","accumulator","currentValue","candidate","County","forEach","county","name","match","undefined","tmp","push","VoteType","reduce","res","total","totalVotes","trumpTotal","bidenTotal","jorgensenTotal","votingData","rootReducer","combineReducers","Boolean","window","location","hostname","Counties","gaVotingData","setTooltip","filtered","filter","covid","date","sort","b","new_confirmed_cases","colorScale","scaleLinear","domain","length","range","totals","map","voteOpScale","scaleLog","Math","min","max","voteColorScale","scaleThreshold","geography","geographies","focused","projection","path","geo","id","substring","properties","voterData","stroke","fill","d3","copy","opacity","onMouseEnter","entry","total_confirmed_cases","onMouseLeave","style","default","strokeWidth","outline","hover","rsmKey","memo","USMap","statesBoundaries","countiesBoundaries","usCovidData","doZoom","setFocusedState","data-tip","border","width","height","onMoveEnd","event","zoomEvent","coordinates","sorted","Cases_in_Last_7_Days","item","st","State","onClick","invert","centroid","handleStateClick","preloadedState","connect","setCenter","setZoom","Main","this","props","href","padding","USMapContainer","PureComponent","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc60383b.chunk.js","sourcesContent":["export const LOAD_STATES='LOAD_STATES';\nexport const LOAD_COUNTIES='LOAD_COUNTIES';\nexport const LOAD_COVID='LOAD_COVID';\nexport const LOAD_US_COVID='LOAD_US_COVID';\nexport const SET_ZOOM='SET_ZOOM';\nexport const SET_CENTER='SET_CENTER';\nexport const SET_FOCUSED_STATE_ID='SET_FOCUSED_STATE_ID';\nexport const ZOOM='ZOOM';\nexport const SET_TOOLTIP='SET_TOOLTIP';\n","import produce from 'immer';\nimport {LOAD_STATES,LOAD_COUNTIES} from '../constants/action_constants';\nimport axios from \"axios\";\nlet initialState={\n  states:null,\n  counties:null,\n  isLoading:false\n};\n\nconst boundaries = (state=initialState, action) =>{\n  return produce( state, draft =>{\n    const {payload} = action;\n    switch (action.type) {\n      case LOAD_STATES:\n        draft.states=payload;\n        break;\n      case LOAD_COUNTIES:\n        draft.counties=payload;\n        break;\n      case 'SET_BOUNDARIES_LOADING':\n        draft.isLoading=payload;\n        break;\n      default:\n        return;\n    }\n  })\n}\nexport async function fetchBoundaries(dispatch, getState) {\n  dispatch({ type: 'SET_BOUNDARIES_LOADING', payload: true })\n  const states = await axios.get('states-10m.json')\n  dispatch({ type: LOAD_STATES, payload: states.data })\n  const counties = await axios.get('counties-10m.json')\n  dispatch({ type: LOAD_COUNTIES, payload: counties.data })\n  dispatch({ type: 'SET_BOUNDARIES_LOADING', payload: false })\n}\n\nexport default boundaries;\n","import produce from 'immer';\nimport {SET_CENTER,SET_ZOOM,SET_TOOLTIP,SET_FOCUSED_STATE_ID,ZOOM} from '../constants/action_constants';\nlet initialState={\n  // center:[0,0],\n  // zoom:1,\n  // focusedStateId:0,\n  center:[-83.43523233606125, 32.63933616159129],\n  zoom:4,\n  focusedStateId:13,\n  tooltip:'',\n};\n\nconst mapParams = (state=initialState, action) =>{\n  return produce( state, draft =>{\n    const {payload} = action;\n    switch (action.type) {\n      case SET_CENTER:\n        draft.center=payload;\n        break;\n      case SET_ZOOM:\n        draft.zoom=payload;\n        break;\n      case SET_FOCUSED_STATE_ID:\n        draft.focusedStateId = payload;\n        break;\n      case SET_TOOLTIP:\n        draft.tooltip = payload;\n        break;\n      case ZOOM:\n        return {...payload};\n      default:\n        return;\n    }\n  })\n}\n\nexport default mapParams;\n","import produce from 'immer';\nimport { LOAD_COVID, LOAD_US_COVID} from '../constants/action_constants';\nimport { csvParse } from 'd3-dsv';\nimport axios from 'axios';\n\nlet initialState={\n  us:[],\n  ma:[],\n  isLoading:false\n};\n\nconst covidData = (state=initialState, action) =>{\n  return produce( state, draft =>{\n    const {payload} = action;\n    switch (action.type) {\n      case LOAD_COVID:\n        draft.ma=payload;\n        break;\n      case LOAD_US_COVID:\n        draft.us=payload;\n        break;\n      case 'SET_COVID_LOADING':\n        draft.isLoading=payload;\n        break;\n      default:\n        return;\n    }\n  })\n}\n\nexport async function fetchCovidData(dispatch, getState) {\n  dispatch({type: 'SET_COVID_LOADING', payload:true});\n  const maCovid = await axios.get('covid.csv')\n  const ma = csvParse(maCovid.data);\n  dispatch({ type: LOAD_COVID, payload: ma })\n  const usCovid = await axios.get('us-covid.csv');\n  const us = csvParse(usCovid.data);\n  dispatch({ type: LOAD_US_COVID, payload: us });\n  dispatch({type: 'SET_COVID_LOADING', payload:false});\n}\n\nexport default covidData;\n","import produce from 'immer';\nimport axios from 'axios';\nimport xml2js from 'xml2js';\n\nlet initialState={\n    us:[],\n    ga:{},\n    isLoading:false\n};\n\nconst votingData = (state=initialState, action) =>{\n    return produce( state, draft =>{\n        const {payload} = action;\n        switch (action.type) {\n            case 'SET_GA_DATA':\n                draft.ga=payload;\n                break;\n            case 'SET_VOTING_LOADING':\n                draft.isLoading=payload;\n                break;\n            default:\n                return;\n        }\n    })\n}\nexport async function fetchVotingData(dispatch, getState) {\n    dispatch({type: 'SET_VOTING_LOADING', payload:true});\n    const gaVoting = await axios.get('ga-detail.xml');\n    let parser = new xml2js.Parser()\n    let result = await parser.parseStringPromise(gaVoting.data);\n    const votes = result.ElectionResult.Contest.find((contest)=> contest.$.key==='5000').Choice;\n    const trump = votes.find( c => c.$.key === '1');\n    const biden = votes.find( c => c.$.key === '2');\n    const jorgensen = votes.find( c => c.$.key === '3');\n    const reducer = (accumulator, currentValue, candidate) => {\n        currentValue.County.forEach(county => {\n            const name = county.$.name;\n            let match = accumulator.find( c => c.name === name);\n            if(match === undefined){\n                let tmp={name};\n                tmp[candidate] = +county.$.votes;\n                accumulator.push(tmp);\n            }else{\n                if (match[candidate]) {\n                    match[candidate] += +county.$.votes;\n                }else{\n                    match[candidate] = +county.$.votes;\n                }\n            }\n        })\n        return accumulator;\n    };\n    let counties = trump.VoteType.reduce(\n        (accumulator, currentValue) => reducer(accumulator,currentValue,'trump')\n        ,[]\n        );\n    counties = biden.VoteType.reduce(\n        (accumulator, currentValue) => reducer(accumulator,currentValue,'biden')\n        ,counties\n    );\n    counties = jorgensen.VoteType.reduce(\n        (accumulator, currentValue) =>  reducer(accumulator,currentValue,'jorgensen')\n        ,counties\n    );\n    let res={\n        total: +trump.$.totalVotes + +biden.$.totalVotes + +jorgensen.$.totalVotes,\n        trumpTotal: +trump.$.totalVotes,\n        bidenTotal: +biden.$.totalVotes,\n        jorgensenTotal: +jorgensen.$.totalVotes,\n        counties\n    }\n    dispatch({type: 'SET_GA_DATA',payload:res});\n    dispatch({type: 'SET_VOTING_LOADING', payload:false});\n}\n\nexport default votingData;","import boundaries from './boundaries';\nimport mapParams from './mapParams';\nimport covidData from './covidData';\nimport {combineReducers} from 'redux';\nimport votingData from './votingData';\n\nconst rootReducer = combineReducers({\n  boundaries,\n  mapParams,\n  covidData,\n  votingData,\n})\nexport default rootReducer;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React,{memo} from 'react';\nimport { Geographies, Geography } from \"react-simple-maps\";\nimport { scaleLinear,scaleThreshold,scaleLog } from 'd3-scale';\nimport * as d3 from 'd3';\n\nconst Counties = ({counties,covidData,gaVotingData,focusedStateId,setTooltip}) =>{\n  const filtered = covidData.filter(covid => covid.date === '11/9/2020').sort((a,b) => a.new_confirmed_cases - b.new_confirmed_cases);\n  const colorScale = scaleLinear().domain([0,filtered[filtered.length-1].new_confirmed_cases]).range(['white','red']);\n  const totals = gaVotingData.counties.map(county => county.trump + county.biden + county.jorgensen);\n  const voteOpScale = scaleLog().domain([Math.min(...totals),Math.max(...totals)]).range([0,1]);\n  const voteColorScale = scaleThreshold().domain([.5,.5]).range(['red','blue']);\n  return (\n            <Geographies geography={counties}>\n              {({ geographies,projection,path }) => {\n                const focused = geographies.filter( geo => { return +geo.id.substring(0,2) === focusedStateId});\n\n                return(\n                <>\n                  {focused.map(geo => {\n                      const { name } = geo.properties;\n                      const data = focusedStateId === 25 ? filtered.find( c => c.county === name):undefined;\n                      let voterData = focusedStateId === 13 ? gaVotingData.counties.find( county => county.name === name):undefined;\n                      let total = 0;\n                      if(voterData){\n                        total=voterData.trump+voterData.biden+voterData.jorgensen;\n                      }\n                      return (\n                        <Geography\n                          key={geo.rsmKey}\n                          stroke=\"#000\"\n                          geography={geo}\n                          fill={data ? colorScale(data.new_confirmed_cases) : voterData? d3.color(voteColorScale(voterData.biden/total)).copy({opacity:voteOpScale(total)}) :\"#DDD\"}\n                          onMouseEnter={() => {\n\n                            if(focusedStateId === 25){\n                              const entry = filtered.find( c => c.county === name);\n                              const {county, new_confirmed_cases, total_confirmed_cases} = entry;\n                              setTooltip(<><div>County: {county}</div><div>New Cases: {new_confirmed_cases}</div><div>Total Cases: {total_confirmed_cases}</div></>);\n                            }else if(focusedStateId === 13){\n                                let {trump,biden,jorgensen} = voterData;\n                                setTooltip(<><div>County: {name}</div><div>Total Votes: {biden+trump+jorgensen}</div><div>Joe Biden: {biden}</div><div>Donald Trump: {trump}</div><div>Jo Jorgensen: {jorgensen}</div></>);\n                            }\n                            else{\n                              setTooltip(name);\n                            }\n                          }}\n                          onMouseLeave={() => {\n                            setTooltip('');\n                          }}\n                          style={{\n                             default: {\n\n                                stroke: \"#FFFFFF\",\n                                strokeWidth: 0.1,\n                                outline: \"none\",\n                             },\n                             hover: {\n                                fill: \"#CFD8DC\",\n                                stroke: \"#607D8B\",\n                                strokeWidth: 0.2,\n                                outline: \"none\",\n                             },\n                          }}\n                        />\n                      )\n                    })\n                  }\n                </>\n              )}}\n            </Geographies>\n  );\n}\nexport default memo(Counties);\n","import React,{memo} from 'react';\nimport { ComposableMap, Geographies, Geography,ZoomableGroup } from \"react-simple-maps\";\nimport Counties from './Counties';\nimport { scaleLinear } from 'd3-scale';\n\nconst USMap = ({statesBoundaries,countiesBoundaries,center,zoom,usCovidData,covidData,gaVotingData,focusedStateId,doZoom,setFocusedState,setTooltip}) =>{\n  function handleStateClick(geo,projection,path){\n    const center = projection.invert(path.centroid(geo));\n    doZoom({center,zoom:zoom>4?zoom:4,focusedStateId:+geo.id});\n  }\n  function handleMove(event,zoomEvent){\n    const {zoom} = event;\n    if (zoom < 4){\n      doZoom({center:event.coordinates,zoom,focusedStateId:0});\n    }else{\n      doZoom({center:event.coordinates,zoom,focusedStateId});\n    }\n  }\n  return (\n      <ComposableMap data-tip='' projection=\"geoAlbersUsa\" style=\n    {{border:'1px black solid', width:'90%', height:'600px'}}>\n        <ZoomableGroup center={center} zoom={zoom} onMoveEnd={handleMove}>\n          <Geographies\n              geography={statesBoundaries}\n          >\n            {({ geographies,projection,path }) =>{\n              const sorted = [...usCovidData].sort((a,b) => a.Cases_in_Last_7_Days - b.Cases_in_Last_7_Days);\n              const colorScale = scaleLinear().domain([0,sorted[sorted.length-1].Cases_in_Last_7_Days]).range(['white','red']);\n\n              return geographies.map(geo => {\n                const item = sorted.find((st) => st.State === geo.properties.name);\n\n                return (\n                  <Geography\n                    key={geo.rsmKey}\n                    stroke=\"#000\"\n                    geography={geo}\n                    fill={item ? colorScale(item.Cases_in_Last_7_Days) :\"#DDD\"}\n                    onMouseEnter={() => {\n                      const { name } = geo.properties;\n                      setTooltip(<div><div>{name}</div><div>{item.Cases_in_Last_7_Days}</div></div>);\n                    }}\n                    onMouseLeave={() => {\n                      setTooltip('');\n                    }}\n                    onClick={() => handleStateClick(geo,projection,path)}\n                    style={{\n                       default: {\n                          stroke: \"#607D8B\",\n                          strokeWidth: 0.75 /zoom,\n                          outline: \"none\",\n                       },\n                       hover: {\n                          fill: \"#CFD8DC\",\n                          stroke: \"#607D8B\",\n                          strokeWidth: 1/zoom,\n                          outline: \"none\",\n                       },\n                    }}\n                  />\n                )})\n            }\n          }\n          </Geographies>\n          { focusedStateId > 0 ?\n            <Counties counties={countiesBoundaries} covidData={covidData} gaVotingData={gaVotingData} setTooltip={setTooltip} focusedStateId={focusedStateId}/>:null\n          }\n        </ZoomableGroup>\n      </ComposableMap>\n  );\n}\nexport default memo(USMap);\n","import USMap from '../component/USMap';\nimport {connect} from 'react-redux';\nimport {setCenter,setZoom,setFocusedState,doZoom,setTooltip} from '../actions/actions';\n\nconst mapStateToProps = state =>{\n  const {states,counties} = state.boundaries;\n  const {zoom,center,focusedStateId} = state.mapParams;\n  return {\n    statesBoundaries:states,\n    countiesBoundaries:counties,\n    zoom,\n    center,\n    focusedStateId,\n    gaVotingData: state.votingData.ga,\n    usCovidData: state.covidData.us,\n    covidData: state.covidData.ma,\n  };\n}\n\nconst mapDispatchToProps = dispatch =>{\n  return {\n    setCenter:(center)=>{\n      dispatch(setCenter(center));\n    },\n    setZoom:(zoom)=>{\n      dispatch(setZoom(zoom));\n    },\n    setFocusedState:(id)=>{\n      dispatch(setFocusedState(id));\n    },\n    doZoom(payload){\n      dispatch(doZoom(payload));\n    },\n    setTooltip(payload){\n      dispatch(setTooltip(payload));\n    }\n  };\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(USMap);\n","import {applyMiddleware,createStore} from 'redux';\nimport rootReducer from './reducers/store';\nimport thunkMiddleware from 'redux-thunk';\n\nexport default function configureStore(preloadedState){\n\n  return createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(thunkMiddleware)\n  );\n}\n","import {SET_ZOOM,SET_TOOLTIP,SET_CENTER,SET_FOCUSED_STATE_ID,ZOOM} from '../constants/action_constants';\n\nexport function setZoom(zoom){\n  return {type: SET_ZOOM, payload:zoom}\n}\nexport function setCenter(center){\n  return {type: SET_CENTER, payload:center}\n}\nexport function setFocusedState(id){\n  return {type: SET_FOCUSED_STATE_ID, payload:id}\n}\nexport function doZoom(payload){\n  return {type: ZOOM, payload}\n}\nexport function setTooltip(payload){\n  return {type: SET_TOOLTIP, payload}\n}\n","import React,{PureComponent} from 'react';\nimport USMapContainer from './USMapContainer';\nimport {connect} from 'react-redux';\nimport ReactTooltip from 'react-tooltip';\n\nclass Main extends PureComponent{\n  render(){\n    const {tooltip,isLoading}=this.props;\n\n    if(isLoading){\n        return 'Loading';\n    }\n\n    return(\n      <div>\n        <div>\n          <h1>US Map</h1>\n        </div>\n        <div>\n            Source code: <a href=\"https://github.com/harryphan/us-district-map\">Github</a>\n            Data source: <a href=\"https://results.enr.clarityelections.com/GA/105369/web.264614/#/access-to-races\">Georgia Sec of State</a>\n        </div>\n        <div style={{padding:'5'}}>\n            <USMapContainer/>\n            <ReactTooltip>{tooltip}</ReactTooltip>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state =>{\n  return {\n    tooltip:state.mapParams.tooltip,\n    isLoading:state.boundaries.isLoading || state.covidData.isLoading || state.votingData.isLoading\n  };\n}\n\n\n\nexport default connect(mapStateToProps)(Main);\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport configureStore from './configureStore';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Main from './containers/Main';\r\nimport {fetchBoundaries} from \"./reducers/boundaries\";\r\nimport {fetchCovidData} from \"./reducers/covidData\";\r\nimport {fetchVotingData} from \"./reducers/votingData\";\r\n\r\nconst store = configureStore();\r\nstore.dispatch(fetchBoundaries);\r\nstore.dispatch(fetchCovidData);\r\nstore.dispatch(fetchVotingData);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Main />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}