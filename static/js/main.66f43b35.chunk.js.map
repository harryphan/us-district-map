{"version":3,"sources":["constants/action_constants.js","reducers/boundaries.js","reducers/mapParams.js","reducers/covidData.js","reducers/votingData.js","reducers/store.js","serviceWorker.js","component/Counties.js","component/USMap.js","containers/USMapContainer.js","configureStore.js","actions/actions.js","containers/Main.js","index.js"],"names":["LOAD_STATES","LOAD_COUNTIES","LOAD_COVID","LOAD_US_COVID","SET_ZOOM","SET_CENTER","SET_FOCUSED_STATE_ID","ZOOM","SET_TOOLTIP","initialState","states","counties","isLoading","boundaries","state","action","produce","draft","payload","type","center","zoom","focusedStateId","tooltip","mapParams","us","ma","covidData","isLoadingCounties","dispatch","getState","a","axios","get","data","forEach","stateResult","result","id","stateFipsCode","stateAbbreviation","totalVotes","totalVote","candidates","map","candidate","candidateId","name","fullName","votes","voteNum","votingData","ga","index","findIndex","s","push","holder","find","stateAbbr","rootReducer","combineReducers","Boolean","window","location","hostname","match","Counties","stateVotingData","gaVotingData","setTooltip","countyVotingData","sorted","sort","b","voteOpScale","scaleLog","domain","length","range","geography","geographies","focused","projection","path","filter","geo","substring","properties","countyData","county","undefined","bidenResult","c","trumpResult","total","voteRatio","stroke","fill","d3","copy","opacity","onMouseEnter","onMouseLeave","style","default","strokeWidth","outline","hover","rsmKey","memo","USMap","usCovidData","fetchStateVotingData","nationalVotingData","doZoom","setFocusedState","invert","centroid","offsets","VT","NH","MA","RI","CT","NJ","DE","MD","DC","data-tip","border","width","height","onMoveEnd","event","zoomEvent","coordinates","statesBoundaries","usMap","onClick","handleStateClick","geoCentroid","cur","allStates","val","Object","keys","indexOf","y","fontSize","textAnchor","subject","dx","dy","x","alignmentBaseline","preloadedState","connect","setCenter","setZoom","url","results","reduce","acc","current","countyName","countyFipsCode","Main","this","props","href","padding","USMapContainer","PureComponent","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66f43b35.chunk.js","sourcesContent":["export const LOAD_STATES='LOAD_STATES';\nexport const LOAD_COUNTIES='LOAD_COUNTIES';\nexport const LOAD_COVID='LOAD_COVID';\nexport const LOAD_US_COVID='LOAD_US_COVID';\nexport const SET_ZOOM='SET_ZOOM';\nexport const SET_CENTER='SET_CENTER';\nexport const SET_FOCUSED_STATE_ID='SET_FOCUSED_STATE_ID';\nexport const ZOOM='ZOOM';\nexport const SET_TOOLTIP='SET_TOOLTIP';\n","import produce from 'immer';\nimport {LOAD_STATES,LOAD_COUNTIES} from '../constants/action_constants';\nimport axios from \"axios\";\nlet initialState={\n  states:null,\n  counties:null,\n  isLoading:false\n};\n\nconst boundaries = (state=initialState, action) =>{\n  return produce( state, draft =>{\n    const {payload} = action;\n    switch (action.type) {\n      case LOAD_STATES:\n        draft.states=payload;\n        break;\n      case LOAD_COUNTIES:\n        draft.counties=payload;\n        break;\n      case 'SET_BOUNDARIES_LOADING':\n        draft.isLoading=payload;\n        break;\n      default:\n        return;\n    }\n  })\n}\nexport async function fetchBoundaries(dispatch, getState) {\n  dispatch({ type: 'SET_BOUNDARIES_LOADING', payload: true })\n  const states = await axios.get('states-10m.json')\n  dispatch({ type: LOAD_STATES, payload: states.data })\n  const counties = await axios.get('counties-10m.json')\n  dispatch({ type: LOAD_COUNTIES, payload: counties.data })\n  dispatch({ type: 'SET_BOUNDARIES_LOADING', payload: false })\n}\n\nexport default boundaries;\n","import produce from 'immer';\nimport {SET_CENTER,SET_ZOOM,SET_TOOLTIP,SET_FOCUSED_STATE_ID,ZOOM} from '../constants/action_constants';\nlet initialState={\n  center:[0,0],\n  zoom:1,\n  focusedStateId:0,\n  // center:[-83.43523233606125, 32.63933616159129],\n  // zoom:4,\n  // focusedStateId:13,\n  tooltip:'',\n};\n\nconst mapParams = (state=initialState, action) =>{\n  return produce( state, draft =>{\n    const {payload} = action;\n    switch (action.type) {\n      case SET_CENTER:\n        draft.center=payload;\n        break;\n      case SET_ZOOM:\n        draft.zoom=payload;\n        break;\n      case SET_FOCUSED_STATE_ID:\n        draft.focusedStateId = payload;\n        break;\n      case SET_TOOLTIP:\n        draft.tooltip = payload;\n        break;\n      case ZOOM:\n        return {...payload};\n      default:\n        return;\n    }\n  })\n}\n\nexport default mapParams;\n","import produce from 'immer';\nimport { LOAD_COVID, LOAD_US_COVID} from '../constants/action_constants';\nimport { csvParse } from 'd3-dsv';\nimport axios from 'axios';\n\nlet initialState={\n  us:[],\n  ma:[],\n  isLoading:false\n};\n\nconst covidData = (state=initialState, action) =>{\n  return produce( state, draft =>{\n    const {payload} = action;\n    switch (action.type) {\n      case LOAD_COVID:\n        draft.ma=payload;\n        break;\n      case LOAD_US_COVID:\n        draft.us=payload;\n        break;\n      case 'SET_COVID_LOADING':\n        draft.isLoading=payload;\n        break;\n      default:\n        return;\n    }\n  })\n}\n\nexport async function fetchCovidData(dispatch, getState) {\n  dispatch({type: 'SET_COVID_LOADING', payload:true});\n  const maCovid = await axios.get('covid.csv')\n  const ma = csvParse(maCovid.data);\n  dispatch({ type: LOAD_COVID, payload: ma })\n  const usCovid = await axios.get('us-covid.csv');\n  const us = csvParse(usCovid.data);\n  dispatch({ type: LOAD_US_COVID, payload: us });\n  dispatch({type: 'SET_COVID_LOADING', payload:false});\n}\n\nexport default covidData;\n","import produce from 'immer';\nimport axios from 'axios';\nimport xml2js from 'xml2js';\nimport {createAsyncThunk} from '@reduxjs/toolkit';\n\nlet initialState={\n    us:[],\n    isLoadingCounties:false,\n    isLoading:false,\n};\n\nconst votingData = (state=initialState, action) =>{\n    return produce( state, draft =>{\n        const {payload} = action;\n        switch (action.type) {\n            case 'SET_GA_DATA':\n                draft.ga=payload;\n                break;\n            case 'SET_STATE_LEVEL_RESULTS':\n                let index = draft.us.findIndex( s => s.state === payload.state);\n                if (index >= 0){\n                    draft.us[index] = payload;\n                }else{\n                    draft.us.push(payload);\n                }\n                break;\n            case 'SET_COUNTY_VOTING_DATA':\n                let holder = draft.us.find( s => s.state === payload.stateAbbr);\n                if(holder){\n                    holder.counties = payload.counties;\n                }\n                break;\n            case 'SET_VOTING_LOADING':\n                draft.isLoading=payload;\n                break;\n            case 'SET_COUNTIES_VOTING_LOADING':\n                draft.isLoadingCounties=payload;\n                break;\n            default:\n                return;\n        }\n    })\n}\nexport async function fetchNationalVotingData(dispatch,getState){\n    dispatch({type: 'SET_VOTING_LOADING', payload:true});\n    const nationalResults = await axios.get('https://politics-elex-results.data.api.cnn.io/results/view/2020-national-races-PG.json');\n    nationalResults.data.forEach( stateResult =>{\n        const result = { id: stateResult.stateFipsCode,state:stateResult.stateAbbreviation,totalVotes:stateResult.totalVote,candidates:stateResult.candidates.map( candidate => {return {id: candidate.candidateId,name: candidate.fullName, votes: candidate.voteNum}})}\n        dispatch({type: 'SET_STATE_LEVEL_RESULTS',payload: result});\n    });\n    dispatch({type: 'SET_VOTING_LOADING', payload:false});\n}\n\nexport function fetchStateVotingData(stateAbbr){\n    return async function fetchStateVotingDataThunk(dispatch, getState) {\n        dispatch({type: 'SET_COUNTIES_VOTING_LOADING', payload:true});\n        const url = `https://politics-elex-results.data.api.cnn.io/results/view/2020-county-races-PG-${stateAbbr}.json`\n        const counties = await axios.get(url);\n        const results= counties.data.map(county => {\n            const totalVotes=county.candidates.reduce((acc,current) => current.voteNum + acc,0);\n            return {name:county.countyName,id:county.countyFipsCode,totalVotes:totalVotes,candidates:county.candidates.map( candidate => {return {id: candidate.candidateId,name: candidate.fullName, votes: candidate.voteNum}})}\n        })\n        dispatch({type: 'SET_COUNTY_VOTING_DATA',payload:{stateAbbr,counties:results}});\n        dispatch({type: 'SET_COUNTIES_VOTING_LOADING', payload:false});\n    }\n}\n\nexport async function fetchGAVotingData(dispatch, getState) {\n    dispatch({type: 'SET_VOTING_LOADING', payload:true});\n    const gaVoting = await axios.get('ga-detail.xml');\n    let parser = new xml2js.Parser()\n    let result = await parser.parseStringPromise(gaVoting.data);\n    const votes = result.ElectionResult.Contest.find((contest)=> contest.$.key==='5000').Choice;\n    const trump = votes.find( c => c.$.key === '1');\n    const biden = votes.find( c => c.$.key === '2');\n    const jorgensen = votes.find( c => c.$.key === '3');\n    const reducer = (accumulator, currentValue, candidate) => {\n        currentValue.County.forEach(county => {\n            const name = county.$.name;\n            let match = accumulator.find( c => c.name === name);\n            if(match === undefined){\n                let tmp={name};\n                tmp[candidate] = +county.$.votes;\n                accumulator.push(tmp);\n            }else{\n                if (match[candidate]) {\n                    match[candidate] += +county.$.votes;\n                }else{\n                    match[candidate] = +county.$.votes;\n                }\n            }\n        })\n        return accumulator;\n    };\n    let counties = trump.VoteType.reduce(\n        (accumulator, currentValue) => reducer(accumulator,currentValue,'trump')\n        ,[]\n        );\n    counties = biden.VoteType.reduce(\n        (accumulator, currentValue) => reducer(accumulator,currentValue,'biden')\n        ,counties\n    );\n    counties = jorgensen.VoteType.reduce(\n        (accumulator, currentValue) =>  reducer(accumulator,currentValue,'jorgensen')\n        ,counties\n    );\n    let res={\n        total: +trump.$.totalVotes + +biden.$.totalVotes + +jorgensen.$.totalVotes,\n        trumpTotal: +trump.$.totalVotes,\n        bidenTotal: +biden.$.totalVotes,\n        jorgensenTotal: +jorgensen.$.totalVotes,\n        counties\n    }\n    dispatch({type: 'SET_GA_DATA',payload:res});\n    dispatch({type: 'SET_VOTING_LOADING', payload:false});\n}\n\nexport default votingData;","import boundaries from './boundaries';\nimport mapParams from './mapParams';\nimport covidData from './covidData';\nimport {combineReducers} from 'redux';\nimport votingData from './votingData';\n\nconst rootReducer = combineReducers({\n  boundaries,\n  mapParams,\n  covidData,\n  votingData,\n})\nexport default rootReducer;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, {Component, memo} from 'react';\nimport {Geographies, Geography} from \"react-simple-maps\";\nimport {scaleLinear, scaleThreshold, scaleLog} from 'd3-scale';\nimport * as d3 from 'd3';\nimport counties from '../data/counties-10m.json';\n\nconst Counties = ({stateVotingData, gaVotingData, focusedStateId, setTooltip}) => {\n    const countyVotingData = stateVotingData.counties\n    let sorted = [...countyVotingData].sort((a, b) => a.totalVotes - b.totalVotes);\n    const voteOpScale = scaleLog().domain([sorted[0].totalVotes, sorted[sorted.length - 1].totalVotes]).range([0, 1]);\n    return (\n        <Geographies geography={counties}>\n            {({geographies, projection, path}) => {\n\n                const focused = geographies.filter(geo => {\n                    return geo.id.substring(0, 2) === focusedStateId\n                });\n                return (\n                    <>\n                        {focused.map(geo => {\n                            const {name} = geo.properties;\n                            const countyData = stateVotingData.counties ? stateVotingData.counties.find(county => county.id === geo.id) : undefined;\n                            const bidenResult = countyData ? countyData.candidates.find(c => c.id === 1036) : {};\n                            const trumpResult = countyData ? countyData.candidates.find(c => c.id !== 1036) : {};\n                            const total = bidenResult.votes + trumpResult.votes\n                            const voteRatio = bidenResult.id ? bidenResult.votes / total : 0;\n                            return (\n                                <Geography\n                                    key={geo.rsmKey}\n                                    stroke=\"#000\"\n                                    geography={geo}\n                                    fill={countyData ? d3.color(voteRatio >= .5 ? '#00F' : '#F00').copy({opacity: voteOpScale(total)}) : \"#DDD\"}\n                                    onMouseEnter={() => {\n                                        setTooltip(<>\n                                            <div>County: {name}</div>\n                                            <div>Total Votes: {bidenResult.votes + trumpResult.votes}</div>\n                                            <div>Joe Biden: {bidenResult.votes}</div>\n                                            <div>Donald Trump: {trumpResult.votes}</div>\n                                        </>);\n                                    }}\n                                    onMouseLeave={() => {\n                                        setTooltip('');\n                                    }}\n                                    style={{\n                                        default: {\n                                            stroke: \"#FFFFFF\",\n                                            strokeWidth: 0.1,\n                                            outline: \"none\",\n                                        },\n                                        hover: {\n                                            fill: \"#CFD8DC\",\n                                            stroke: \"#607D8B\",\n                                            strokeWidth: 0.2,\n                                            outline: \"none\",\n                                        },\n                                    }}\n                                />\n                            )\n                        })\n                        }\n                    </>\n                )\n            }}\n        </Geographies>\n    );\n}\nexport default memo(Counties);\n","import React,{memo} from 'react';\nimport {Annotation, ComposableMap, Geographies, Geography, Marker, ZoomableGroup} from 'react-simple-maps';\nimport Counties from './Counties';\nimport { geoCentroid } from 'd3-geo';\nimport allStates from '../data/allstates.json';\nimport statesBoundaries from '../data/states-10m.json';\n\nimport { scaleLog } from 'd3-scale';\nimport * as d3 from 'd3';\n\nconst USMap = ({center,zoom,usCovidData,isLoadingCounties,covidData,fetchStateVotingData,gaVotingData,nationalVotingData,focusedStateId,doZoom,setFocusedState,setTooltip}) =>{\n  async function handleStateClick(geo,projection,path,stateAbbr){\n    const center = projection.invert(path.centroid(geo));\n    fetchStateVotingData(stateAbbr);\n    doZoom({center,zoom:zoom>4?zoom:4,focusedStateId:geo.id});\n  }\n  function handleMove(event,zoomEvent){\n    const {zoom} = event;\n    if (zoom < 4){\n      doZoom({center:event.coordinates,zoom,focusedStateId:'0'});\n    }else{\n      doZoom({center:event.coordinates,zoom,focusedStateId});\n    }\n  }\n  const offsets = {\n    VT: [50, -8],\n    NH: [34, 2],\n    MA: [30, -1],\n    RI: [28, 2],\n    CT: [35, 10],\n    NJ: [34, 1],\n    DE: [33, 0],\n    MD: [47, 10],\n    DC: [49, 21]\n  };\n\n  let sorted=[...nationalVotingData].sort( (a,b) =>\n      a.totalVotes - b.totalVotes\n  );\n  const voteOpScale = scaleLog().domain([sorted[0].totalVotes,sorted[sorted.length-2].totalVotes]).range([0,1]);\n  return (\n      <ComposableMap data-tip='' projection=\"geoAlbersUsa\" style=\n    {{border:'1px black solid', width:'90%', height:'600px'}}>\n        <ZoomableGroup center={center} zoom={zoom} onMoveEnd={handleMove}>\n          <Geographies\n              geography={statesBoundaries}\n          >\n\n            {({ geographies,projection,path }) =>{\n              const usMap=geographies.map(geo => {\n                const stateResult = nationalVotingData.find( s => s.id === geo.id);\n                const bidenResult = stateResult? stateResult.candidates.find( c => c.id === 1036  ): {};\n                const trumpResult = stateResult? stateResult.candidates.find( c => c.id !== 1036  ): {};\n                const total =bidenResult.votes+trumpResult.votes\n                const voteRatio = bidenResult.id ? bidenResult.votes/total :0;\n                return (\n                    <Geography\n                        key={geo.rsmKey}\n                        stroke=\"#000\"\n                        geography={geo}\n                        fill={!(!stateResult || focusedStateId ==geo.id)? d3.color(voteRatio>=.5? '#00F':'#F00').copy({opacity:voteOpScale(total)}) :\"#DDD\"}\n                        onMouseEnter={() => {\n                          const { name } = geo.properties;\n                          setTooltip(<div>\n                            <div>{name}</div>\n                            <div>Total votes: {stateResult.totalVotes}</div>\n                            <div>Biden: {bidenResult.votes}</div>\n                            <div>Trump: {trumpResult.votes}</div>\n                          </div>);\n                        }}\n                        onMouseLeave={() => {\n                          setTooltip('');\n                        }}\n                        onClick={() => handleStateClick(geo, projection, path,stateResult.state)}\n                        style={{\n                          default: {\n                            stroke: \"#000\",\n                            strokeWidth: 0.5 / zoom,\n                            outline: \"none\",\n                          },\n                          hover: {\n                            fill: \"#CFD8DC\",\n                            stroke: \"#607D8B\",\n                            strokeWidth: 1 / zoom,\n                            outline: \"none\",\n                          },\n                        }}\n                    />)\n              });\n\n              const labels=geographies.map(geo => {\n                const centroid = geoCentroid(geo);\n                const cur = allStates.find(s => s.val === geo.id);\n                return (\n                    <g key={geo.rsmKey + \"-name\"}>\n                      {cur &&\n                      centroid[0] > -160 &&\n                      centroid[0] < -67 &&\n                      (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n                          <Marker coordinates={centroid}>\n                            <text y=\"2\" fontSize={14} textAnchor=\"middle\">\n                              {cur.id}\n                            </text>\n                          </Marker>\n                      ) : (\n                          <Annotation\n                              subject={centroid}\n                              dx={offsets[cur.id][0]}\n                              dy={offsets[cur.id][1]}\n                          >\n                            <text x={4} fontSize={14} alignmentBaseline=\"middle\">\n                              {cur.id}\n                            </text>\n                          </Annotation>\n                      ))}\n                    </g>\n                );\n              });\n              return <>\n                {usMap}\n                {/*{labels}*/}\n              </>\n            }\n          }\n          </Geographies>\n          { +focusedStateId > 0 && !isLoadingCounties?\n            <Counties covidData={covidData} stateVotingData={nationalVotingData.find(data => data.id === focusedStateId)} gaVotingData={gaVotingData} setTooltip={setTooltip} focusedStateId={focusedStateId}/>:null\n          }\n        </ZoomableGroup>\n      </ComposableMap>\n  );\n}\n\nexport default memo(USMap);\n","import USMap from '../component/USMap';\nimport {connect} from 'react-redux';\nimport {setCenter,setZoom,setFocusedState,doZoom,setTooltip} from '../actions/actions';\nimport {fetchStateVotingData} from \"../reducers/votingData\";\n\nconst mapStateToProps = state =>{\n  const {zoom,center,focusedStateId} = state.mapParams;\n  return {\n    zoom,\n    center,\n    focusedStateId,\n    isLoadingCounties: state.votingData.isLoadingCounties,\n    gaVotingData: state.votingData.ga,\n    usCovidData: state.covidData.us,\n    covidData: state.covidData.ma,\n    nationalVotingData : state.votingData.us,\n  };\n}\n\nconst mapDispatchToProps = dispatch =>{\n  return {\n    setCenter:(center)=>{\n      dispatch(setCenter(center));\n    },\n    setZoom:(zoom)=>{\n      dispatch(setZoom(zoom));\n    },\n    setFocusedState:(id)=>{\n      dispatch(setFocusedState(id));\n    },\n    doZoom(payload){\n      dispatch(doZoom(payload));\n    },\n    setTooltip(payload){\n      dispatch(setTooltip(payload));\n    },\n    fetchStateVotingData(stateAbbr){\n      dispatch(fetchStateVotingData(stateAbbr));\n    }\n  };\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(USMap);\n","import {applyMiddleware,createStore} from 'redux';\nimport rootReducer from './reducers/store';\nimport thunkMiddleware from 'redux-thunk';\n\nexport default function configureStore(preloadedState){\n\n  return createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(thunkMiddleware)\n  );\n}\n","import {SET_ZOOM,SET_TOOLTIP,SET_CENTER,SET_FOCUSED_STATE_ID,ZOOM} from '../constants/action_constants';\n\nexport function setZoom(zoom){\n  return {type: SET_ZOOM, payload:zoom}\n}\nexport function setCenter(center){\n  return {type: SET_CENTER, payload:center}\n}\nexport function setFocusedState(id){\n  return {type: SET_FOCUSED_STATE_ID, payload:id}\n}\nexport function doZoom(payload){\n  return {type: ZOOM, payload}\n}\nexport function setTooltip(payload){\n  return {type: SET_TOOLTIP, payload}\n}\n","import React,{PureComponent} from 'react';\nimport USMapContainer from './USMapContainer';\nimport {connect} from 'react-redux';\nimport ReactTooltip from 'react-tooltip';\n\nclass Main extends PureComponent{\n  render(){\n    const {tooltip,isLoading}=this.props;\n\n    if(isLoading){\n        return 'Loading';\n    }\n\n    return(\n      <div>\n        <div>\n          <h1>US Map</h1>\n        </div>\n        <div>\n            Source code: <a href=\"https://github.com/harryphan/us-district-map\">Github</a>\n            Data source: <a href=\"https://results.enr.clarityelections.com/GA/105369/web.264614/#/access-to-races\">Georgia Sec of State</a>\n        </div>\n        <div style={{padding:'5'}}>\n            <USMapContainer/>\n            <ReactTooltip>{tooltip}</ReactTooltip>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state =>{\n  return {\n    tooltip:state.mapParams.tooltip,\n    isLoading:state.votingData.isLoading\n  };\n}\n\n\n\nexport default connect(mapStateToProps)(Main);\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport configureStore from './configureStore';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Main from './containers/Main';\r\nimport {fetchBoundaries} from \"./reducers/boundaries\";\r\nimport {fetchCovidData} from \"./reducers/covidData\";\r\nimport {fetchGAVotingData, fetchNationalVotingData} from \"./reducers/votingData\";\r\n\r\nconst store = configureStore();\r\n//store.dispatch(fetchCovidData);\r\nstore.dispatch(fetchNationalVotingData);\r\n//store.dispatch(fetchStateLabelsData);\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Main />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}