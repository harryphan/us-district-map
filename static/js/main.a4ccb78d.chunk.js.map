{"version":3,"sources":["constants/action_constants.js","reducers/boundaries.js","reducers/mapParams.js","reducers/covidData.js","reducers/votingData.js","reducers/store.js","serviceWorker.js","component/Counties.js","component/CNNVotingDataContext.js","component/VotingCountiesLayer.js","component/Cities.js","component/AllCounties.js","component/USMap.js","actions/actions.js","containers/USMapContainer.js","configureStore.js","containers/Main.js","index.js"],"names":["LOAD_STATES","LOAD_COUNTIES","LOAD_COVID","LOAD_US_COVID","SET_ZOOM","SET_CENTER","SET_FOCUSED_STATE_ID","ZOOM","SET_TOOLTIP","initialState","states","counties","isLoading","boundaries","state","action","produce","draft","payload","type","center","zoom","focusedStateId","tooltip","mapParams","us","ma","covidData","isLoadingCounties","dispatch","getState","a","axios","get","data","forEach","stateResult","result","id","stateFipsCode","stateAbbreviation","totalVotes","totalVote","candidates","map","candidate","candidateId","name","fullName","votes","voteNum","allStates","st","url","results","county","reduce","acc","current","countyName","countyFipsCode","stateAbbr","votingData","ga","index","findIndex","s","push","holder","find","rootReducer","combineReducers","Boolean","window","location","hostname","match","Counties","countyBoundary","setTooltip","geo","properties","stroke","geography","fill","onMouseEnter","onMouseLeave","style","default","strokeWidth","outline","hover","rsmKey","memo","CNNVotingDataContext","nationalVotingData","this","_nationalVotingData","sorted","sort","b","voteOpScale","scaleLinear","domain","length","range","tmpOpScale","scaleLog","_currentState","_bidenResult","_trumpResult","_total","_voteRatio","c","sortedCounties","voteCountyOpScale","_currentCounty","_bidenCountyResult","_trumpCountyResult","_countyTotal","_countyVoteRatio","d3","copy","opacity","VotingCountiesLayer","votingDataContext","selectCurrentCountyById","countyColor","getCountyColor","countyTooltip","getCountyTooltip","Cities","topCities","cities","slice","latitude","longitude","city","coordinates","r","textAnchor","x","y","fontSize","fontFamily","AllCounties","geographies","usMap","projection","path","stateId","substr","selectCurrentStateById","undefined","USMap","handleMove","handleStateClick","data-tip","border","width","height","onMoveEnd","event","zoomEvent","focused","filter","substring","countyLayer","votingCountyLayer","doZoom","preloadedState","connect","gaVotingData","usCovidData","setCenter","setFocusedState","invert","centroid","fetchStateVotingData","Main","props","href","padding","USMapContainer","PureComponent","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a4ccb78d.chunk.js","sourcesContent":["export const LOAD_STATES='LOAD_STATES';\nexport const LOAD_COUNTIES='LOAD_COUNTIES';\nexport const LOAD_COVID='LOAD_COVID';\nexport const LOAD_US_COVID='LOAD_US_COVID';\nexport const SET_ZOOM='SET_ZOOM';\nexport const SET_CENTER='SET_CENTER';\nexport const SET_FOCUSED_STATE_ID='SET_FOCUSED_STATE_ID';\nexport const ZOOM='ZOOM';\nexport const SET_TOOLTIP='SET_TOOLTIP';\n","import produce from 'immer';\nimport {LOAD_STATES,LOAD_COUNTIES} from '../constants/action_constants';\nimport axios from \"axios\";\nlet initialState={\n  states:null,\n  counties:null,\n  isLoading:false\n};\n\nconst boundaries = (state=initialState, action) =>{\n  return produce( state, draft =>{\n    const {payload} = action;\n    switch (action.type) {\n      case LOAD_STATES:\n        draft.states=payload;\n        break;\n      case LOAD_COUNTIES:\n        draft.counties=payload;\n        break;\n      case 'SET_BOUNDARIES_LOADING':\n        draft.isLoading=payload;\n        break;\n      default:\n        return;\n    }\n  })\n}\nexport async function fetchBoundaries(dispatch, getState) {\n  dispatch({ type: 'SET_BOUNDARIES_LOADING', payload: true })\n  const states = await axios.get('states-10m.json')\n  dispatch({ type: LOAD_STATES, payload: states.data })\n  const counties = await axios.get('counties-10m.json')\n  dispatch({ type: LOAD_COUNTIES, payload: counties.data })\n  dispatch({ type: 'SET_BOUNDARIES_LOADING', payload: false })\n}\n\nexport default boundaries;\n","import produce from 'immer';\nimport {SET_CENTER,SET_ZOOM,SET_TOOLTIP,SET_FOCUSED_STATE_ID,ZOOM} from '../constants/action_constants';\nlet initialState={\n  center:[0,0],\n  zoom:1,\n  focusedStateId:0,\n  // center:[-83.43523233606125, 32.63933616159129],\n  // zoom:4,\n  // focusedStateId:13,\n  tooltip:'',\n};\n\nconst mapParams = (state=initialState, action) =>{\n  return produce( state, draft =>{\n    const {payload} = action;\n    switch (action.type) {\n      case SET_CENTER:\n        draft.center=payload;\n        break;\n      case SET_ZOOM:\n        draft.zoom=payload;\n        break;\n      case SET_FOCUSED_STATE_ID:\n        draft.focusedStateId = payload;\n        break;\n      case SET_TOOLTIP:\n        draft.tooltip = payload;\n        break;\n      case ZOOM:\n        return {...payload};\n      default:\n        return;\n    }\n  })\n}\n\nexport default mapParams;\n","import produce from 'immer';\nimport { LOAD_COVID, LOAD_US_COVID} from '../constants/action_constants';\nimport { csvParse } from 'd3-dsv';\nimport axios from 'axios';\n\nlet initialState={\n  us:[],\n  ma:[],\n  isLoading:false\n};\n\nconst covidData = (state=initialState, action) =>{\n  return produce( state, draft =>{\n    const {payload} = action;\n    switch (action.type) {\n      case LOAD_COVID:\n        draft.ma=payload;\n        break;\n      case LOAD_US_COVID:\n        draft.us=payload;\n        break;\n      case 'SET_COVID_LOADING':\n        draft.isLoading=payload;\n        break;\n      default:\n        return;\n    }\n  })\n}\n\nexport async function fetchCovidData(dispatch, getState) {\n  dispatch({type: 'SET_COVID_LOADING', payload:true});\n  const maCovid = await axios.get('covid.csv')\n  const ma = csvParse(maCovid.data);\n  dispatch({ type: LOAD_COVID, payload: ma })\n  const usCovid = await axios.get('us-covid.csv');\n  const us = csvParse(usCovid.data);\n  dispatch({ type: LOAD_US_COVID, payload: us });\n  dispatch({type: 'SET_COVID_LOADING', payload:false});\n}\n\nexport default covidData;\n","import produce from 'immer';\nimport axios from 'axios';\nimport xml2js from 'xml2js';\nimport allStates from '../data/allstates.json';\n\nlet initialState={\n    us:[],\n    isLoadingCounties:false,\n    isLoading:false,\n};\n\nconst votingData = (state=initialState, action) =>{\n    return produce( state, draft =>{\n        const {payload} = action;\n        switch (action.type) {\n            case 'SET_GA_DATA':\n                draft.ga=payload;\n                break;\n            case 'SET_STATE_LEVEL_RESULTS':\n                let index = draft.us.findIndex( s => s.state === payload.state);\n                if (index >= 0){\n                    draft.us[index] = payload;\n                }else{\n                    draft.us.push(payload);\n                }\n                break;\n            case 'SET_COUNTY_VOTING_DATA':\n                let holder = draft.us.find( s => s.state === payload.stateAbbr);\n                if(holder){\n                    holder.counties = payload.counties;\n                }\n                break;\n            case 'SET_VOTING_LOADING':\n                draft.isLoading=payload;\n                break;\n            case 'SET_COUNTIES_VOTING_LOADING':\n                draft.isLoadingCounties=payload;\n                break;\n            default:\n                return;\n        }\n    })\n}\nexport async function fetchNationalVotingData(dispatch,getState){\n    dispatch({type: 'SET_VOTING_LOADING', payload:true});\n    const nationalResults = await axios.get('https://politics-elex-results.data.api.cnn.io/results/view/2020-national-races-PG.json');\n    nationalResults.data.forEach( stateResult =>{\n        const result = { id: stateResult.stateFipsCode,state:stateResult.stateAbbreviation,totalVotes:stateResult.totalVote,candidates:stateResult.candidates.map( candidate => {return {id: candidate.candidateId,name: candidate.fullName, votes: candidate.voteNum}})}\n        dispatch({type: 'SET_STATE_LEVEL_RESULTS',payload: result});\n    });\n    dispatch({type: 'SET_VOTING_LOADING', payload:false});\n}\n\nexport function fetchStateVotingData(stateAbbr){\n    return async function fetchStateVotingDataThunk(dispatch, getState) {\n        dispatch({type: 'SET_COUNTIES_VOTING_LOADING', payload:true});\n        const url = `https://politics-elex-results.data.api.cnn.io/results/view/2020-county-races-PG-${stateAbbr}.json`\n        const counties = await axios.get(url);\n        const results= counties.data.map(county => {\n            const totalVotes=county.candidates.reduce((acc,current) => current.voteNum + acc,0);\n            return {name:county.countyName,id:county.countyFipsCode,totalVotes:totalVotes,candidates:county.candidates.map( candidate => {return {id: candidate.candidateId,name: candidate.fullName, votes: candidate.voteNum}})}\n        })\n        dispatch({type: 'SET_COUNTY_VOTING_DATA',payload:{stateAbbr,counties:results}});\n        dispatch({type: 'SET_COUNTIES_VOTING_LOADING', payload:false});\n    }\n}\nexport async function fetchAllVotingData(dispatch,getState){\n    dispatch({type: 'SET_COUNTIES_VOTING_LOADING', payload:true});\n    for(const st of allStates){\n        const url = `https://politics-elex-results.data.api.cnn.io/results/view/2020-county-races-PG-${st.id}.json`\n        const counties = await axios.get(url);\n        const results= counties.data.map(county => {\n            const totalVotes=county.candidates.reduce((acc,current) => current.voteNum + acc,0);\n            return {name:county.countyName,id:county.countyFipsCode,totalVotes:totalVotes,candidates:county.candidates.map( candidate => {return {id: candidate.candidateId,name: candidate.fullName, votes: candidate.voteNum}})}\n        })\n        dispatch({type: 'SET_COUNTY_VOTING_DATA',payload:{stateAbbr:st.id,counties:results}});\n    }\n    dispatch({type: 'SET_COUNTIES_VOTING_LOADING', payload:false});\n}\n\nexport async function fetchGAVotingData(dispatch, getState) {\n    dispatch({type: 'SET_VOTING_LOADING', payload:true});\n    const gaVoting = await axios.get('ga-detail.xml');\n    let parser = new xml2js.Parser()\n    let result = await parser.parseStringPromise(gaVoting.data);\n    const votes = result.ElectionResult.Contest.find((contest)=> contest.$.key==='5000').Choice;\n    const trump = votes.find( c => c.$.key === '1');\n    const biden = votes.find( c => c.$.key === '2');\n    const jorgensen = votes.find( c => c.$.key === '3');\n    const reducer = (accumulator, currentValue, candidate) => {\n        currentValue.County.forEach(county => {\n            const name = county.$.name;\n            let match = accumulator.find( c => c.name === name);\n            if(match === undefined){\n                let tmp={name};\n                tmp[candidate] = +county.$.votes;\n                accumulator.push(tmp);\n            }else{\n                if (match[candidate]) {\n                    match[candidate] += +county.$.votes;\n                }else{\n                    match[candidate] = +county.$.votes;\n                }\n            }\n        })\n        return accumulator;\n    };\n    let counties = trump.VoteType.reduce(\n        (accumulator, currentValue) => reducer(accumulator,currentValue,'trump')\n        ,[]\n        );\n    counties = biden.VoteType.reduce(\n        (accumulator, currentValue) => reducer(accumulator,currentValue,'biden')\n        ,counties\n    );\n    counties = jorgensen.VoteType.reduce(\n        (accumulator, currentValue) =>  reducer(accumulator,currentValue,'jorgensen')\n        ,counties\n    );\n    let res={\n        total: +trump.$.totalVotes + +biden.$.totalVotes + +jorgensen.$.totalVotes,\n        trumpTotal: +trump.$.totalVotes,\n        bidenTotal: +biden.$.totalVotes,\n        jorgensenTotal: +jorgensen.$.totalVotes,\n        counties\n    }\n    dispatch({type: 'SET_GA_DATA',payload:res});\n    dispatch({type: 'SET_VOTING_LOADING', payload:false});\n}\n\nexport default votingData;","import boundaries from './boundaries';\nimport mapParams from './mapParams';\nimport covidData from './covidData';\nimport {combineReducers} from 'redux';\nimport votingData from './votingData';\n\nconst rootReducer = combineReducers({\n  boundaries,\n  mapParams,\n  covidData,\n  votingData,\n})\nexport default rootReducer;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, {memo} from 'react';\nimport { Geography} from \"react-simple-maps\";\n\nconst Counties = ({countyBoundary, setTooltip}) => {\n    const tooltip = (name) =>( <div>County: {name}</div>);\n    return (\n        <>\n            {\n                countyBoundary.map(geo => {\n                    const {name} = geo.properties;\n                    return (\n                        <Geography\n                            key={geo.rsmKey}\n                            stroke=\"#000\"\n                            geography={geo}\n                            fill={\"#DDD\"}\n                            onMouseEnter={() => {\n                                setTooltip(tooltip(name));\n                            }}\n                            onMouseLeave={() => {\n                                setTooltip('');\n                            }}\n                            style={{\n                                default: {\n                                    stroke: \"#FFFFFF\",\n                                    strokeWidth: 0.1,\n                                    outline: \"none\",\n                                },\n                                hover: {\n                                    fill: \"#CFD8DC\",\n                                    stroke: \"#607D8B\",\n                                    strokeWidth: 0.2,\n                                    outline: \"none\",\n                                },\n                            }}\n                        />\n                    )\n                })\n            }\n        </>\n    )\n\n}\nexport default memo(Counties);\n","import React from 'react';\nimport * as d3 from 'd3';\nimport { scaleLinear,scaleLog,scaleRadial } from 'd3-scale';\n\nexport default class CNNVotingDataContext {\n    constructor(nationalVotingData) {\n        this._nationalVotingData = nationalVotingData;\n        let sorted=[...nationalVotingData].sort( (a,b) => a.totalVotes - b.totalVotes);\n        this.voteOpScale = scaleLinear().domain([sorted[0].totalVotes,sorted[sorted.length-2].totalVotes]).range([0,1]);\n        this.tmpOpScale = scaleLog().domain([4000,5000000]).range([0,1]);\n        this._currentState={};\n        this._bidenResult ={};\n        this._trumpResult={}\n        this._total={};\n        this._voteRatio={};\n    }\n    selectCurrentStateById(id){\n        this._currentState=this._nationalVotingData.find( s => s.id === id);\n        if(!this._currentState){\n            return undefined;\n        }\n        this._bidenResult = this._currentState? this._currentState.candidates.find( c => c.id === 1036  ): {};\n        this._trumpResult = this._currentState? this._currentState.candidates.find( c => c.id !== 1036  ): {};\n        this._total =this._bidenResult.votes+this._trumpResult.votes\n        this._voteRatio = this._bidenResult.id ? this._bidenResult.votes/this._total :0;\n        if (this._currentState && this._currentState.counties) {\n            let sortedCounties = [...this._currentState.counties].sort((a, b) => a.totalVotes - b.totalVotes);\n            this.voteCountyOpScale = scaleLinear().domain([sortedCounties[0].totalVotes, sortedCounties[sortedCounties.length - 1].totalVotes]).range([0, 1]);\n        }\n        return this._currentState;\n    }\n    selectCurrentCountyById(id){\n        if(!this._currentState.counties){\n            return undefined;\n        }\n        this._currentCounty=this._currentState.counties.find( county => county.id === id);\n        this._bidenCountyResult = this._currentCounty ?this._currentCounty.candidates.find( c => c.id === 1036  ): {}\n        this._trumpCountyResult = this._currentCounty? this._currentCounty.candidates.find( c => c.id !== 1036  ): {};\n        this._countyTotal =this._bidenCountyResult.votes+this._trumpCountyResult.votes\n        this._countyVoteRatio = this._bidenCountyResult.id ? this._bidenCountyResult.votes/this._countyTotal :0;\n        return this._currentCounty;\n    }\n    getTooltip(name){\n        return this._currentState?(<div>\n            <div>{name}</div>\n            <div>Total votes: {this._currentState.totalVotes}</div>\n            <div>Biden: {this._bidenResult.votes}</div>\n            <div>Trump: {this._trumpResult.votes}</div>\n        </div>):null;\n    }\n    getCountyTooltip(name){\n        return this._currentCounty?(\n            <>\n                <div>County: {name}</div>\n                <div>Total Votes: {this._currentCounty.totalVotes}</div>\n                <div>Joe Biden: {this._bidenCountyResult.votes}</div>\n                <div>Donald Trump: {this._trumpCountyResult.votes}</div>\n            </>\n        ):null;\n    }\n    getCountyColor(){\n        const countyColor= this._currentCounty ? d3.color(this._countyVoteRatio>=.5? '#00F':'#F00').copy({opacity:this.tmpOpScale(this._countyTotal)}):\"#DDD\";\n        return countyColor;\n    }\n    getStateColor(id,focusedStateId){\n        const stateColor=this._currentState && focusedStateId !==id ? d3.color(this._voteRatio>=.5? '#00F':'#F00').copy({opacity:this.voteOpScale(this._total)}) :\"#DDD\";\n        return stateColor;\n    }\n}","import React, { memo} from 'react';\nimport { Geography } from 'react-simple-maps';\n\nconst VotingCountiesLayer = ({countyBoundary,votingDataContext, focusedStateId, setTooltip}) => {\n    return (\n        <>\n            {countyBoundary.map(geo => {\n                const {name} = geo.properties;\n                votingDataContext.selectCurrentCountyById(geo.id);\n                const countyColor = votingDataContext.getCountyColor(focusedStateId);\n                const countyTooltip = votingDataContext.getCountyTooltip(name);\n                return (\n                    <Geography\n                        key={geo.rsmKey}\n                        stroke=\"#000\"\n                        geography={geo}\n                        fill={countyColor}\n                        onMouseEnter={() => {\n                            setTooltip(countyTooltip);\n                        }}\n                        onMouseLeave={() => {\n                            setTooltip('');\n                        }}\n                        style={{\n                            default: {\n                                stroke: \"#FFFFFF\",\n                                strokeWidth: 0.1,\n                                outline: \"none\",\n                            },\n                            hover: {\n                                fill: \"#CFD8DC\",\n                                stroke: \"#607D8B\",\n                                strokeWidth: 0.2,\n                                outline: \"none\",\n                            },\n                        }}\n                    />\n                )\n            })\n            }\n        </>\n    )\n}\nexport default memo(VotingCountiesLayer);\n","import cities from '../data/cities.json';\nimport {Marker} from 'react-simple-maps';\nimport React from 'react';\n\n\nconst Cities = ({zoom}) =>{\n    const topCities = cities.slice(0,7*zoom);\n    return(\n        <>\n            {\n                topCities.map( ({latitude,longitude,city},index) => {\n                    return <Marker key={index} coordinates={[longitude,latitude]}>\n                        <circle r={5/zoom} fill=\"#000\" strokeWidth={0} stroke={\"#FFF\"}\n                                strokeWidth={.5/zoom} />\n                        <text\n                            textAnchor=\"start\"\n                            x={10/zoom}\n                            y={6/zoom}\n                            fontSize={20/zoom}\n                            fontFamily='system-ui'\n                            fill={\"#000\"}\n                            stroke={\"#FFF\"}\n                            strokeWidth={.5/zoom}\n                        >\n                            {city}\n                        </text>\n                    </Marker>\n                })\n            }\n        </>\n    );\n}\n\nexport default Cities;","import {Geographies, Geography} from \"react-simple-maps\";\nimport React from \"react\";\nimport counties from '../data/counties-10m.json'\n\nconst AllCounties = ({setTooltip,zoom,votingDataContext}) =>{\n    return(\n        <Geographies geography={counties}>\n            {({ geographies,projection,path }) =>{\n                const usMap=geographies.map(geo => {\n                    const stateId=geo.id.substr(0,2);\n                    let stat = votingDataContext.selectCurrentStateById(stateId);\n                    let county = stat?votingDataContext.selectCurrentCountyById(geo.id):undefined;\n                    const countyColor = county?votingDataContext.getCountyColor(geo.id):'#FFF';\n                    const countyTooltip = county?votingDataContext.getCountyTooltip(geo.properties.name):<div>{geo.properties.name}</div>;\n                    return (\n                        <Geography\n                            key={geo.rsmKey}\n                            stroke=\"#000\"\n                            geography={geo}\n                            fill={countyColor}\n                            onMouseEnter={() => {\n                                setTooltip(countyTooltip);\n                            }}\n                            onMouseLeave={() => {\n                                setTooltip('');\n                            }}\n                            style={{\n                                default: {\n                                    stroke: \"#000\",\n                                    strokeWidth: 0.5 / zoom,\n                                    outline: \"none\",\n                                },\n                                hover: {\n                                    fill: \"#CFD8DC\",\n                                    stroke: \"#607D8B\",\n                                    strokeWidth: 1 / zoom,\n                                    outline: \"none\",\n                                },\n                            }}\n                        />)\n                });\n                return <>\n                    {usMap}\n                </>\n            }\n            }\n        </Geographies>\n    );\n}\n\nexport default AllCounties;","import React,{memo} from 'react';\nimport {ComposableMap, Geographies, Geography, Marker, ZoomableGroup} from 'react-simple-maps';\nimport Counties from './Counties';\nimport statesBoundaries from '../data/states-10m.json';\nimport VotingLayer from './VotingLayer';\nimport Labels from './Labels';\nimport counties from '../data/counties-10m.json';\nimport CNNVotingDataContext from './CNNVotingDataContext';\nimport VotingCountiesLayer from './VotingCountiesLayer';\nimport Cities from \"./Cities\";\nimport cities from \"../data/cities.json\";\nimport AllCounties from \"./AllCounties\";\n\nconst USMap = ({center,zoom,handleStateClick,handleMove,isLoadingCounties,nationalVotingData,focusedStateId,setTooltip}) =>{\n    const votingDataContext= new CNNVotingDataContext(nationalVotingData);\n    const stuff=[\n        {\n            \"city\": \"New York\",\n            \"growth_from_2000_to_2013\": \"4.8%\",\n            \"latitude\": 40.7127837,\n            \"longitude\": -74.0059413,\n            \"population\": \"8405837\",\n            \"rank\": \"1\",\n            \"state\": \"New York\"\n        },\n        {\n            \"city\": \"Los Angeles\",\n            \"growth_from_2000_to_2013\": \"4.8%\",\n            \"latitude\": 34.0522342,\n            \"longitude\": -118.2436849,\n            \"population\": \"3884307\",\n            \"rank\": \"2\",\n            \"state\": \"California\"\n        }];\n  return (\n      <ComposableMap data-tip='' projection=\"geoAlbersUsa\" style={{border:'1px black solid', width:'90%', height:'600px'}}>\n        <ZoomableGroup center={center} zoom={zoom} onMoveEnd={(event,zoomEvent)=>handleMove(event,focusedStateId)}>\n          {/*<Geographies geography={statesBoundaries}>*/}\n          {/*  {({ geographies,projection,path }) =>{*/}\n          {/*    const usMap=geographies.map(geo => {*/}\n          {/*      return (*/}\n          {/*          <Geography*/}\n          {/*              key={geo.rsmKey}*/}\n          {/*              stroke=\"#000\"*/}\n          {/*              geography={geo}*/}\n          {/*              fill={\"#FFF\"}*/}\n          {/*              onMouseEnter={() => {*/}\n          {/*                setTooltip(<div>{geo.properties.name}</div>);*/}\n          {/*              }}*/}\n          {/*              onMouseLeave={() => {*/}\n          {/*                setTooltip('');*/}\n          {/*              }}*/}\n          {/*              style={{*/}\n          {/*                default: {*/}\n          {/*                  stroke: \"#000\",*/}\n          {/*                  strokeWidth: 0.5 / zoom,*/}\n          {/*                  outline: \"none\",*/}\n          {/*                },*/}\n          {/*                hover: {*/}\n          {/*                  fill: \"#CFD8DC\",*/}\n          {/*                  stroke: \"#607D8B\",*/}\n          {/*                  strokeWidth: 1 / zoom,*/}\n          {/*                  outline: \"none\",*/}\n          {/*                },*/}\n          {/*              }}*/}\n          {/*          />)*/}\n          {/*    });*/}\n          {/*    return <>*/}\n          {/*      {usMap}*/}\n          {/*    </>*/}\n          {/*  }*/}\n          {/*}*/}\n          {/*</Geographies>*/}\n          <AllCounties setTooltip={setTooltip} zoom={zoom} votingDataContext={votingDataContext}/>\n          {/*<VotingLayer votingDataContext={votingDataContext} focusedStateId={focusedStateId} setTooltip={setTooltip} handleStateClick={handleStateClick} zoom={zoom}/>*/}\n          {/*<Labels />*/}\n\n          { +focusedStateId > 0 && !isLoadingCounties ?\n              <Geographies geography={counties}>\n                  {\n                      ({geographies, projection, path}) => {\n                          votingDataContext.selectCurrentStateById(focusedStateId);\n                          const focused = geographies.filter(geo => {\n                              return geo.id.substring(0, 2) === focusedStateId\n                          });\n                          const countyLayer = <Counties countyBoundary={focused} setTooltip={setTooltip}/>;\n                          const votingCountyLayer=<VotingCountiesLayer countyBoundary={focused} votingDataContext={votingDataContext} setTooltip={setTooltip}/>;\n                          return (\n                              <>\n                                  {countyLayer}\n                                  {votingCountyLayer}\n                              </>\n                          );\n                      }\n                  }\n              </Geographies>\n            : null\n          }\n          <Cities zoom={zoom} />\n        </ZoomableGroup>\n      </ComposableMap>\n  );\n}\n\nexport default memo(USMap);\n","import {SET_ZOOM,SET_TOOLTIP,SET_CENTER,SET_FOCUSED_STATE_ID,ZOOM} from '../constants/action_constants';\n\nexport function setZoom(zoom){\n  return {type: SET_ZOOM, payload:zoom}\n}\nexport function setCenter(center){\n  return {type: SET_CENTER, payload:center}\n}\nexport function setFocusedState(id){\n  return {type: SET_FOCUSED_STATE_ID, payload:id}\n}\nexport function doZoom(payload){\n  return {type: ZOOM, payload}\n}\nexport function setTooltip(payload){\n  return {type: SET_TOOLTIP, payload}\n}\n","import USMap from '../component/USMap';\nimport {connect} from 'react-redux';\nimport {setCenter,setZoom,setFocusedState,doZoom,setTooltip} from '../actions/actions';\nimport {fetchStateVotingData} from \"../reducers/votingData\";\n\nconst mapStateToProps = state =>{\n  const {zoom,center,focusedStateId} = state.mapParams;\n  return {\n    zoom,\n    center,\n    focusedStateId,\n    isLoadingCounties: state.votingData.isLoadingCounties,\n    gaVotingData: state.votingData.ga,\n    usCovidData: state.covidData.us,\n    covidData: state.covidData.ma,\n    nationalVotingData : state.votingData.us,\n  };\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n  return {\n    setCenter:(center)=>{\n      dispatch(setCenter(center));\n    },\n    setFocusedState:(id)=>{\n      dispatch(setFocusedState(id));\n    },\n    setTooltip(payload){\n      dispatch(setTooltip(payload));\n    },\n    handleMove(event,focusedStateId){\n      const {zoom,coordinates} = event;\n      dispatch(doZoom({center:coordinates,zoom,focusedStateId : zoom < 4 ? '0' : focusedStateId}));\n    },\n    handleStateClick(geo,projection,path,stateAbbr,zoom){\n      const center = projection.invert(path.centroid(geo));\n      dispatch(fetchStateVotingData(stateAbbr));\n      dispatch(doZoom({center,zoom:zoom>4?zoom:4,focusedStateId:geo.id}));\n    }\n  };\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(USMap);\n","import {applyMiddleware,createStore} from 'redux';\nimport rootReducer from './reducers/store';\nimport thunkMiddleware from 'redux-thunk';\n\nexport default function configureStore(preloadedState){\n\n  return createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(thunkMiddleware)\n  );\n}\n","import React,{PureComponent} from 'react';\nimport USMapContainer from './USMapContainer';\nimport {connect} from 'react-redux';\nimport ReactTooltip from 'react-tooltip';\n\nclass Main extends PureComponent{\n  render(){\n    const {tooltip,isLoading}=this.props;\n\n    if(isLoading){\n        return 'Loading';\n    }\n\n    return(\n      <div>\n        <div>\n          <h1>US Map</h1>\n        </div>\n        <div>\n            Source code: <a href=\"https://github.com/harryphan/us-district-map\">Github</a>\n            Data source: <a href=\"https://results.enr.clarityelections.com/GA/105369/web.264614/#/access-to-races\">Georgia Sec of State</a>\n        </div>\n        <div style={{padding:'5'}}>\n            <USMapContainer/>\n            <ReactTooltip>{tooltip}</ReactTooltip>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state =>{\n  return {\n    tooltip:state.mapParams.tooltip,\n    isLoading:state.votingData.isLoading || state.votingData.isLoadingCounties,\n  };\n}\n\n\n\nexport default connect(mapStateToProps)(Main);\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport configureStore from './configureStore';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Main from './containers/Main';\r\nimport allStates from './data/allstates.json';\r\nimport {fetchAllVotingData, fetchNationalVotingData} from \"./reducers/votingData\";\r\n\r\nconst store = configureStore();\r\n\r\nstore.dispatch(fetchNationalVotingData);\r\nstore.dispatch(fetchAllVotingData);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Main />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}