{"version":3,"sources":["constants/action_constants.js","reducers/boundaries.js","reducers/mapParams.js","reducers/covidData.js","reducers/votingData.js","reducers/store.js","serviceWorker.js","component/CNNVotingDataContext.js","component/AllCounties.js","component/USMap.js","actions/actions.js","containers/USMapContainer.js","configureStore.js","containers/Main.js","index.js"],"names":["LOAD_STATES","LOAD_COUNTIES","LOAD_COVID","LOAD_US_COVID","SET_ZOOM","SET_CENTER","SET_FOCUSED_STATE_ID","ZOOM","SET_TOOLTIP","initialState","states","counties","isLoading","boundaries","state","action","produce","draft","payload","type","center","zoom","focusedStateId","tooltip","mapParams","us","ma","covidData","isLoadingCounties","applyMissingCounties","dispatch","getState","a","key","AK","biden","trump","ME","NH","VT","MA","CT","RI","forEach","s","id","races","stateFips","stateAbbr","allStates","find","val","map","countyFips","candidates","candidateID","cs","votes","vote","push","totalVotes","axios","get","data","stateResult","result","stateFipsCode","stateAbbreviation","totalVote","candidate","candidateId","name","fullName","voteNum","stuff","filtered","filter","n","includes","st","url","results","county","reduce","acc","current","countyName","countyFipsCode","votingData","ga","index","findIndex","holder","rootReducer","combineReducers","Boolean","window","location","hostname","match","CNNVotingDataContext","nationalVotingData","this","_nationalVotingData","sorted","sort","b","voteOpScale","scaleLinear","domain","length","range","tmpOpScale","scaleLog","_currentState","_bidenResult","_trumpResult","_total","_voteRatio","c","sortedCounties","voteCountyOpScale","_currentCounty","_bidenCountyResult","_trumpCountyResult","_countyTotal","_countyVoteRatio","d3","copy","opacity","AllCounties","setTooltip","votingDataContext","geography","geographies","usMap","projection","path","geo","stateId","substr","selectCurrentStateById","selectCurrentCountyById","undefined","countyColor","getCountyColor","countyTooltip","getCountyTooltip","properties","stroke","fill","onMouseEnter","onMouseLeave","style","default","strokeWidth","outline","hover","rsmKey","USMap","handleMove","handleStateClick","data-tip","border","width","height","onMoveEnd","event","zoomEvent","memo","doZoom","preloadedState","connect","gaVotingData","usCovidData","setCenter","setFocusedState","coordinates","invert","centroid","fetchStateVotingData","Main","props","href","padding","USMapContainer","PureComponent","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.765e16cf.chunk.js","sourcesContent":["export const LOAD_STATES='LOAD_STATES';\nexport const LOAD_COUNTIES='LOAD_COUNTIES';\nexport const LOAD_COVID='LOAD_COVID';\nexport const LOAD_US_COVID='LOAD_US_COVID';\nexport const SET_ZOOM='SET_ZOOM';\nexport const SET_CENTER='SET_CENTER';\nexport const SET_FOCUSED_STATE_ID='SET_FOCUSED_STATE_ID';\nexport const ZOOM='ZOOM';\nexport const SET_TOOLTIP='SET_TOOLTIP';\n","import produce from 'immer';\nimport {LOAD_STATES,LOAD_COUNTIES} from '../constants/action_constants';\nimport axios from \"axios\";\nlet initialState={\n  states:null,\n  counties:null,\n  isLoading:false\n};\n\nconst boundaries = (state=initialState, action) =>{\n  return produce( state, draft =>{\n    const {payload} = action;\n    switch (action.type) {\n      case LOAD_STATES:\n        draft.states=payload;\n        break;\n      case LOAD_COUNTIES:\n        draft.counties=payload;\n        break;\n      case 'SET_BOUNDARIES_LOADING':\n        draft.isLoading=payload;\n        break;\n      default:\n        return;\n    }\n  })\n}\nexport async function fetchBoundaries(dispatch, getState) {\n  dispatch({ type: 'SET_BOUNDARIES_LOADING', payload: true })\n  const states = await axios.get('states-10m.json')\n  dispatch({ type: LOAD_STATES, payload: states.data })\n  const counties = await axios.get('counties-10m.json')\n  dispatch({ type: LOAD_COUNTIES, payload: counties.data })\n  dispatch({ type: 'SET_BOUNDARIES_LOADING', payload: false })\n}\n\nexport default boundaries;\n","import produce from 'immer';\nimport {SET_CENTER,SET_ZOOM,SET_TOOLTIP,SET_FOCUSED_STATE_ID,ZOOM} from '../constants/action_constants';\nlet initialState={\n  center:[0,0],\n  zoom:1,\n  focusedStateId:0,\n  // center:[-83.43523233606125, 32.63933616159129],\n  // zoom:4,\n  // focusedStateId:13,\n  tooltip:'',\n};\n\nconst mapParams = (state=initialState, action) =>{\n  return produce( state, draft =>{\n    const {payload} = action;\n    switch (action.type) {\n      case SET_CENTER:\n        draft.center=payload;\n        break;\n      case SET_ZOOM:\n        draft.zoom=payload;\n        break;\n      case SET_FOCUSED_STATE_ID:\n        draft.focusedStateId = payload;\n        break;\n      case SET_TOOLTIP:\n        draft.tooltip = payload;\n        break;\n      case ZOOM:\n        return {...payload};\n      default:\n        return;\n    }\n  })\n}\n\nexport default mapParams;\n","import produce from 'immer';\nimport { LOAD_COVID, LOAD_US_COVID} from '../constants/action_constants';\nimport { csvParse } from 'd3-dsv';\nimport axios from 'axios';\n\nlet initialState={\n  us:[],\n  ma:[],\n  isLoading:false\n};\n\nconst covidData = (state=initialState, action) =>{\n  return produce( state, draft =>{\n    const {payload} = action;\n    switch (action.type) {\n      case LOAD_COVID:\n        draft.ma=payload;\n        break;\n      case LOAD_US_COVID:\n        draft.us=payload;\n        break;\n      case 'SET_COVID_LOADING':\n        draft.isLoading=payload;\n        break;\n      default:\n        return;\n    }\n  })\n}\n\nexport async function fetchCovidData(dispatch, getState) {\n  dispatch({type: 'SET_COVID_LOADING', payload:true});\n  const maCovid = await axios.get('covid.csv')\n  const ma = csvParse(maCovid.data);\n  dispatch({ type: LOAD_COVID, payload: ma })\n  const usCovid = await axios.get('us-covid.csv');\n  const us = csvParse(usCovid.data);\n  dispatch({ type: LOAD_US_COVID, payload: us });\n  dispatch({type: 'SET_COVID_LOADING', payload:false});\n}\n\nexport default covidData;\n","import produce from 'immer';\nimport axios from 'axios';\nimport xml2js from 'xml2js';\nimport allStates from '../data/allstates.json';\nimport ME from '../data/ME-counties.json';\nimport VT from '../data/VT-counties.json';\nimport NH from '../data/NH-counties.json';\nimport MA from '../data/MA-counties.json';\nimport CT from '../data/CT-counties.json';\nimport RI from '../data/RI-counties.json';\n\nlet initialState={\n    us:[],\n    isLoadingCounties:false,\n    isLoading:false,\n};\n\nconst votingData = (state=initialState, action) =>{\n    return produce( state, draft =>{\n        const {payload} = action;\n        switch (action.type) {\n            case 'SET_GA_DATA':\n                draft.ga=payload;\n                break;\n            case 'SET_STATE_LEVEL_RESULTS':\n                let index = draft.us.findIndex( s => s.state === payload.state);\n                if (index >= 0){\n                    draft.us[index] = payload;\n                }else{\n                    draft.us.push(payload);\n                }\n                break;\n            case 'SET_COUNTY_VOTING_DATA':\n                let holder = draft.us.find( s => s.state === payload.stateAbbr);\n                if(holder){\n                    holder.counties = payload.counties;\n                }\n                break;\n            case 'SET_VOTING_LOADING':\n                draft.isLoading=payload;\n                break;\n            case 'SET_COUNTIES_VOTING_LOADING':\n                draft.isLoadingCounties=payload;\n                break;\n            default:\n                return;\n        }\n    })\n}\n\nexport async function applyMissingCounties(dispatch,getState){\n    const key={\n        AK:{biden:'7073',trump:'6638'},\n        ME:{biden:'30791',trump:'29633'},\n        NH:{biden:'49452',trump:'49453'},\n        VT:{biden:'53668',trump:'53669'},\n        MA:{biden:'35087',trump:'35088'},\n        CT:{biden:'21813',trump:'21816'},\n        RI:{biden:'46718',trump:'46719'},\n    };\n    [ME,NH,VT,MA,CT,RI].forEach( s =>{\n        const id = s.races[0].stateFips;\n        const stateAbbr= allStates.find(s => s.val === id).id;\n        let counties=[]\n        s.races.map(({countyFips,candidates})=>{\n            const biden= candidates.find(({candidateID}) => candidateID === key[stateAbbr].biden);\n            const trump = candidates.find(({candidateID}) => candidateID === key[stateAbbr].trump);\n            const cs=[{id:1036,votes:biden.vote},{id:8639,votes:trump.vote}];\n            counties.push({id: countyFips, totalVotes:biden.vote+trump.vote,candidates:cs});\n        });\n        dispatch({type: 'SET_COUNTY_VOTING_DATA',payload:{stateAbbr,counties:counties}});\n    });\n}\nexport async function fetchNationalVotingData(dispatch,getState){\n    dispatch({type: 'SET_VOTING_LOADING', payload:true});\n    const nationalResults = await axios.get('https://politics-elex-results.data.api.cnn.io/results/view/2020-national-races-PG.json');\n    nationalResults.data.forEach( stateResult =>{\n        const result = { id: stateResult.stateFipsCode,state:stateResult.stateAbbreviation,totalVotes:stateResult.totalVote,candidates:stateResult.candidates.map( candidate => {return {id: candidate.candidateId,name: candidate.fullName, votes: candidate.voteNum}})}\n        let counties=[];\n\n        dispatch({type: 'SET_STATE_LEVEL_RESULTS',payload: result});\n    });\n    dispatch(applyMissingCounties);\n    dispatch({type: 'SET_VOTING_LOADING', payload:false});\n}\n\nexport function fetchStateVotingData(stateAbbr){\n    return async function fetchStateVotingDataThunk(dispatch, getState) {\n        dispatch({type: 'SET_COUNTIES_VOTING_LOADING', payload:true});\n        const url = `https://politics-elex-results.data.api.cnn.io/results/view/2020-county-races-PG-${stateAbbr}.json`\n        const counties = await axios.get(url);\n        const results= counties.data.map(county => {\n            const totalVotes=county.candidates.reduce((acc,current) => current.voteNum + acc,0);\n            return {name:county.countyName,id:county.countyFipsCode,totalVotes:totalVotes,candidates:county.candidates.map( candidate => {return {id: candidate.candidateId,name: candidate.fullName, votes: candidate.voteNum}})}\n        })\n        dispatch({type: 'SET_COUNTY_VOTING_DATA',payload:{stateAbbr,counties:results}});\n        dispatch({type: 'SET_COUNTIES_VOTING_LOADING', payload:false});\n    }\n}\nexport async function fetchAllVotingData(dispatch,getState){\n    dispatch({type: 'SET_COUNTIES_VOTING_LOADING', payload:true});\n    const stuff=['ME','NH','VT','MA','CT','RI'];\n    const filtered=allStates.filter(n => !stuff.includes(n.id))\n    for(const st of filtered){\n        const url = `https://politics-elex-results.data.api.cnn.io/results/view/2020-county-races-PG-${st.id}.json`\n        const counties = await axios.get(url);\n        const results= counties.data.map(county => {\n            const totalVotes=county.candidates.reduce((acc,current) => current.voteNum + acc,0);\n            return {name:county.countyName,id:county.countyFipsCode,totalVotes:totalVotes,candidates:county.candidates.map( candidate => {return {id: candidate.candidateId,name: candidate.fullName, votes: candidate.voteNum}})}\n        })\n        dispatch({type: 'SET_COUNTY_VOTING_DATA',payload:{stateAbbr:st.id,counties:results}});\n    }\n    dispatch({type: 'SET_COUNTIES_VOTING_LOADING', payload:false});\n}\n\nexport async function fetchGAVotingData(dispatch, getState) {\n    dispatch({type: 'SET_VOTING_LOADING', payload:true});\n    const gaVoting = await axios.get('ga-detail.xml');\n    let parser = new xml2js.Parser()\n    let result = await parser.parseStringPromise(gaVoting.data);\n    const votes = result.ElectionResult.Contest.find((contest)=> contest.$.key==='5000').Choice;\n    const trump = votes.find( c => c.$.key === '1');\n    const biden = votes.find( c => c.$.key === '2');\n    const jorgensen = votes.find( c => c.$.key === '3');\n    const reducer = (accumulator, currentValue, candidate) => {\n        currentValue.County.forEach(county => {\n            const name = county.$.name;\n            let match = accumulator.find( c => c.name === name);\n            if(match === undefined){\n                let tmp={name};\n                tmp[candidate] = +county.$.votes;\n                accumulator.push(tmp);\n            }else{\n                if (match[candidate]) {\n                    match[candidate] += +county.$.votes;\n                }else{\n                    match[candidate] = +county.$.votes;\n                }\n            }\n        })\n        return accumulator;\n    };\n    let counties = trump.VoteType.reduce(\n        (accumulator, currentValue) => reducer(accumulator,currentValue,'trump')\n        ,[]\n        );\n    counties = biden.VoteType.reduce(\n        (accumulator, currentValue) => reducer(accumulator,currentValue,'biden')\n        ,counties\n    );\n    counties = jorgensen.VoteType.reduce(\n        (accumulator, currentValue) =>  reducer(accumulator,currentValue,'jorgensen')\n        ,counties\n    );\n    let res={\n        total: +trump.$.totalVotes + +biden.$.totalVotes + +jorgensen.$.totalVotes,\n        trumpTotal: +trump.$.totalVotes,\n        bidenTotal: +biden.$.totalVotes,\n        jorgensenTotal: +jorgensen.$.totalVotes,\n        counties\n    }\n    dispatch({type: 'SET_GA_DATA',payload:res});\n    dispatch({type: 'SET_VOTING_LOADING', payload:false});\n}\n\nexport default votingData;","import boundaries from './boundaries';\nimport mapParams from './mapParams';\nimport covidData from './covidData';\nimport {combineReducers} from 'redux';\nimport votingData from './votingData';\n\nconst rootReducer = combineReducers({\n  boundaries,\n  mapParams,\n  covidData,\n  votingData,\n})\nexport default rootReducer;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport * as d3 from 'd3';\nimport { scaleLinear,scaleLog,scaleRadial } from 'd3-scale';\n\nexport default class CNNVotingDataContext {\n    constructor(nationalVotingData) {\n        this._nationalVotingData = nationalVotingData;\n        let sorted=[...nationalVotingData].sort( (a,b) => a.totalVotes - b.totalVotes);\n        this.voteOpScale = scaleLinear().domain([sorted[0].totalVotes,sorted[sorted.length-2].totalVotes]).range([0,1]);\n        this.tmpOpScale = scaleLog().domain([10000,5000000]).range([0,1]);\n        this._currentState={};\n        this._bidenResult ={};\n        this._trumpResult={}\n        this._total={};\n        this._voteRatio={};\n    }\n    selectCurrentStateById(id){\n        this._currentState=this._nationalVotingData.find( s => s.id === id);\n        if(!this._currentState){\n            return undefined;\n        }\n        this._bidenResult = this._currentState? this._currentState.candidates.find( c => c.id === 1036  ): {};\n        this._trumpResult = this._currentState? this._currentState.candidates.find( c => c.id !== 1036  ): {};\n        this._total =this._bidenResult.votes+this._trumpResult.votes\n        this._voteRatio = this._bidenResult.id ? this._bidenResult.votes/this._total :0;\n        if (this._currentState && this._currentState.counties) {\n            let sortedCounties = [...this._currentState.counties].sort((a, b) => a.totalVotes - b.totalVotes);\n            this.voteCountyOpScale = scaleLinear().domain([sortedCounties[0].totalVotes, sortedCounties[sortedCounties.length - 1].totalVotes]).range([0, 1]);\n        }\n        return this._currentState;\n    }\n    selectCurrentCountyById(id){\n        if(!this._currentState.counties){\n            return undefined;\n        }\n        this._currentCounty=this._currentState.counties.find( county => county.id === id);\n        this._bidenCountyResult = this._currentCounty ?this._currentCounty.candidates.find( c => c.id === 1036  ): {}\n        this._trumpCountyResult = this._currentCounty? this._currentCounty.candidates.find( c => c.id !== 1036  ): {};\n        this._countyTotal =this._bidenCountyResult.votes+this._trumpCountyResult.votes\n        this._countyVoteRatio = this._bidenCountyResult.id ? this._bidenCountyResult.votes/this._countyTotal :0;\n        return this._currentCounty;\n    }\n    getTooltip(name){\n        return this._currentState?(<div>\n            <div>{name}</div>\n            <div>Total votes: {this._currentState.totalVotes}</div>\n            <div>Biden: {this._bidenResult.votes}</div>\n            <div>Trump: {this._trumpResult.votes}</div>\n        </div>):null;\n    }\n    getCountyTooltip(name){\n        return this._currentCounty?(\n            <>\n                <div>County: {name}</div>\n                <div>Total Votes: {this._currentCounty.totalVotes}</div>\n                <div>Joe Biden: {this._bidenCountyResult.votes}</div>\n                <div>Donald Trump: {this._trumpCountyResult.votes}</div>\n            </>\n        ):null;\n    }\n    getCountyColor(){\n        const countyColor= this._currentCounty ? d3.color(this._countyVoteRatio>=.5? '#00F':'#F00').copy({opacity:this.tmpOpScale(this._countyTotal)}):\"#DDD\";\n        return countyColor;\n    }\n    getStateColor(id,focusedStateId){\n        const stateColor=this._currentState && focusedStateId !==id ? d3.color(this._voteRatio>=.5? '#00F':'#F00').copy({opacity:this.voteOpScale(this._total)}) :\"#DDD\";\n        return stateColor;\n    }\n}","import {Geographies, Geography} from \"react-simple-maps\";\nimport React from \"react\";\nimport counties from '../data/counties-10m.json'\n\nconst AllCounties = ({setTooltip,zoom,votingDataContext}) =>{\n    return(\n        <Geographies geography={counties}>\n            {({ geographies,projection,path }) =>{\n                const usMap=geographies.map(geo => {\n                    const stateId=geo.id.substr(0,2);\n                    let stat = votingDataContext.selectCurrentStateById(stateId);\n                    let county = stat?votingDataContext.selectCurrentCountyById(geo.id):undefined;\n                    const countyColor = county?votingDataContext.getCountyColor(geo.id):'#FFF';\n                    const countyTooltip = county?votingDataContext.getCountyTooltip(geo.properties.name):<div>{geo.properties.name + ' '+geo.id }</div>;\n                    return (\n                        <Geography\n                            key={geo.rsmKey}\n                            stroke=\"#000\"\n                            geography={geo}\n                            fill={countyColor}\n                            onMouseEnter={() => {\n                                setTooltip(countyTooltip);\n                            }}\n                            onMouseLeave={() => {\n                                setTooltip('');\n                            }}\n                            style={{\n                                default: {\n                                    stroke: \"#000\",\n                                    strokeWidth: 0.5 / zoom,\n                                    outline: \"none\",\n                                },\n                                hover: {\n                                    fill: \"#CFD8DC\",\n                                    stroke: \"#607D8B\",\n                                    strokeWidth: 1 / zoom,\n                                    outline: \"none\",\n                                },\n                            }}\n                        />)\n                });\n                return <>\n                    {usMap}\n                </>\n            }\n            }\n        </Geographies>\n    );\n}\n\nexport default AllCounties;","import React,{memo} from 'react';\nimport {ComposableMap, Geographies, Geography, Marker, ZoomableGroup} from 'react-simple-maps';\nimport Counties from './Counties';\nimport statesBoundaries from '../data/states-10m.json';\nimport VotingLayer from './VotingLayer';\nimport Labels from './Labels';\nimport counties from '../data/counties-10m.json';\nimport CNNVotingDataContext from './CNNVotingDataContext';\nimport VotingCountiesLayer from './VotingCountiesLayer';\nimport Cities from \"./Cities\";\nimport cities from \"../data/cities.json\";\nimport AllCounties from \"./AllCounties\";\n\nconst USMap = ({center,zoom,handleStateClick,handleMove,isLoadingCounties,nationalVotingData,focusedStateId,setTooltip}) =>{\n    const votingDataContext= new CNNVotingDataContext(nationalVotingData);\n\n  return (\n      <ComposableMap data-tip='' projection=\"geoAlbersUsa\" style={{border:'1px black solid', width:'90%', height:'600px'}}>\n        <ZoomableGroup center={center} zoom={zoom} onMoveEnd={(event,zoomEvent)=>handleMove(event,focusedStateId)}>\n          {/*<Geographies geography={statesBoundaries}>*/}\n          {/*  {({ geographies,projection,path }) =>{*/}\n          {/*    const usMap=geographies.map(geo => {*/}\n          {/*      return (*/}\n          {/*          <Geography*/}\n          {/*              key={geo.rsmKey}*/}\n          {/*              stroke=\"#000\"*/}\n          {/*              geography={geo}*/}\n          {/*              fill={\"#FFF\"}*/}\n          {/*              onMouseEnter={() => {*/}\n          {/*                setTooltip(<div>{geo.properties.name}</div>);*/}\n          {/*              }}*/}\n          {/*              onMouseLeave={() => {*/}\n          {/*                setTooltip('');*/}\n          {/*              }}*/}\n          {/*              style={{*/}\n          {/*                default: {*/}\n          {/*                  stroke: \"#000\",*/}\n          {/*                  strokeWidth: 0.5 / zoom,*/}\n          {/*                  outline: \"none\",*/}\n          {/*                },*/}\n          {/*                hover: {*/}\n          {/*                  fill: \"#CFD8DC\",*/}\n          {/*                  stroke: \"#607D8B\",*/}\n          {/*                  strokeWidth: 1 / zoom,*/}\n          {/*                  outline: \"none\",*/}\n          {/*                },*/}\n          {/*              }}*/}\n          {/*          />)*/}\n          {/*    });*/}\n          {/*    return <>*/}\n          {/*      {usMap}*/}\n          {/*    </>*/}\n          {/*  }*/}\n          {/*}*/}\n          {/*</Geographies>*/}\n          <AllCounties setTooltip={setTooltip} zoom={zoom} votingDataContext={votingDataContext}/>\n          {/*<VotingLayer votingDataContext={votingDataContext} focusedStateId={focusedStateId} setTooltip={setTooltip} handleStateClick={handleStateClick} zoom={zoom}/>*/}\n          {/*<Labels />*/}\n\n          {/*{ +focusedStateId > 0 && !isLoadingCounties ?*/}\n          {/*    <Geographies geography={counties}>*/}\n          {/*        {*/}\n          {/*            ({geographies, projection, path}) => {*/}\n          {/*                votingDataContext.selectCurrentStateById(focusedStateId);*/}\n          {/*                const focused = geographies.filter(geo => {*/}\n          {/*                    return geo.id.substring(0, 2) === focusedStateId*/}\n          {/*                });*/}\n          {/*                const countyLayer = <Counties countyBoundary={focused} setTooltip={setTooltip}/>;*/}\n          {/*                const votingCountyLayer=<VotingCountiesLayer countyBoundary={focused} votingDataContext={votingDataContext} setTooltip={setTooltip}/>;*/}\n          {/*                return (*/}\n          {/*                    <>*/}\n          {/*                        {countyLayer}*/}\n          {/*                        {votingCountyLayer}*/}\n          {/*                    </>*/}\n          {/*                );*/}\n          {/*            }*/}\n          {/*        }*/}\n          {/*    </Geographies>*/}\n          {/*  : null*/}\n          {/*}*/}\n          {/*<Cities zoom={zoom} />*/}\n        </ZoomableGroup>\n      </ComposableMap>\n  );\n}\n\nexport default memo(USMap);\n","import {SET_ZOOM,SET_TOOLTIP,SET_CENTER,SET_FOCUSED_STATE_ID,ZOOM} from '../constants/action_constants';\n\nexport function setZoom(zoom){\n  return {type: SET_ZOOM, payload:zoom}\n}\nexport function setCenter(center){\n  return {type: SET_CENTER, payload:center}\n}\nexport function setFocusedState(id){\n  return {type: SET_FOCUSED_STATE_ID, payload:id}\n}\nexport function doZoom(payload){\n  return {type: ZOOM, payload}\n}\nexport function setTooltip(payload){\n  return {type: SET_TOOLTIP, payload}\n}\n","import USMap from '../component/USMap';\nimport {connect} from 'react-redux';\nimport {setCenter,setZoom,setFocusedState,doZoom,setTooltip} from '../actions/actions';\nimport {fetchStateVotingData} from \"../reducers/votingData\";\n\nconst mapStateToProps = state =>{\n  const {zoom,center,focusedStateId} = state.mapParams;\n  return {\n    zoom,\n    center,\n    focusedStateId,\n    isLoadingCounties: state.votingData.isLoadingCounties,\n    gaVotingData: state.votingData.ga,\n    usCovidData: state.covidData.us,\n    covidData: state.covidData.ma,\n    nationalVotingData : state.votingData.us,\n  };\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n  return {\n    setCenter:(center)=>{\n      dispatch(setCenter(center));\n    },\n    setFocusedState:(id)=>{\n      dispatch(setFocusedState(id));\n    },\n    setTooltip(payload){\n      dispatch(setTooltip(payload));\n    },\n    handleMove(event,focusedStateId){\n      const {zoom,coordinates} = event;\n      dispatch(doZoom({center:coordinates,zoom,focusedStateId : zoom < 4 ? '0' : focusedStateId}));\n    },\n    handleStateClick(geo,projection,path,stateAbbr,zoom){\n      const center = projection.invert(path.centroid(geo));\n      dispatch(fetchStateVotingData(stateAbbr));\n      dispatch(doZoom({center,zoom:zoom>4?zoom:4,focusedStateId:geo.id}));\n    }\n  };\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(USMap);\n","import {applyMiddleware,createStore} from 'redux';\nimport rootReducer from './reducers/store';\nimport thunkMiddleware from 'redux-thunk';\n\nexport default function configureStore(preloadedState){\n\n  return createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(thunkMiddleware)\n  );\n}\n","import React,{PureComponent} from 'react';\nimport USMapContainer from './USMapContainer';\nimport {connect} from 'react-redux';\nimport ReactTooltip from 'react-tooltip';\n\nclass Main extends PureComponent{\n  render(){\n    const {tooltip,isLoading}=this.props;\n\n    if(isLoading){\n        return 'Loading';\n    }\n\n    return(\n      <div>\n        <div>\n          <h1>US Map</h1>\n        </div>\n        <div>\n            Source code: <a href=\"https://github.com/harryphan/us-district-map\">Github</a>\n            <br/>\n            Data sources: <a href=\"https://www.cnn.com/election/2020/results/president?iid=politics_election_national_map\">CNN</a>\n            &nbsp;\n            <a href=\"https://www.politico.com/2020-election/results/\">Politico</a>\n        </div>\n        <div style={{padding:'5'}}>\n            <USMapContainer/>\n            <ReactTooltip>{tooltip}</ReactTooltip>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state =>{\n  return {\n    tooltip:state.mapParams.tooltip,\n    isLoading:state.votingData.isLoading || state.votingData.isLoadingCounties,\n  };\n}\n\n\n\nexport default connect(mapStateToProps)(Main);\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport configureStore from './configureStore';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Main from './containers/Main';\r\nimport { fetchAllVotingData, fetchNationalVotingData} from \"./reducers/votingData\";\r\n\r\nconst store = configureStore();\r\n\r\nstore.dispatch(fetchNationalVotingData);\r\n\r\n\r\nstore.dispatch(fetchAllVotingData);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Main />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}