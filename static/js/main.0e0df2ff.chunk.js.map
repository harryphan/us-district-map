{"version":3,"sources":["constants/action_constants.js","reducers/boundaries.js","reducers/mapParams.js","reducers/covidData.js","reducers/store.js","serviceWorker.js","component/Counties.js","component/USMap.js","containers/USMapContainer.js","configureStore.js","actions/actions.js","containers/Main.js","index.js"],"names":["LOAD_STATES","LOAD_COUNTIES","LOAD_COVID","LOAD_US_COVID","SET_ZOOM","SET_CENTER","SET_FOCUSED_STATE_ID","ZOOM","SET_TOOLTIP","initialState","states","counties","isLoading","dispatch","getState","a","type","payload","axios","get","data","boundaries","state","action","produce","draft","center","zoom","focusedStateId","tooltip","mapParams","us","ma","maCovid","csvParse","usCovid","covidData","rootReducer","combineReducers","Boolean","window","location","hostname","match","Counties","setTooltip","filtered","filter","covid","date","sort","b","new_confirmed_cases","colorScale","scaleLinear","domain","length","range","geography","geographies","focused","projection","path","geo","id","substring","map","name","properties","find","c","county","undefined","stroke","fill","onMouseEnter","entry","total_confirmed_cases","onMouseLeave","style","default","strokeWidth","outline","hover","rsmKey","memo","USMap","statesBoundaries","countiesBoundaries","usCovidData","doZoom","setFocusedState","data-tip","border","width","height","onMoveEnd","event","zoomEvent","coordinates","sorted","Cases_in_Last_7_Days","item","st","State","onClick","invert","centroid","handleStateClick","preloadedState","connect","setCenter","setZoom","Main","this","props","href","padding","USMapContainer","PureComponent","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e0df2ff.chunk.js","sourcesContent":["export const LOAD_STATES='LOAD_STATES';\nexport const LOAD_COUNTIES='LOAD_COUNTIES';\nexport const LOAD_COVID='LOAD_COVID';\nexport const LOAD_US_COVID='LOAD_US_COVID';\nexport const SET_ZOOM='SET_ZOOM';\nexport const SET_CENTER='SET_CENTER';\nexport const SET_FOCUSED_STATE_ID='SET_FOCUSED_STATE_ID';\nexport const ZOOM='ZOOM';\nexport const SET_TOOLTIP='SET_TOOLTIP';\n","import produce from 'immer';\nimport {LOAD_STATES,LOAD_COUNTIES} from '../constants/action_constants';\nimport axios from \"axios\";\nlet initialState={\n  states:null,\n  counties:null,\n  isLoading:false\n};\n\nconst boundaries = (state=initialState, action) =>{\n  return produce( state, draft =>{\n    const {payload} = action;\n    switch (action.type) {\n      case LOAD_STATES:\n        draft.states=payload;\n        break;\n      case LOAD_COUNTIES:\n        draft.counties=payload;\n        break;\n      case 'SET_BOUNDARIES_LOADING':\n        draft.isLoading=payload;\n        break;\n      default:\n        return;\n    }\n  })\n}\nexport async function fetchBoundaries(dispatch, getState) {\n  dispatch({ type: 'SET_BOUNDARIES_LOADING', payload: true })\n  const states = await axios.get('states-10m.json')\n  dispatch({ type: LOAD_STATES, payload: states.data })\n  const counties = await axios.get('counties-10m.json')\n  dispatch({ type: LOAD_COUNTIES, payload: counties.data })\n  dispatch({ type: 'SET_BOUNDARIES_LOADING', payload: false })\n}\n\nexport default boundaries;\n","import produce from 'immer';\nimport {SET_CENTER,SET_ZOOM,SET_TOOLTIP,SET_FOCUSED_STATE_ID,ZOOM} from '../constants/action_constants';\nlet initialState={\n  center:[0,0],\n  zoom:1,\n  focusedStateId:0,\n  tooltip:'',\n};\n\nconst mapParams = (state=initialState, action) =>{\n  return produce( state, draft =>{\n    const {payload} = action;\n    switch (action.type) {\n      case SET_CENTER:\n        draft.center=payload;\n        break;\n      case SET_ZOOM:\n        draft.zoom=payload;\n        break;\n      case SET_FOCUSED_STATE_ID:\n        draft.focusedStateId = payload;\n        break;\n      case SET_TOOLTIP:\n        draft.tooltip = payload;\n        break;\n      case ZOOM:\n        return {...payload};\n      default:\n        return;\n    }\n  })\n}\n\nexport default mapParams;\n","import produce from 'immer';\nimport { LOAD_COVID, LOAD_US_COVID} from '../constants/action_constants';\nimport { csvParse } from 'd3-dsv';\nimport axios from 'axios';\n\nlet initialState={\n  us:[],\n  ma:[],\n  isLoading:false\n};\n\nconst covidData = (state=initialState, action) =>{\n  return produce( state, draft =>{\n    const {payload} = action;\n    switch (action.type) {\n      case LOAD_COVID:\n        draft.ma=payload;\n        break;\n      case LOAD_US_COVID:\n        draft.us=payload;\n        break;\n      case 'SET_COVID_LOADING':\n        draft.isLoading=payload;\n        break;\n      default:\n        return;\n    }\n  })\n}\nexport async function fetchCovidData(dispatch, getState) {\n  dispatch({type: 'SET_COVID_LOADING', payload:true});\n  const maCovid = await axios.get('covid.csv')\n  const ma = csvParse(maCovid.data);\n  dispatch({ type: LOAD_COVID, payload: ma })\n  const usCovid = await axios.get('us-covid.csv');\n  const us = csvParse(usCovid.data);\n  dispatch({ type: LOAD_US_COVID, payload: us });\n  dispatch({type: 'SET_COVID_LOADING', payload:false});\n}\nexport async function fetchUSCovidData(dispatch, getState) {\n\n}\n\nexport default covidData;\n","import boundaries from './boundaries';\nimport mapParams from './mapParams';\nimport covidData from './covidData';\nimport {combineReducers} from 'redux';\n\nconst rootReducer = combineReducers({\n  boundaries,\n  mapParams,\n  covidData,\n})\nexport default rootReducer;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React,{memo} from 'react';\nimport { Geographies, Geography } from \"react-simple-maps\";\nimport { scaleLinear } from 'd3-scale';\n\nconst Counties = ({counties,covidData,focusedStateId,setTooltip}) =>{\n  const filtered = covidData.filter(covid => covid.date === '11/9/2020').sort((a,b) => a.new_confirmed_cases - b.new_confirmed_cases);\n  const colorScale = scaleLinear().domain([0,filtered[filtered.length-1].new_confirmed_cases]).range(['white','red']);\n  return (\n            <Geographies geography={counties}>\n              {({ geographies,projection,path }) => {\n                const focused = geographies.filter( geo => { return +geo.id.substring(0,2) === focusedStateId});\n\n                return(\n                <>\n                  {focused.map(geo => {\n                      const { name } = geo.properties;\n                      const data = focusedStateId === 25 ? filtered.find( c => c.county === name):undefined;\n                      return (\n                        <Geography\n                          key={geo.rsmKey}\n                          stroke=\"#000\"\n                          geography={geo}\n                          fill={data ? colorScale(data.new_confirmed_cases) : \"#DDD\"}\n                          onMouseEnter={() => {\n\n                            if(focusedStateId === 25){\n                              const entry = filtered.find( c => c.county === name);\n                              const {county, new_confirmed_cases, total_confirmed_cases} = entry;\n                              setTooltip(<><div>County: {county}</div><div>New Cases: {new_confirmed_cases}</div><div>Total Cases: {total_confirmed_cases}</div></>);\n                            }else{\n                              setTooltip(name);\n                            }\n                          }}\n                          onMouseLeave={() => {\n                            setTooltip('');\n                          }}\n                          style={{\n                             default: {\n\n                                stroke: \"#607D8B\",\n                                strokeWidth: 0.1,\n                                outline: \"none\",\n                             },\n                             hover: {\n                                fill: \"#CFD8DC\",\n                                stroke: \"#607D8B\",\n                                strokeWidth: 0.2,\n                                outline: \"none\",\n                             },\n                          }}\n                        />\n                      )\n                    })\n                  }\n                </>\n              )}}\n            </Geographies>\n  );\n}\nexport default memo(Counties);\n","import React,{memo} from 'react';\nimport { ComposableMap, Geographies, Geography,ZoomableGroup } from \"react-simple-maps\";\nimport Counties from './Counties';\nimport { scaleLinear } from 'd3-scale';\n\nconst USMap = ({statesBoundaries,countiesBoundaries,center,zoom,usCovidData,covidData,focusedStateId,doZoom,setFocusedState,setTooltip}) =>{\n  function handleStateClick(geo,projection,path){\n    const center = projection.invert(path.centroid(geo));\n    doZoom({center,zoom:zoom>4?zoom:4,focusedStateId:+geo.id});\n  }\n  function handleMove(event,zoomEvent){\n    const {zoom} = event;\n    if (zoom < 4){\n      doZoom({center:event.coordinates,zoom,focusedStateId:0});\n    }else{\n      doZoom({center:event.coordinates,zoom,focusedStateId});\n    }\n  }\n  return (\n      <ComposableMap data-tip='' projection=\"geoAlbersUsa\" style=\n    {{border:'1px black solid', width:'90%', height:'600px'}}>\n        <ZoomableGroup center={center} zoom={zoom} onMoveEnd={handleMove}>\n          <Geographies\n              geography={statesBoundaries}\n          >\n            {({ geographies,projection,path }) =>{\n              const sorted = [...usCovidData].sort((a,b) => a.Cases_in_Last_7_Days - b.Cases_in_Last_7_Days);\n              const colorScale = scaleLinear().domain([0,sorted[sorted.length-1].Cases_in_Last_7_Days]).range(['white','red']);\n\n              return geographies.map(geo => {\n                const item = sorted.find((st) => st.State === geo.properties.name);\n\n                return (\n                  <Geography\n                    key={geo.rsmKey}\n                    stroke=\"#000\"\n                    geography={geo}\n                    fill={item ? colorScale(item.Cases_in_Last_7_Days) :\"#DDD\"}\n                    onMouseEnter={() => {\n                      const { name } = geo.properties;\n                      setTooltip(<div><div>{name}</div><div>{item.Cases_in_Last_7_Days}</div></div>);\n                    }}\n                    onMouseLeave={() => {\n                      setTooltip('');\n                    }}\n                    onClick={() => handleStateClick(geo,projection,path)}\n                    style={{\n                       default: {\n                          stroke: \"#607D8B\",\n                          strokeWidth: 0.75 /zoom,\n                          outline: \"none\",\n                       },\n                       hover: {\n                          fill: \"#CFD8DC\",\n                          stroke: \"#607D8B\",\n                          strokeWidth: 1/zoom,\n                          outline: \"none\",\n                       },\n                    }}\n                  />\n                )})\n            }\n          }\n          </Geographies>\n          { focusedStateId > 0 ?\n            <Counties counties={countiesBoundaries} covidData={covidData} setTooltip={setTooltip} focusedStateId={focusedStateId}/>:null\n          }\n        </ZoomableGroup>\n      </ComposableMap>\n  );\n}\nexport default memo(USMap);\n","import USMap from '../component/USMap';\nimport {connect} from 'react-redux';\nimport {setCenter,setZoom,setFocusedState,doZoom,setTooltip} from '../actions/actions';\n\nconst mapStateToProps = state =>{\n  const {states,counties} = state.boundaries;\n  const {zoom,center,focusedStateId} = state.mapParams;\n  return {\n    statesBoundaries:states,\n    countiesBoundaries:counties,\n    zoom,\n    center,\n    focusedStateId,\n    usCovidData: state.covidData.us,\n    covidData: state.covidData.ma,\n  };\n}\n\nconst mapDispatchToProps = dispatch =>{\n  return {\n    setCenter:(center)=>{\n      dispatch(setCenter(center));\n    },\n    setZoom:(zoom)=>{\n      dispatch(setZoom(zoom));\n    },\n    setFocusedState:(id)=>{\n      dispatch(setFocusedState(id));\n    },\n    doZoom(payload){\n      dispatch(doZoom(payload));\n    },\n    setTooltip(payload){\n      dispatch(setTooltip(payload));\n    }\n  };\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(USMap);\n","import {applyMiddleware,createStore} from 'redux';\nimport rootReducer from './reducers/store';\nimport thunkMiddleware from 'redux-thunk';\n\nexport default function configureStore(preloadedState){\n\n  return createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(thunkMiddleware)\n  );\n}\n","import {SET_ZOOM,SET_TOOLTIP,SET_CENTER,SET_FOCUSED_STATE_ID,ZOOM} from '../constants/action_constants';\n\nexport function setZoom(zoom){\n  return {type: SET_ZOOM, payload:zoom}\n}\nexport function setCenter(center){\n  return {type: SET_CENTER, payload:center}\n}\nexport function setFocusedState(id){\n  return {type: SET_FOCUSED_STATE_ID, payload:id}\n}\nexport function doZoom(payload){\n  return {type: ZOOM, payload}\n}\nexport function setTooltip(payload){\n  return {type: SET_TOOLTIP, payload}\n}\n","import React,{PureComponent} from 'react';\nimport USMapContainer from './USMapContainer';\nimport {connect} from 'react-redux';\nimport ReactTooltip from 'react-tooltip';\n\nclass Main extends PureComponent{\n  render(){\n    const {tooltip,isLoading}=this.props;\n\n    if(isLoading){\n        return 'Loading';\n    }\n\n    return(\n      <div>\n        <div>\n          <h1>US Map</h1>\n        </div>\n        <div>\n            Source code: <a href=\"https://github.com/harryphan/us-district-map\">Github</a>\n        </div>\n        <div style={{padding:'5'}}>\n            <USMapContainer/>\n            <ReactTooltip>{tooltip}</ReactTooltip>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state =>{\n  return {\n    tooltip:state.mapParams.tooltip,\n    isLoading:state.boundaries.isLoading || state.covidData.isLoading\n  };\n}\n\n\n\nexport default connect(mapStateToProps)(Main);\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport configureStore from './configureStore';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Main from './containers/Main';\r\nimport {fetchBoundaries} from \"./reducers/boundaries\";\r\nimport {fetchCovidData} from \"./reducers/covidData\";\r\n\r\nconst store = configureStore();\r\nstore.dispatch(fetchBoundaries);\r\nstore.dispatch(fetchCovidData);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Main />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}